package admin;

import com.google.gson.Gson;
import com.itextpdf.text.Element;
import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.opencsv.CSVReader;
import static com.opensymphony.xwork2.Action.SUCCESS;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.org.bean.DnsBean;
import com.org.bean.EmailBean;
import com.org.bean.Forms;
import com.org.bean.UserData;
import com.org.utility.Constants;
import entities.LdapQuery;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import model.FormBean;
import org.apache.struts2.ServletActionContext;
import static org.apache.struts2.ServletActionContext.getServletContext;
import org.apache.struts2.interceptor.SessionAware;
import utility.Inform;
import com.org.bean.ListBean;
import com.org.connections.DbConnection;
import com.org.controller.Vpn_registration;
import com.org.dao.DaOnboardingDao;
import com.org.dao.Ldap;
import com.org.dao.esignDao;
import com.org.service.DnsService;
import com.org.service.EmailService;
import com.org.service.checkFileService;
import java.text.ParseException;
import java.util.Arrays;
import org.apache.commons.io.FileUtils;
import org.jsoup.Jsoup;
import java.util.Calendar;

import java.util.LinkedHashMap;
import java.util.Set;
import org.json.JSONArray;
import org.json.JSONObject;
import rabbitmq.NotifyThrouhRabbitMQ;
import utility.VpnPushApi;
import java.util.Random;
import javax.servlet.http.HttpServletRequest;

public class UserTrack extends ActionSupport implements SessionAware {

    HttpServletRequest request;

    public HttpServletRequest getRequest() {
        return request;
    }

    public void setRequest(HttpServletRequest request) {
        this.request = request;
    }
    DaOnboardingDao daonboard = new DaOnboardingDao();
    DnsService dnsservice = new DnsService();
    EmailService emailservice = new EmailService();
    String printlog;
    private Map<String, Object> hmTrack = null;
    private static Random rand = new Random((new Date()).getTime());
    checkFileService fileservice = new checkFileService();
    Date date = new Date();
    DateFormat dt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String pdate = dt.format(date);
    String ip = ServletActionContext.getRequest().getRemoteAddr();
    Connection con = null, conSlave = null;
    String userAgent = ServletActionContext.getRequest().getHeader("User-Agent");
    String[] sms_service;
    FormBean form_details;
    private ListBean listBeanObj;
    private String adminValue = "";
    private String role = "";
    private String actype = "";
    public int count = 0;
    String CSRFRandom;
    String genfileDownload;
    String uploaded_filename;
    String[] upload_file_ids;
    private String ref_no;
    String doc_file_path, doc_name;
    private String data, ip_type, relay_ip, dns_url, dns_ip, dns_loc, filetoDelete, returnString;

    private String whichform, stat_type;
    private String panel, statusApi, action;
    Boolean raiseQueryBtn = true;
    private InputStream fileInputStream;
    Map<String, String> fileList = new HashMap<String, String>();
    private ArrayList<String> filterForms = new ArrayList<String>();
    private List list = new ArrayList<Forms>();
    Boolean showResponse;
    Boolean showWorkOrder = false;
    Boolean showdnsEdit;
    Boolean showdnsCancel;
    Boolean isReject;
    Boolean showedit;
    Boolean showPullBack;
    Boolean showCreateAction = false;
    Boolean showBulkCreateAction = false;
    Boolean showApprove = true;
    Boolean showQuery = false;
    String showQueryRespone = "";  // added by rahul june 2021
    Boolean showQueryBy = false;

    public Boolean getshowdnsCancel() {
        return showdnsCancel;
    }

    public void setShowdnsCancel(Boolean showdnsCancel) {
        this.showdnsCancel = showdnsCancel;
    }

    public Boolean getShowQueryBy() {
        return showQueryBy;
    }

    public void setShowQueryBy(Boolean showQueryBy) {
        this.showQueryBy = showQueryBy;
    }
    Boolean showAction;
    Boolean showBulkLink = false;
    private ArrayList<String> recpdata = new ArrayList<>();
    private ArrayList<Forms> querydata = new ArrayList<>();
    esignDao esignDao = new esignDao();
    Ldap ldap = new Ldap();
    String comingFrom;
    List<FormBean> mac_os_List = new ArrayList<FormBean>();
    Map session;
    ServletContext ctx = getServletContext();
    List<File> upload_file;
    private String frm[];
    private String stat[];

    public String getReturnString() {
        return returnString;
    }

    public String getShowQueryRespone() {
        return showQueryRespone;
    }

    public void setShowQueryRespone(String showQueryRespone) {
        this.showQueryRespone = showQueryRespone;
    }

    public void setReturnString(String returnString) {
        this.returnString = returnString;
    }

    public String getFiletoDelete() {
        return filetoDelete;
    }

    public void setFiletoDelete(String filetoDelete) {
        this.filetoDelete = filetoDelete;
    }

    public String getComingFrom() {
        return comingFrom;
    }

    public void setComingFrom(String comingFrom) {
        this.comingFrom = comingFrom;
    }

    public String[] getSms_service() {
        return sms_service;
    }

    public void setSms_service(String[] sms_service) {
        this.sms_service = sms_service;
    }

    public Boolean getShowdnsEdit() {
        return showdnsEdit;
    }

    public void setShowdnsEdit(Boolean showdnsEdit) {
        this.showdnsEdit = showdnsEdit;
    }

    public Boolean getShowResponse() {
        return showResponse;
    }

    public void setShowResponse(Boolean showResponse) {
        this.showResponse = showResponse;
    }

    public Boolean getShowWorkOrder() {
        return showWorkOrder;
    }

    public void setShowWorkOrder(Boolean showWorkOrder) {
        this.showWorkOrder = showWorkOrder;
    }

    public Map<String, String> getFileList() {
        return fileList;
    }

    public void setFileList(Map<String, String> fileList) {
        this.fileList = fileList;
    }

    public InputStream getFileInputStream() {
        return fileInputStream;
    }

    public String getGenfileDownload() {
        return genfileDownload;
    }

    public void setGenfileDownload(String genfileDownload) {
        this.genfileDownload = genfileDownload;
    }

    public String getCSRFRandom() {
        return CSRFRandom;
    }

    public void setCSRFRandom(String CSRFRandom) {
        this.CSRFRandom = Jsoup.parse(CSRFRandom).text();
    }

    public String getUploaded_filename() {
        return uploaded_filename;
    }

    public void setUploaded_filename(String uploaded_filename) {
        this.uploaded_filename = uploaded_filename;
    }

    public ArrayList<String> getFilterForms() {
        return filterForms;
    }

    public void setFilterForms(ArrayList<String> filterForms) {
        this.filterForms = filterForms;
    }

    public String getAdminValue() {
        return adminValue;
    }

    public void setAdminValue(String adminValue) {
        this.adminValue = Jsoup.parse(adminValue).text();
    }

    public ListBean getListBeanObj() {
        return listBeanObj;
    }

    public void setListBeanObj(ListBean listBeanObj) {
        this.listBeanObj = listBeanObj;
    }

    public Boolean getShowQuery() {
        return showQuery;
    }

    public void setShowQuery(Boolean showQuery) {
        this.showQuery = showQuery;
    }

    public String getActype() {
        return actype;
    }

    public void setActype(String actype) {
        this.actype = Jsoup.parse(actype).text();
    }

    public FormBean getForm_details() {
        return form_details;
    }

    public void setForm_details(FormBean form_details) {
        this.form_details = form_details;
    }

    public Boolean getShowAction() {
        return showAction;
    }

    public void setShowAction(Boolean showAction) {
        this.showAction = showAction;
    }

    public Boolean getShowBulkLink() {
        return showBulkLink;
    }

    public void setShowBulkLink(Boolean showBulkLink) {
        this.showBulkLink = showBulkLink;
    }

    public String getDoc_file_path() {
        return doc_file_path;
    }

    public void setDoc_file_path(String doc_file_path) {
        this.doc_file_path = doc_file_path;
    }

    public String getDoc_name() {
        return doc_name;
    }

    public void setDoc_name(String doc_name) {
        this.doc_name = doc_name;
    }

    public String getRef_no() {
        return ref_no;
    }

    public void setRef_no(String ref_no) {
        this.ref_no = ref_no;
    }

    public List<File> getUpload_file() {
        return upload_file;
    }

    public void setUpload_file(List<File> upload_file) {
        this.upload_file = upload_file;
    }

    public String[] getUpload_file_ids() {
        return upload_file_ids;
    }

    public void setUpload_file_ids(String[] upload_file_ids) {
        this.upload_file_ids = upload_file_ids;
    }

    public Boolean getShowedit() {
        return showedit;
    }

    public void setShowedit(Boolean showedit) {
        this.showedit = showedit;
    }

    @Override
    public void setSession(Map session) {
        this.session = session;
    }

    public String getData() {
        return data;
    }

    public void setData(String data) {
        this.data = Jsoup.parse(data).text();
    }

    public String getIp_type() {
        return ip_type;
    }

    public void setIp_type(String ip_type) {
        this.ip_type = Jsoup.parse(ip_type).text();
    }

    public String getRelay_ip() {
        return relay_ip;
    }

    public void setRelay_ip(String relay_ip) {
        this.relay_ip = Jsoup.parse(relay_ip).text();
    }

    public String getDns_url() {
        return dns_url;
    }

    public void setDns_url(String dns_url) {
        this.dns_url = Jsoup.parse(dns_url).text();
    }

    public String getDns_ip() {
        return dns_ip;
    }

    public void setDns_ip(String dns_ip) {
        this.dns_ip = Jsoup.parse(dns_ip).text();
    }

    public String getDns_loc() {
        return dns_loc;
    }

    public void setDns_loc(String dns_loc) {
        this.dns_loc = Jsoup.parse(dns_loc).text();
    }

    public String getWhichform() {
        return whichform;
    }

    public void setWhichform(String whichform) {
        this.whichform = Jsoup.parse(whichform).text();
    }

    public String[] getFrm() {
        return frm;
    }

    public void setFrm(String[] frm) {
        this.frm = frm;
    }

    public String[] getStat() {
        return stat;
    }

    public void setStat(String[] stat) {
        this.stat = stat;
    }

    public List getList() {
        return list;
    }

    public void setList(List list) {
        this.list = list;
    }

    public String getPanel() {
        return panel;
    }

    public void setPanel(String panel) {
        this.panel = panel;
    }

    public Boolean getRaiseQueryBtn() {
        return raiseQueryBtn;
    }

    public void setRaiseQueryBtn(Boolean raiseQueryBtn) {
        this.raiseQueryBtn = raiseQueryBtn;
    }

    public ArrayList<String> getRecpdata() {
        return recpdata;
    }

    public void setRecpdata(ArrayList<String> recpdata) {
        this.recpdata = recpdata;
    }

    public ArrayList<Forms> getQuerydata() {
        return querydata;
    }

    public void setQuerydata(ArrayList<Forms> querydata) {
        this.querydata = querydata;
    }

    public Boolean getIsReject() {
        return isReject;
    }

    public void setIsReject(Boolean isReject) {
        this.isReject = isReject;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    public UserTrack() {
        printlog = ServletActionContext.getRequest().getSession().getId() + " == UserTrack.java == ";
        hmTrack = new HashMap<>();
    }

    // below constructor added by pr on 3rddec19
    public UserTrack(Map session) {

        this.session = session;
    }

    public String execute() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public List<FormBean> getMac_os_List() {
        return mac_os_List;
    }

    public void setMac_os_List(List<FormBean> mac_os_List) {
        this.mac_os_List = mac_os_List;
    }

    public String getStat_type() {
        return stat_type;
    }

    public Map<String, Object> getHmTrack() {
        return hmTrack;
    }

    public void setHmTrack(Map<String, Object> hmTrack) {
        this.hmTrack = hmTrack;
    }

    public void setStat_type(String stat_type) {
        this.stat_type = stat_type;
    }

    public String fetch_role() {
        if (ActionContext.getContext().getSession() != null) {
            this.session = ActionContext.getContext().getSession();
            if (session.get("admin_role") != null) {
                role = session.get("admin_role").toString();
            }
        }
        return role;
    }

    public void TrackDetail() throws UnknownHostException, IOException, UnsupportedOperationException, ClassNotFoundException {
        ResultSet rs = null;
        PreparedStatement ps1 = null;
        ResultSet rs1 = null;
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            String json = null;
            String refno = data;
            String form_type = "";
            String Table_name = "", sql_ca = "", sql_user = "", ca_id = "", ca_name = "", ca_email = "", us_email = "";
            Map<String, Object> value = new HashMap<String, Object>();
            if (refno.contains("SMS-FORM")) {
                Table_name = Constants.SMS_TABLE_NAME;
                form_type = Constants.SMS_FORM_KEYWORD;
            } else if (refno.contains("DNS-FORM")) {
                Table_name = Constants.DNS_TABLE_NAME;
                form_type = Constants.DNS_FORM_KEYWORD;
            } else if (refno.contains("WIFI-FORM")) {
                Table_name = Constants.WIFI_TABLE_NAME;
                form_type = Constants.WIFI_FORM_KEYWORD;
            } else if (refno.contains("WIFIPORT-FORM")) {
                Table_name = Constants.WIFI_PORT_TABLE_NAME;
                form_type = Constants.WIFI_PORT_FORM_KEYWORD;
            } else if (refno.contains("SINGLEUSER-FORM")) {
                Table_name = Constants.SINGLE_TABLE_NAME;
                form_type = Constants.SINGLE_FORM_KEYWORD;
            } else if (refno.contains("LDAP-FORM")) {
                Table_name = Constants.LDAP_TABLE_NAME;
                form_type = Constants.LDAP_FORM_KEYWORD;
            } else if (refno.contains("IMAPPOP-FORM")) {
                Table_name = Constants.IMAP_TABLE_NAME;
                form_type = Constants.IMAP_FORM_KEYWORD;
            } else if (refno.contains("MOBILE-FORM")) {
                Table_name = Constants.MOB_TABLE_NAME;
                form_type = Constants.MOB_FORM_KEYWORD;
            } else if (refno.contains("NKN-FORM") || refno.contains("NKN-BULK-FORM")) {
                Table_name = Constants.NKN_TABLE_NAME;
                if (refno.contains("NKN-FORM")) {
                    form_type = Constants.NKN_SINGLE_FORM_KEYWORD;
                } else if (refno.contains("NKN-BULK-FORM")) {
                    form_type = Constants.NKN_BULK_FORM_KEYWORD;
                }
            } else if (refno.contains("GEM-FORM")) {
                Table_name = Constants.GEM_TABLE_NAME;
                form_type = Constants.GEM_FORM_KEYWORD;
            } else if (refno.contains("BULKUSER-FORM")) {
                Table_name = Constants.BULK_TABLE_NAME;
                form_type = Constants.BULK_FORM_KEYWORD;
            } else if (refno.contains("DLIST-FORM")) {
                Table_name = Constants.DIST_TABLE_NAME;
                form_type = Constants.DIST_FORM_KEYWORD;
            } else if (refno.contains("BULKDLIST")) {
                Table_name = Constants.BULKDIST_TABLE_NAME;
                form_type = Constants.BULKDIST_FORM_KEYWORD;
            } else if (refno.contains("RELAY-FORM")) {
                Table_name = Constants.RELAY_TABLE_NAME;
                form_type = Constants.RELAY_FORM_KEYWORD;
            } else if (refno.contains("IP-FORM")) {
                Table_name = Constants.IP_TABLE_NAME;
                form_type = Constants.IP_FORM_KEYWORD;
            } else if (refno.contains("VPN-FORM") || refno.contains("VPNBULK-FORM") || refno.contains("VPNADD-FORM") || refno.contains("VPNMOD-FORM") || refno.contains("VPNRENEW-FORM") || refno.contains("VPNSURRENDER-FORM") || refno.contains("VPNDELETE-FORM")) {
                Table_name = Constants.VPN_TABLE_NAME;
                if (refno.contains("VPN-FORM")) {
                    form_type = Constants.VPN_SINGLE_FORM_KEYWORD;
                } else if (refno.contains("VPNBULK-FORM")) {
                    form_type = Constants.VPN_BULK_FORM_KEYWORD;
                } else if (refno.contains("VPNADD-FORM")) {
                    form_type = Constants.VPN_ADD_FORM_KEYWORD;
                } else if (refno.contains("VPNMOD-FORM")) {
                    form_type = Constants.VPN_ADD_FORM_KEYWORD;
                } else if (refno.contains("VPNRENEW-FORM")) {
                    form_type = Constants.VPN_RENEW_FORM_KEYWORD;
                } else if (refno.contains("VPNSURRENDER-FORM")) {
                    form_type = Constants.VPN_SURRENDER_FORM_KEYWORD;
                } else if (refno.contains("VPNDELETE-FORM")) {
                    form_type = Constants.VPN_DELETE_FORM_KEYWORD;
                }

            } else if (refno.contains("WEBCAST-FORM")) {
                Table_name = Constants.WEBCAST_TABLE_NAME;
                form_type = Constants.WEBCAST_FORM_KEYWORD;
            } else if (refno.contains("CENTRALUTM-FORM")) {
                Table_name = Constants.FIREWALL_TABLE_NAME;
                form_type = Constants.FIREWALL_FORM_KEYWORD;
            }
            String sql = "SELECT auth_off_name,mobile,auth_email,datetime,registration_no FROM " + Table_name + " where registration_no=?";
            //con = getConnection();
            conSlave = DbConnection.getSlaveConnection();
            pst = conSlave.prepareStatement(sql);
            pst.setString(1, refno.trim());
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PST: " + pst);
            rs = pst.executeQuery();
            if (rs.next()) {
                // ******************************* Added By Ravinder this complete if loop ************************************************ //
                // basic detail for all forms
                value.put("name", rs.getString("auth_off_name"));
                value.put("mobile", rs.getString("mobile"));
                value.put("mail", rs.getString("auth_email"));
                String dt = rs.getString("datetime");
                value.put("datetime", dt.substring(0, dt.lastIndexOf(".")));
                value.put("form_type", form_type);
                value.put("registration_no", rs.getString("registration_no"));
                String s = rs.getString("datetime");
                String onestepaheadtime = "";
                sql_user = "select a.stat_id,a.stat_form_type,a.stat_reg_no,a.stat_type,a.stat_forwarded_by,a.stat_forwarded_by_user,a.stat_forwarded_to,(case when a.stat_forwarded_to_user in (select ca_id from comp_auth) then (select ca_email from comp_auth where ca_id = a.stat_forwarded_to_user)  else a.stat_forwarded_to_user end) as stat_forwarded_to_user,a.stat_remarks,a.stat_createdon from status as a, comp_auth as b where a.stat_reg_no = ? group by a.stat_id,a.stat_form_type,a.stat_reg_no,a.stat_type,a.stat_forwarded_by_user order by a.stat_id desc";
                ps1 = conSlave.prepareStatement(sql_user);
                ps1.setString(1, refno);
                rs1 = ps1.executeQuery();
                String dc = "", dm = "", ca = "";
                String my_status_bar = "";
                String my_ca_pending = "", my_support_pending = "", my_co_pending = "", my_mail_admin_pending = "", my_mailadmin_approved = "", my_da_pending = "", my_us_pending = "";
                String my_reject_remark = "";
                String my_previous_stat = "";
                String stat_form_type = "";
                String check_approveorforward = "";
                String actualahedtime = "";
                while (rs1.next()) {
                    check_approveorforward = "";
                    if (my_previous_stat.equals("")) {
                        my_previous_stat = rs1.getString("stat_type");
                    }
                    if (actualahedtime.equals("")) {
                        actualahedtime = rs1.getString("stat_createdon");
                    }
                    if (!my_previous_stat.equals("")) {
                        check_approveorforward = fetchApproveorforward(rs1.getString("stat_type"), my_previous_stat);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "check_approveorforward:" + check_approveorforward);
                    }
                    if (rs1.getString("stat_type").equalsIgnoreCase("completed")) {
                        value.put("completed", "Completed Date :" + rs1.getString("stat_createdon"));
                        value.put("mailadmin_approved", "Approved by Admin :" + rs1.getString("stat_forwarded_by_user") + ", " + rs1.getString("stat_createdon"));
                        my_mail_admin_pending = "<li class='active'><a href='#tab5' data-toggle='popover' class='step popovers' data-container='body' data-content='Approved by Admin :" + rs1.getString("stat_forwarded_by_user") + ", " + rs1.getString("stat_createdon") + "'  data-placement='top' data-original-title='Completed' ><span class='number'> -> </span><span class='desc'> Completed </span></a></li>";
                        my_status_bar = "<li class='active' onclick='openAllTooltip()'>"
                                + "<a href='#tab5' data-toggle='popover' class='step popovers' data-container='body' data-content='Approved by Admin :" + rs1.getString("stat_forwarded_by_user") + ", " + rs1.getString("stat_createdon") + "'  data-placement='top' data-original-title='Completed' >"
                                + "<span class='number'> -> </span><span class='desc'> Completed </span></a>"
                                + "</li>";
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("cancel")) {
                        my_reject_remark = "Remarks :" + rs1.getString("stat_remarks");
                        value.put("cancel_user", "Cancel by User :" + rs1.getString("stat_createdon"));
                        if (!my_status_bar.equals("")) {
                            my_status_bar = "<li style='background-color: red' onclick='openAllTooltip()'>"
                                    + "<a href='#tab3' data-toggle='popover' class='step popovers' data-container='body' data-content='Cancel by User :" + rs1.getString("stat_createdon") + "'   data-placement='bottom'  data-original-title='User' >"
                                    + "<span class='number'> -> </span><span class='desc'> User </span></a>"
                                    + "</li>" + my_status_bar;
                        } else {
                            my_status_bar = "<li style='background-color: red' onclick='openAllTooltip()'>"
                                    + "<a href='#tab3' data-toggle='popover' class='step popovers' data-container='body' data-content='Cancel by User :" + rs1.getString("stat_createdon") + "'  data-placement='bottom'  data-original-title='User' >"
                                    + "<span class='number'> -> </span><span class='desc'> User </span>"
                                    + "</a>"
                                    + "</li>";
                        }
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("manual_upload")) {
                        if (check_approveorforward.equalsIgnoreCase("manual_upload")) {
                            my_status_bar = "<li onclick='openAllTooltip()' ><a href='#tab1' data-toggle='popover' class='step popovers' data-container='body' data-content='Pending with User :" + rs1.getString("stat_createdon") + "'   data-placement='bottom'  data-original-title='Manual User'><span class='number'> -> </span><span class='desc'> Manual User</span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Approved")) {
//                        my_status_bar = "<li class='active' onclick='openAllTooltip()' ><a href='#tab1' data-toggle='popover' class='step popovers  test12' data-container='body' data-content='Approved by User :" + rs1.getString("stat_createdon") + "'   data-placement='bottom'  data-original-title='Manual User'><span class='number'> -> </span><span class='desc'> Manual User </span></a></li>" + my_status_bar;
                            my_status_bar = "<li class='active' onclick='openAllTooltip()' ><a href='#tab1' data-toggle='popover' class='step popovers  test12' data-container='body' data-content='Approved by User :" + onestepaheadtime + "'   data-placement='bottom'  data-original-title='Manual User'><span class='number'> -> </span><span class='desc'> Manual User </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Rejected")) {
//                        my_status_bar = "<li class='active' onclick='openAllTooltip()' style='background-color: red' ><a href='#tab1' data-toggle='popover' class='step popovers' data-container='body' data-content='Cancelled by User :" + rs1.getString("stat_createdon") + "'   data-placement='bottom'  data-original-title='Manual User'><span class='number'> -> </span><span class='desc'> Manual User </span></a></li>" + my_status_bar;
                            my_status_bar = "<li class='active' onclick='openAllTooltip()' style='background-color: red' ><a href='#tab1' data-toggle='popover' class='step popovers' data-container='body' data-content='Cancelled by User :" + onestepaheadtime + "'   data-placement='bottom'  data-original-title='Manual User'><span class='number'> -> </span><span class='desc'> Manual User </span></a></li>" + my_status_bar;
                        }
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("ca_pending")) {
                        ca_id = rs1.getString("stat_forwarded_to_user");
                        ca_email = rs1.getString("stat_forwarded_to_user");
                        if (stat_form_type.equalsIgnoreCase("wifi") || stat_form_type.equalsIgnoreCase("gem")) {
                            value.put("ca_pending", "Pending with Forwarding Officer :" + rs1.getString("stat_createdon") + " Email :" + ca_email);
                            value.put("ca", "Forwarding Officer Recieved at :" + rs1.getString("stat_createdon") + " Email :" + ca_email);
                        } else {
                            value.put("ca_pending", "Pending with Reporting/Nodal/Forwarding Officer :" + rs1.getString("stat_createdon") + " Email :" + ca_email);
                            value.put("ca", "Reporting/Nodal/Forwarding Officer Recieved at :" + rs1.getString("stat_createdon") + " Email :" + ca_email);
                        }
                        if (check_approveorforward.equalsIgnoreCase("ca_pending")) {
                            my_status_bar = "<li onclick='openAllTooltip()' >"
                                    + "<a href='#tab1' data-toggle='popover' class='step popovers' data-container='body' data-content='Reporting/Nodal/Forwarding Officer Recieved at :" + rs1.getString("stat_createdon")
                                    + " Email :" + ca_email + "  ' data-placement='bottom'  data-original-title='Reporting/Nodal/Forwarding Officer'>"
                                    + "<span class='number'> -> </span><span class='desc'> Reporting/Nodal/Forwarding Officer </span></a>"
                                    + "</li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Approved")) {
                            my_status_bar = "<li class='active' ><a href='#tab1' data-toggle='popover' class='step popovers  test12' data-container='body' data-content='Approved by Reporting/Nodal/Forwarding Officer :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'   data-placement='bottom'  data-original-title='Reporting/Nodal/Forwarding Officer'><span class='number'> -> </span><span class='desc'> Reporting/Nodal/Forwarding Officer </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Rejected")) {
                            my_status_bar = "<li class='active' onclick='openAllTooltip()' style='background-color: red' ><a href='#tab1' data-toggle='popover' class='step popovers' data-container='body' data-content='Rejected by Reporting/Nodal/Forwarding Officer :" + ca_email + " , " + onestepaheadtime + "'   data-placement='bottom'  data-original-title='Reporting/Nodal/Forwarding Officer'><span class='number'> -> </span><span class='desc'> Reporting/Nodal/Forwarding Officer </span></a></li>" + my_status_bar;
                        }
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("ca_rejected")) {
                        my_reject_remark = "Remarks :" + rs1.getString("stat_remarks");
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("us_rejected")) {
                        my_reject_remark = "Remarks :" + rs1.getString("stat_remarks");
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("us_pending")) {
                        us_email = rs1.getString("stat_forwarded_to_user");
                        if (check_approveorforward.equalsIgnoreCase("us_pending")) {
                            my_status_bar = "<li onclick='openAllTooltip()' >"
                                    + "<a href='#tab1' data-toggle='popover' class='step popovers' data-container='body' data-content='Under Secratory/Forwarding Officer Recieved at :" + rs1.getString("stat_createdon")
                                    + " Email :" + us_email + "  ' data-placement='bottom'  data-original-title='Under Secratory/Forwarding Officer'>"
                                    + "<span class='number'> -> </span><span class='desc'> Under Secratory/Forwarding Officer </span></a>"
                                    + "</li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Approved")) {
                            my_status_bar = "<li class='active' ><a href='#tab1' data-toggle='popover' class='step popovers  test12' data-container='body' data-content='Under Secratory/Forwarding Officer :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'   data-placement='bottom'  data-original-title='Under Secratory/Forwarding Officer'><span class='number'> -> </span><span class='desc'> Under Secratory/Forwarding Officer </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Rejected")) {
                            my_status_bar = "<li class='active' onclick='openAllTooltip()' style='background-color: red' ><a href='#tab1' data-toggle='popover' class='step popovers' data-container='body' data-content='Rejected by Under Secratory/Forwarding Officer :" + us_email + " , " + onestepaheadtime + "'   data-placement='bottom'  data-original-title='Under Secratory/Forwarding Officer'><span class='number'> -> </span><span class='desc'> Under Secratory/Forwarding Officer </span></a></li>" + my_status_bar;
                        }
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("support_pending")) {
                        value.put("support_pending", "Pending with Support :" + rs1.getString("stat_createdon"));
                        value.put("support", "Support Recieved at :" + rs1.getString("stat_createdon"));
                        value.put("ca_approved", "Approved by Reporting/Nodal/Forwarding Officer :" + rs1.getString("stat_createdon"));
                        my_support_pending = "<li ><a href='#tab2' data-toggle='popover' class='step popovers' data-container='body'  data-content='Support Recieved at :" + rs1.getString("stat_createdon") + "' data-placement='top'  data-original-title='Support'><span class='number'> -> </span><span class='desc'> Support </span></a></li>";
                        my_ca_pending = "<li class='active' ><a href='#tab1' data-toggle='popover' class='step popovers  test12' data-container='body' data-content='Approved by Reporting/Nodal/Forwarding Officer :" + rs1.getString("stat_createdon") + "'   data-placement='bottom'  data-original-title='Reporting/Nodal/Forwarding Officer'><span class='number'> -> </span><span class='desc'> Reporting/Nodal/Forwarding Officer </span></a></li>";
                        if (check_approveorforward.equalsIgnoreCase("Forward")) {
                            my_status_bar = "<li onclick='openAllTooltip()' class='active'><a href='#tab2' data-toggle='popover' class='step popovers' data-container='body'  data-content='Approved by Support :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "' data-placement='top'  data-original-title='Support'><span class='number'> -> </span><span class='desc'> Support </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Rejected")) {
                            my_status_bar = "<li onclick='openAllTooltip()' style='background-color: red'><a href='#tab2' data-toggle='popover' class='step popovers' data-container='body'  data-content='Rejected by Support :" + rs1.getString("stat_forwarded_to_user") + "," + onestepaheadtime + "' data-placement='top'  data-original-title='Support'><span class='number'> -> </span><span class='desc'> Support </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("support_pending")) {
                            my_status_bar = "<li onclick='openAllTooltip()'  ><a href='#tab1' data-toggle='popover' class='step popovers  test12' data-container='body' data-content='Recieved by Support :" + rs1.getString("stat_forwarded_to_user") + ", " + rs1.getString("stat_createdon") + "'   data-placement='bottom'  data-original-title='Support'><span class='number'> -> </span><span class='desc'> Support </span></a></li>" + my_status_bar;
                        }
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("support_rejected")) {
                        my_reject_remark = "Remarks :" + rs1.getString("stat_remarks");
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("coordinator_pending")) {
                        my_support_pending = "";
                        value.put("coordinator_pending", "Pending with Coordinator :" + rs1.getString("stat_createdon") + ", Coordinator :" + rs1.getString("stat_forwarded_to_user"));
                        value.put("coordinator", "Coordinator Recieved at :" + rs1.getString("stat_createdon") + ", Coordinator :" + rs1.getString("stat_forwarded_to_user"));
                        value.put("support_approved", "Approved by Support :" + rs1.getString("stat_createdon"));
                        my_support_pending = "<li class='active'><a href='#tab2' data-toggle='popover' class='step popovers' data-container='body'  data-content='Approved by Support :" + rs1.getString("stat_createdon") + "' data-placement='top'  data-original-title='Support'><span class='number'> -> </span><span class='desc'> Support </span></a></li>";
                        my_co_pending = "<li ><a href='#tab3' data-toggle='popover' class='step popovers' data-container='body' data-content='Pending with Coordinator :" + rs1.getString("stat_createdon") + ", Coordinator :" + rs1.getString("stat_forwarded_to_user") + "'  data-placement='bottom'  data-original-title='Coordinator' ><span class='number'> -> </span><span class='desc'> Coordinator </span></a></li>";
                        if (check_approveorforward.equalsIgnoreCase("Forward")) {
                            my_status_bar = "<li onclick='openAllTooltip()' class='active'><a href='#tab3' data-toggle='popover' class='step popovers' data-container='body' data-content='Forwarded by Coordinator :" + onestepaheadtime + "'  data-placement='bottom'  data-original-title='Coordinator' ><span class='number'> -> </span><span class='desc'> Coordinator </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("coordinator_pending")) {
                            my_status_bar = "<li onclick='openAllTooltip()' ><a href='#tab3' data-toggle='popover' class='step popovers' data-container='body' data-content='Pending with Coordinator :" + rs1.getString("stat_createdon") + ", Coordinator :" + rs1.getString("stat_forwarded_to_user") + "'  data-placement='bottom'  data-original-title='Coordinator' ><span class='number'> -> </span><span class='desc'> Coordinator </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Rejected")) {
                            my_status_bar = "<li onclick='openAllTooltip()' style='background-color: red'><a href='#tab3' data-toggle='popover' class='step popovers' data-container='body' data-content='Rejected by Coordinator :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'  data-placement='bottom'  data-original-title='Coordinator' ><span class='number'> -> </span><span class='desc'> Coordinator </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Approved")) {
                            my_status_bar = "<li onclick='openAllTooltip()' class='active'><a href='#tab3' data-toggle='popover' class='step popovers' data-container='body' data-content='Approved by Coordinator :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'  data-placement='bottom'  data-original-title='Coordinator' ><span class='number'> -> </span><span class='desc'> Coordinator </span></a></li>" + my_status_bar;
                        }
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("coordinator_rejected")) {
                        my_reject_remark = "Remarks :" + rs1.getString("stat_remarks");
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("mail-admin_pending")) {
                        my_co_pending = "";
                        value.put("mailadmin_pending", "Pending with Admin :" + rs1.getString("stat_createdon") + ", Admin :" + rs1.getString("stat_forwarded_to_user") + ", Approved by Coordinator :" + rs1.getString("stat_forwarded_to_user"));
                        value.put("mailadmin", "Admin Recieved at :" + rs1.getString("stat_createdon") + ", Admin :" + rs1.getString("stat_forwarded_to_user") + ", Approved by Coordinator :" + rs1.getString("stat_forwarded_to_user"));
                        value.put("coordinator_approved", "Approved by Coordinator :" + rs1.getString("stat_createdon"));
                        my_co_pending = "<li  class='active'><a href='#tab3' data-toggle='popover' class='step popovers' data-container='body' data-content='Approved by Coordinator :" + rs1.getString("stat_createdon") + "'  data-placement='bottom'  data-original-title='Coordinator' ><span class='number'> -> </span><span class='desc'> Coordinator </span></a></li>";
                        my_mail_admin_pending = "<li ><a href='#tab4' data-toggle='popover' class='step popovers' data-container='body' data-content='Pending with Admin :" + rs1.getString("stat_createdon") + ", Admin :" + rs1.getString("stat_forwarded_to_user") + ", Approved by Coordinator :" + rs1.getString("stat_forwarded_to_user") + "'  data-placement='top'  data-original-title='Admin' ><span class='number'> -> </span><span class='desc'> Admin </span></a></li>";
                        if (check_approveorforward.equalsIgnoreCase("Approved")) {
                            my_status_bar = "<li onclick='openAllTooltip()' class='active'><a href='#tab5' data-toggle='popover' class='step popovers' data-container='body' data-content='Approved by Admin :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'  data-placement='top' data-original-title='Admin' ><span class='number'> -> </span><span class='desc'> Admin </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Rejected")) {
                            my_status_bar = "<li onclick='openAllTooltip()' style='background-color: red'><a href='#tab4' data-toggle='popover' class='step popovers' data-container='body' data-content='Rejected by Admin :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'  data-placement='top'  data-original-title='Admin' ><span class='number'> -> </span><span class='desc'> Admin </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("mail-admin_pending")) {
                            my_status_bar = "<li onclick='openAllTooltip()' ><a href='#tab4' data-toggle='popover' class='step popovers' data-container='body' data-content='Pending with Admin :" + rs1.getString("stat_createdon") + ", Admin :" + rs1.getString("stat_forwarded_to_user") + ", Approved by :" + rs1.getString("stat_forwarded_to_user") + "'  data-placement='top'  data-original-title='Admin' ><span class='number'> -> </span><span class='desc'> Admin </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Forward")) {
                            my_status_bar = "<li onclick='openAllTooltip()' class='active'><a href='#tab5' data-toggle='popover' class='step popovers' data-container='body' data-content='Forwarded by :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'  data-placement='top' data-original-title='Admin' ><span class='number'> -> </span><span class='desc'> Admin </span></a></li>" + my_status_bar;
                        }
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("mail-admin_rejected")) {
                        my_mail_admin_pending = "";
                        my_reject_remark = "Remarks :" + rs1.getString("stat_remarks");
                        value.put("mailadmin_rejected", "Rejected by Admin :" + rs1.getString("stat_forwarded_by_user") + ", " + rs1.getString("stat_createdon"));
                        value.put("mailadmin_remark", "Remarks :" + rs1.getString("stat_remarks"));
                        my_mail_admin_pending = "<li style='background-color: red'><a href='#tab4' data-toggle='popover' class='step popovers' data-container='body' data-content='Rejected by Admin :" + rs1.getString("stat_forwarded_to_user") + ", " + rs1.getString("stat_createdon") + "'  data-placement='top'  data-original-title='Admin' ><span class='number'> -> </span><span class='desc'> Admin </span></a></li>";
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("da_pending")) {
                        value.put("da_pending", "Pending with Delegated Admin :" + rs1.getString("stat_createdon"));
                        value.put("da", "Delegated Admin Recieved :" + rs1.getString("stat_forwarded_to_user") + "," + rs1.getString("stat_createdon"));
                        value.put("da_approved", "Approved by Reporting/Nodal/Forwarding Officer :" + rs1.getString("stat_createdon"));
                        my_da_pending = "<li><a href='#tab6' data-toggle='popover' class='step popovers' data-container='body' data-content='Delegated Admin Recieved :" + rs1.getString("stat_forwarded_to_user") + ", " + rs1.getString("stat_createdon") + "'  data-placement='bottom'  data-original-title='Delegated Admin'><span class='number'> -> </span><span class='desc'> Delegated Admin </span></a></li>";
                        if (check_approveorforward.equalsIgnoreCase("Approved")) {
                            my_status_bar = "<li onclick='openAllTooltip()' class='active'><a href='#tab5' data-toggle='popover' class='step popovers' data-container='body' data-content='Approved by Admin :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'  data-placement='bottom' data-original-title='Delegated Admin' ><span class='number'> -> </span><span class='desc'> Delegated Admin </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Rejected")) {
                            my_status_bar = "<li onclick='openAllTooltip()' style='background-color: red'><a href='#tab6' data-toggle='popover' class='step popovers' data-container='body' data-content='Rejected by Delegated Admin :" + rs1.getString("stat_forwarded_by_user") + ", " + onestepaheadtime + "'  data-placement='bottom'  data-original-title='Delegated Admin'><span class='number'> -> </span><span class='desc'> Delegated Admin </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("da_pending")) {
                            my_status_bar = "<li onclick='openAllTooltip()' ><a href='#tab6' data-toggle='popover' class='step popovers' data-container='body' data-content='Delegated Admin Recieved :" + rs1.getString("stat_forwarded_to_user") + ", " + rs1.getString("stat_createdon") + "'  data-placement='bottom'  data-original-title='Delegated Admin'><span class='number'> -> </span><span class='desc'> Delegated Admin </span></a></li>" + my_status_bar;
                        } else if (check_approveorforward.equalsIgnoreCase("Forward")) {
                            my_status_bar = "<li onclick='openAllTooltip()' class='active'><a href='#tab5' data-toggle='popover' class='step popovers' data-container='body' data-content='Forwarded by Admin :" + rs1.getString("stat_forwarded_to_user") + ", " + onestepaheadtime + "'  data-placement='bottom' data-original-title='Delegated Admin' ><span class='number'> -> </span><span class='desc'> Delegated Admin </span></a></li>" + my_status_bar;
                        }
                    } else if (rs1.getString("stat_type").equalsIgnoreCase("da_rejected")) {
                        my_da_pending = "";
                        my_reject_remark = "Remarks :" + rs1.getString("stat_remarks");
                        value.put("da_rejected", "Rejected by Delegated Admin :" + rs1.getString("stat_forwarded_by_user") + ", " + rs1.getString("stat_createdon"));
                        value.put("da_remark", "Remarks :" + rs1.getString("stat_remarks"));
                        my_da_pending = "<li style='background-color: red'><a href='#tab6' data-toggle='popover' class='step popovers' data-container='body' data-content='Rejected by Delegated Admin :" + rs1.getString("stat_forwarded_to_user") + ", " + rs1.getString("stat_createdon") + "'  data-placement='bottom'  data-original-title='Delegated Admin'><span class='number'> -> </span><span class='desc'> Delegated Admin </span></a></li>";
                    } //end 26feb 2018
                    my_previous_stat = "";
                    my_previous_stat = rs1.getString("stat_type");
                    onestepaheadtime = rs1.getString("stat_createdon");
                }
                value.put("my_ca_pending", my_status_bar);
                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "my_reject_remark :" + my_reject_remark);
                value.put("my_reject_remark", my_reject_remark);
            }
            // ******************************* Added By Ravinder ************************************************ //
            //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + "Map object :::::" + value);
            if (value != null) {
                json = new Gson().toJson(value);
                //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + "\n json object::::" + json);
                ServletActionContext.getResponse().setContentType("application/json");
                ServletActionContext.getResponse().getWriter().write(json);
            } else {
                ServletActionContext.getResponse().getWriter().write("");
            }
        } catch (SQLException ex) {
            Logger.getLogger(UserTrack.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (ps1 != null) {
                try {
                    ps1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void CancelRequest() throws UnknownHostException, IOException, UnsupportedOperationException, ClassNotFoundException {
        //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + "im in Details of CancelRequest USer :" + getData());
        String SessionCSRFRandom = session.get("CSRFRandom").toString();

        if (!CSRFRandom.equals(SessionCSRFRandom)) {
            hmTrack.put("csrf_error", "CSRF Token is invalid.");
            return;
        }

        String json = null;
        String dbupdate = "";
        String refno = getData();
        setData(refno);
        Map<String, Object> value = new HashMap<String, Object>();
        //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + "Reference number :" + refno);
        ResultSet rs = null;
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection();
            String table = "", stat = "", column = "registration_no";
            if (refno.contains("IMAPPOP-FORM")) {
                table = Constants.IMAP_TABLE_NAME;
                stat = Constants.IMAP_FORM_KEYWORD;
            } else if (refno.contains("BULKDLIST")) {
                table = Constants.BULKDIST_TABLE_NAME;    //line added by Rahul jan 2021
                stat = Constants.BULKDIST_FORM_KEYWORD;
            } else if (refno.contains("DLIST-FORM")) {
                table = Constants.DIST_TABLE_NAME;      //line changed by sahil 22 dec 2020
                stat = Constants.DIST_FORM_KEYWORD;
//            } else if (refno.contains("BULKDLIST")) {
//                table = Constants.BULKDIST_TABLE_NAME;    //line added by Rahul jan 2021
//                stat = Constants.BULKDIST_FORM_KEYWORD;
            } else if (refno.contains("LDAP-FORM")) {
                table = Constants.LDAP_TABLE_NAME;
                stat = Constants.LDAP_FORM_KEYWORD;
            } else if (refno.contains("RELAY-FORM")) {
                table = Constants.RELAY_TABLE_NAME;
                stat = Constants.RELAY_FORM_KEYWORD;
            } else if (refno.contains("IP-FORM")) {
                table = Constants.IP_TABLE_NAME;
                stat = Constants.IP_FORM_KEYWORD;
            } else if (refno.contains("SINGLEUSER-FORM")) {
                table = Constants.SINGLE_TABLE_NAME;
                stat = Constants.SINGLE_FORM_KEYWORD;
            } else if (refno.contains("BULKUSER-FORM")) {
                table = Constants.BULK_TABLE_NAME;
                stat = Constants.BULK_FORM_KEYWORD;
            } else if (refno.contains("NKN-FORM")) {
                table = Constants.NKN_TABLE_NAME;
                stat = Constants.NKN_SINGLE_FORM_KEYWORD;
            } else if (refno.contains("NKN-BULK-FORM")) {
                table = Constants.NKN_TABLE_NAME;
                stat = Constants.NKN_BULK_FORM_KEYWORD;
            } else if (refno.contains("SMS-FORM")) {
                table = Constants.SMS_TABLE_NAME;
                stat = Constants.SMS_FORM_KEYWORD;
            } else if (refno.contains("MOBILE")) {
                table = Constants.MOB_TABLE_NAME;
                stat = Constants.MOB_FORM_KEYWORD;
            } else if (refno.contains("GEM-FORM")) {
                table = Constants.GEM_TABLE_NAME;
                stat = Constants.GEM_FORM_KEYWORD;
            } else if (refno.contains("DNS-FORM")) {
                table = Constants.DNS_TABLE_NAME;
                stat = Constants.DNS_FORM_KEYWORD;
            } else if (refno.contains("WIFI-FORM")) {
                table = Constants.WIFI_TABLE_NAME;
                stat = Constants.WIFI_FORM_KEYWORD;
            } else if (refno.contains("WIFIPORT-FORM")) {
                table = Constants.WIFI_PORT_TABLE_NAME;
                stat = Constants.WIFI_PORT_FORM_KEYWORD;
            } else if (refno.contains("VPN-FORM") || refno.contains("VPNBULK-FORM") || refno.contains("VPNADD-FORM") || refno.contains("VPNMOD-FORM") || refno.contains("VPNRENEW-FORM") || refno.contains("VPNSURRENDER-FORM") || refno.contains("VPNDELETE-FORM")) {
                table = Constants.VPN_TABLE_NAME;
                if (refno.contains("VPN-FORM")) {
                    stat = Constants.VPN_SINGLE_FORM_KEYWORD;
                } else if (refno.contains("VPNBULK-FORM")) {
                    stat = Constants.VPN_BULK_FORM_KEYWORD;
                } else if (refno.contains("VPNADD-FORM")) {
                    stat = Constants.VPN_ADD_FORM_KEYWORD;
                } else if (refno.contains("VPNMOD-FORM")) {
                    stat = Constants.VPN_ADD_FORM_KEYWORD;
                } else if (refno.contains("VPNRENEW-FORM")) {
                    stat = Constants.VPN_RENEW_FORM_KEYWORD;
                } else if (refno.contains("VPNSURRENDER-FORM")) {
                    stat = Constants.VPN_SURRENDER_FORM_KEYWORD;
                } else if (refno.contains("VPNDELETE-FORM")) {
                    stat = Constants.VPN_DELETE_FORM_KEYWORD;
                }
            } else if (refno.contains("WEBCAST-FORM")) {
                stat = Constants.WEBCAST_FORM_KEYWORD;
            } else if (refno.contains("CENTRALUTM-FORM")) {
                stat = Constants.FIREWALL_FORM_KEYWORD;
            } else if (refno.contains("DOREXT-FORM")) {
                table = Constants.DOR_EXT_TABLE_NAME;
                stat = Constants.DOR_EXT_FORM_KEYWORD;
            } else if (refno.contains("DOREXTRT-FORM")) {
                table = Constants.DOR_EXT_RETIRED_TABLE_NAME;
                stat = Constants.DOR_EXT_RT_FORM_KEYWORD;
            } else if (refno.contains("DAONBOARDING-FORM")) {
                stat = Constants.DAONBOARDING_FORM_KEYWORD;
                table = Constants.DAONBOARDING_TABLE_NAME;
            } else if (refno.contains("EMAILACTIVATE-FORM")) {
                stat = Constants.EMAILACTIVATE_FORM_KEYWORD;
                table = Constants.EMAILACTIVATE_TABLE_NAME;
            } else if (refno.contains("EMAILDEACTIVATE-FORM")) {
                stat = Constants.EMAILDEACTIVATE_FORM_KEYWORD;
                table = Constants.EMAILDEACTIVATE_TABLE_NAME;
            } else if (refno.contains("MOBILE-FORM") || refno.contains("PROFILE-FORM")) {
                stat = Constants.MOB_FORM_KEYWORD;
                table = Constants.MOB_TABLE_NAME;
            }
            String sql = "SELECT " + column + " FROM " + table + " where " + column + "=?";
            pst = conSlave.prepareStatement(sql);
            pst.setString(1, refno);
            System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " == CancelRequest user track query1" + pst);
            rs = pst.executeQuery();
            if (rs.next()) {
                String sqlupdate = "INSERT INTO status (stat_form_type, stat_reg_no, stat_type, stat_remarks) VALUES (?,?,?,?)";
                pst = con.prepareStatement(sqlupdate);
                pst.setString(1, stat);
                pst.setString(2, refno);
                pst.setString(3, "cancel");
                pst.setString(4, "cancelled by user");
                System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " == CancelRequest user track query2" + pst);

                int j = pst.executeUpdate();
                if (j > 0) {
                    System.out.println(printlog + " == " + "check value insert query1");
                    String sql_final_track = "update final_audit_track set status=?  where registration_no=?";
                    PreparedStatement ps = con.prepareStatement(sql_final_track);
                    ps.setString(1, "cancel");
                    ps.setString(2, refno);
                    System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " == CancelRequest user track query3" + ps);

                    int k = ps.executeUpdate();
                }
                //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + "Update ImapPopUserDetails Sucessfully");
                dbupdate = "cancel";
                // below line added by pr on 20thdec17
                Inform infObj = new Inform();
                infObj.sendCancelMail(refno);
            } else {
                dbupdate = "notfound";
                // System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + "User Reference number not found");
            }

            System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " == CancelRequest dbupdate" + dbupdate);

            value.put("dbupdate", dbupdate);
            json = new Gson().toJson(value);
            ServletActionContext.getResponse().setContentType("application/json");
            ServletActionContext.getResponse().getWriter().write(json);
        } catch (ClassNotFoundException | SQLException ex) {
            dbupdate = "fail";
            ex.printStackTrace();
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
    public String flag = "";

    public void PreviewRequestBackup() {

        String SessionCSRFRandom = session.get("CSRFRandom").toString();
//        ForwardAction fa=new ForwardAction();
//        fa.revokeAndUpdateStatus("DNS-FORM202202180004", "dns", "co_to_sup", "", "Any"); // added and commented by Rahul maurya due to testing purpose
        if (!CSRFRandom.equals(SessionCSRFRandom)) {
            hmTrack.put("csrf_error", "CSRF Token is invalid.");
            return;
        }
        //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + "im in Details of PreviewRequest USer REgistration number  :" + getData());
        String refno = getData();
        ResultSet rs = null, rs1 = null, rs2 = null, rs3 = null, rs4 = null, rs5 = null;
        //Connection con = null;
        PreparedStatement pst = null;
        setData(refno);
        session.put("ref", refno);
        boolean isEditable = false;
        String role = "";
        UserData userdata = (UserData) session.get("uservalues");
        boolean ldap_employee = userdata.isIsEmailValidated();
        boolean isHodLdapEmployee = false;
        if (comingFrom.equals("user")) {
            isEditable = fisValidUser(refno, userdata.getEmail(), "user", "toPreview", userdata.getAliases());
            role = "user";
        } else if (comingFrom.equals("admin")) {
            role = (String) session.get("admin_role");
            isEditable = fisValidUser(refno, userdata.getEmail(), role, "toPreview", userdata.getAliases());
        }
        //added for hog preview
        if (flag != null) {
            if (flag.equalsIgnoreCase("hog")) {
                isEditable = true;
            }
        }
        //EO added for hog preview

        System.out.println(printlog + "isEDITABLE ::::::::::::: " + isEditable);

        try {
            if (isEditable) {
                System.out.println(printlog + "Inside If block PreviewRequest userTrack " + whichform);
                //con = getConnection();
                conSlave = DbConnection.getSlaveConnection();
                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + " Whichform in preview function: " + whichform);
                if (whichform.equalsIgnoreCase("sms")) {
                    String sql = "select * from sms_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("sms_service", rs.getString("sms_service"));
                            prvwdetails.put("pull_url", rs.getString("pull_url"));
                            prvwdetails.put("pull_keyword", rs.getString("pull_keyword"));
                            prvwdetails.put("short_flag", rs.getString("short_flag"));
                            prvwdetails.put("short_note", rs.getString("short_note"));
                            prvwdetails.put("app_name", rs.getString("app_name"));
                            prvwdetails.put("app_url", rs.getString("app_url"));
                            prvwdetails.put("sms_usage", rs.getString("sms_usage"));
                            prvwdetails.put("server_loc", rs.getString("server_loc"));
                            prvwdetails.put("server_loc_other", rs.getString("server_loc_other"));
                            prvwdetails.put("base_ip", rs.getString("base_ip"));
                            prvwdetails.put("service_ip", rs.getString("service_ip"));
                            prvwdetails.put("tech_name", rs.getString("tech_name"));
                            prvwdetails.put("tech_desig", rs.getString("tech_desig"));
                            prvwdetails.put("tech_emp_code", rs.getString("tech_emp_code"));
                            prvwdetails.put("tech_address", rs.getString("tech_address"));
                            prvwdetails.put("tech_city", rs.getString("tech_city"));
                            prvwdetails.put("tech_state", rs.getString("tech_state"));
                            prvwdetails.put("tech_pin", rs.getString("tech_pin"));
                            prvwdetails.put("tech_ophone", rs.getString("tech_ophone"));
                            prvwdetails.put("tech_rphone", rs.getString("tech_rphone"));
                            prvwdetails.put("tech_mobile", rs.getString("tech_mobile"));
                            prvwdetails.put("tech_email", rs.getString("tech_email"));
                            prvwdetails.put("bowner_name", rs.getString("bowner_name"));
                            prvwdetails.put("bowner_desig", rs.getString("bowner_desig"));
                            prvwdetails.put("bowner_emp_code", rs.getString("bowner_emp_code"));
                            prvwdetails.put("bowner_address", rs.getString("bowner_address"));
                            prvwdetails.put("bowner_state", rs.getString("bowner_state"));
                            prvwdetails.put("bowner_city", rs.getString("bowner_city"));
                            prvwdetails.put("bowner_pin", rs.getString("bowner_pin"));
                            prvwdetails.put("bowner_ophone", rs.getString("bowner_ophone"));
                            prvwdetails.put("bowner_rphone", rs.getString("bowner_rphone"));
                            prvwdetails.put("bowner_mobile", rs.getString("bowner_mobile"));
                            prvwdetails.put("bowner_email", rs.getString("bowner_email"));
                            prvwdetails.put("audit", rs.getString("audit"));
                            prvwdetails.put("audit_date", rs.getString("audit_date"));
                            prvwdetails.put("staging_ip", rs.getString("staging_ip"));
                            prvwdetails.put("flag_sender", rs.getString("flag_sender"));
                            prvwdetails.put("sender_id", rs.getString("sender_id"));
                            prvwdetails.put("domestic_traffic", rs.getString("domestic_traffic"));
                            prvwdetails.put("inter_traffic", rs.getString("inter_traffic"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("final_id", rs.getString("final_id"));
                            prvwdetails.put("role", role);

//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("dns")) {
                    int campaignId = dnsservice.fetchCampaignId(refno);
                    if (campaignId != -1) {
                        String sql = "select * from dns_registration where registration_no=?";
                        pst = null;
                        String json = null;
                        Map<String, Object> prvwdetails = new HashMap<>();
                        try {
                            pst = conSlave.prepareStatement(sql);
                            pst.setString(1, refno);
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                            rs = pst.executeQuery();
                            while (rs.next()) {
                                prvwdetails.put("oldornew", "new");
                                prvwdetails.put("hod_name", rs.getString("hod_name"));
                                prvwdetails.put("hod_email", rs.getString("hod_email"));
                                // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                                //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                                isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                                if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                    String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                    String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                    String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                    prvwdetails.put("hod_mobile", hodMobile);

                                } else {
                                    prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                                }
                                prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                                prvwdetails.put("ca_design", rs.getString("ca_desig"));
                                prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                                prvwdetails.put("prvw_desig", rs.getString("designation"));
                                prvwdetails.put("prvw_address", rs.getString("address"));
                                prvwdetails.put("prvw_city", rs.getString("city"));
                                prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                                prvwdetails.put("prvw_pin", rs.getString("pin"));
                                prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                                prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                                prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                                prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                                prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                                prvwdetails.put("prvw_employment", rs.getString("employment"));
                                prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                                prvwdetails.put("prvw_department", rs.getString("department"));
                                prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                                prvwdetails.put("prvw_state", rs.getString("state"));
                                prvwdetails.put("prvw_org", rs.getString("organization"));
                                prvwdetails.put("dns_type", rs.getString("dns_type"));
                                prvwdetails.put("record_mx", rs.getString("record_mx"));
                                prvwdetails.put("record_ptr", rs.getString("record_ptr"));
                                prvwdetails.put("record_srv", rs.getString("record_srv"));
                                prvwdetails.put("record_spf", rs.getString("record_spf"));
                                prvwdetails.put("record_txt", rs.getString("record_txt"));
                                prvwdetails.put("record_dmarc", rs.getString("record_dmarc"));
                                prvwdetails.put("req_for", rs.getString("req_for"));
                                prvwdetails.put("form_type", rs.getString("form_type"));
                                prvwdetails.put("uploaded_filename", rs.getString("uploaded_filename"));
                                prvwdetails.put("renamed_filepath", rs.getString("renamed_filepath"));
                                prvwdetails.put("server_location", rs.getString("server_location"));
                                prvwdetails.put("record_ptr1", rs.getString("record_ptr1"));
                                prvwdetails.put("record_mx1", rs.getString("record_mx1"));
                                if (rs.getString("req_other_record") == null) {
                                    prvwdetails.put("record_other", "");
                                } else if (rs.getString("req_other_record") != null && rs.getString("req_other_record").isEmpty()) {
                                    prvwdetails.put("record_other", rs.getString("req_other_record"));
                                } else if (rs.getString("req_other_record") != null && !rs.getString("req_other_record").isEmpty()) {
                                    prvwdetails.put("record_other", rs.getString("req_other_record"));
                                }
                                prvwdetails.put("record_other", rs.getString("req_other_record"));
                                prvwdetails.put("validRecord", dnsservice.fetchSuccessBulkDataUsingReg(rs.getString("registration_no"), rs.getString("req_for"), prvwdetails.get("record_other").toString()));
                                prvwdetails.put("form_name", whichform);
                                prvwdetails.put("url", rs.getString("service_url"));
                                prvwdetails.put("role", role);
                                prvwdetails.put("migration_date", rs.getString("migration_date"));
                                session.put("request_type", rs.getString("form_type")); // line added by pr on 1stfeb18
                                session.put("req_for", rs.getString("req_for")); // line added by pr on 1stfeb18
                                session.put("uploaded_filename", rs.getString("uploaded_filename"));
                                session.put("renamed_filepath", rs.getString("renamed_filepath"));
//                                pst = null;
//                                String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                                pst = conSlave.prepareStatement(sql1);
//                                pst.setString(1, refno);
//                                rs1 = pst.executeQuery();
//                                while (rs1.next()) {
//                                    if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                        session.put("resend_request", "true");
//                                    } else {
//                                        session.put("resend_request", "false");
//                                    }
//                                    prvwdetails.put("stat_type", rs1.getString("stat_type"));
//                                }
                                session.put("resend_request", "false");
                                session.put("authMobile", rs.getString("mobile"));
                                session.put("prEmployment", rs.getString("employment"));
                                session.put("prMinistry", rs.getString("ministry"));
                                session.put("prDepartment", rs.getString("department"));
                                session.put("prState", rs.getString("state"));
                                session.put("prStateDepartment", rs.getString("department"));
                                session.put("prOrganization", rs.getString("organization"));

                                session.put("prvwdetails", prvwdetails);
                                session.put("profile_present", "true");
                            }
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                            json = new Gson().toJson(prvwdetails);
                            ServletActionContext.getResponse().setContentType("application/json");
                            ServletActionContext.getResponse().getWriter().write(json);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        String sql = "select * from dns_registration where registration_no=?";
                        pst = null;
                        String json = null;
                        Map<String, Object> prvwdetails = new HashMap<String, Object>();
                        try {
                            pst = conSlave.prepareStatement(sql);
                            pst.setString(1, refno);
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                            rs = pst.executeQuery();
                            while (rs.next()) {
                                prvwdetails.put("oldornew", "old");
                                prvwdetails.put("hod_name", rs.getString("hod_name"));
                                prvwdetails.put("hod_email", rs.getString("hod_email"));
                                //prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                                //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                                isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                                if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                    String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                    String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                    String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                    prvwdetails.put("hod_mobile", hodMobile);

                                } else {
                                    prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                                }
                                prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                                prvwdetails.put("ca_design", rs.getString("ca_desig"));
                                prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                                prvwdetails.put("prvw_desig", rs.getString("designation"));
                                prvwdetails.put("prvw_address", rs.getString("address"));
                                prvwdetails.put("prvw_city", rs.getString("city"));
                                prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                                prvwdetails.put("prvw_pin", rs.getString("pin"));
                                prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                                prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                                prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                                prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                                prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                                prvwdetails.put("prvw_employment", rs.getString("employment"));
                                prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                                prvwdetails.put("prvw_department", rs.getString("department"));
                                prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                                prvwdetails.put("prvw_state", rs.getString("state"));
                                prvwdetails.put("prvw_org", rs.getString("organization"));
                                prvwdetails.put("dns_type", rs.getString("dns_type"));
                                prvwdetails.put("record_mx", rs.getString("record_mx"));
                                prvwdetails.put("record_ptr", rs.getString("record_ptr"));
                                prvwdetails.put("record_srv", rs.getString("record_srv"));
                                prvwdetails.put("record_spf", rs.getString("record_spf"));
                                prvwdetails.put("record_txt", rs.getString("record_txt"));
                                prvwdetails.put("record_dmarc", rs.getString("record_dmarc"));
                                prvwdetails.put("req_for", rs.getString("req_for"));
                                prvwdetails.put("form_type", rs.getString("form_type"));
                                prvwdetails.put("uploaded_filename", rs.getString("uploaded_filename"));
                                prvwdetails.put("renamed_filepath", rs.getString("renamed_filepath"));
                                prvwdetails.put("server_location", rs.getString("server_location"));
                                prvwdetails.put("record_ptr1", rs.getString("record_ptr1"));
                                prvwdetails.put("record_mx1", rs.getString("record_mx1"));
                                prvwdetails.put("form_name", whichform);
                                prvwdetails.put("url", rs.getString("service_url"));
                                prvwdetails.put("role", role);
                                prvwdetails.put("migration_date", rs.getString("migration_date"));
                                session.put("request_type", rs.getString("form_type")); // line added by pr on 1stfeb18
                                session.put("req_for", rs.getString("req_for")); // line added by pr on 1stfeb18
                                session.put("uploaded_filename", rs.getString("uploaded_filename"));
                                session.put("renamed_filepath", rs.getString("renamed_filepath"));
                                pst = null;
                                String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
                                pst = conSlave.prepareStatement(sql1);
                                pst.setString(1, refno);
                                rs1 = pst.executeQuery();
                                while (rs1.next()) {
                                    if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
                                        session.put("resend_request", "true");
                                    } else {
                                        session.put("resend_request", "false");
                                    }
                                    prvwdetails.put("stat_type", rs1.getString("stat_type"));
                                }
                                session.put("authMobile", rs.getString("mobile"));

                                session.put("prvwdetails", prvwdetails);
                                session.put("profile_present", "true");
                            }
                            pst = conSlave.prepareStatement("select dns_url from dns_registration_url where registration_no=?");
                            pst.setString(1, refno);
                            rs1 = pst.executeQuery();
                            String url = "";
                            while (rs1.next()) {
                                url += rs1.getString("dns_url").concat(";");
                            }
                            String domain_url = url.replaceAll(";$", "");

                            if (session.get("req_for").equals("req_modify")) {
                                pst = conSlave.prepareStatement("select oldip from dns_registration_oldip where registration_no=?");
                                pst.setString(1, refno);
                                rs2 = pst.executeQuery();
                                String ip = "";
                                while (rs2.next()) {
                                    if (rs2.getString("oldip") != null && !rs2.getString("oldip").isEmpty() && !rs2.getString("oldip").equalsIgnoreCase("N/A")) {
                                        ip += rs2.getString("oldip").concat(";");
                                    }
                                }
                                if (ip.length() > 0) {
                                    String domain_old_ip = ip.replaceAll(";$", "");
                                    //String domain_old_ip = ip.substring(0, ip.length() - 1);
                                    prvwdetails.put("domain_old_ip", domain_old_ip);
                                } else {
                                    //System.out.println("inside else");
                                }
                            }
                            pst = conSlave.prepareStatement("select cname from dns_registration_cname where registration_no=?");
                            pst.setString(1, refno);
                            System.out.println(printlog + "pst of cname" + pst);
                            rs3 = pst.executeQuery();
                            String loc = "";
                            while (rs3.next()) {
                                if (rs3.getString("cname") != null && !rs3.getString("cname").isEmpty() && !rs3.getString("cname").equalsIgnoreCase("N/A")) {
                                    loc += rs3.getString("cname").concat(";");
                                }
                            }
                            String domain_cname = "";
                            String domain_new_ip = "";
                            if (loc.length() > 0) {
                                //domain_cname = loc.substring(0, loc.length() - 1);
                                domain_cname = loc.replaceAll(";$", "");
                            } else {
                                //System.out.println("inside else");
                            }
                            pst = conSlave.prepareStatement("select newip from dns_registration_newip where registration_no=?");
                            pst.setString(1, refno);
                            rs4 = pst.executeQuery();
                            String ip = "";
                            while (rs4.next()) {
                                if (rs4.getString("newip") != null && !rs4.getString("newip").isEmpty() && !rs4.getString("newip").equalsIgnoreCase("N/A")) {
                                    ip += rs4.getString("newip").concat(";");
                                }
                            }
                            if (ip.length() > 0) {
                                //domain_new_ip = ip.substring(0, ip.length() - 1);
                                domain_new_ip = ip.replaceAll(";$", "");
                            }
                            prvwdetails.put("domain_url", domain_url);
                            prvwdetails.put("domain_new_ip", domain_new_ip);
                            prvwdetails.put("domain_cname", domain_cname);
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                            json = new Gson().toJson(prvwdetails);
                            ServletActionContext.getResponse().setContentType("application/json");
                            ServletActionContext.getResponse().getWriter().write(json);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else if (whichform.equalsIgnoreCase("wifi")) {
                    String sql = "select * from wifi_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_wifitype", rs.getString("wifi_type"));
                            prvwdetails.put("prvw_wifimac1", rs.getString("wifi_mac1"));
                            prvwdetails.put("prvw_wifimac2", rs.getString("wifi_mac2"));
                            prvwdetails.put("prvw_wifimac3", rs.getString("wifi_mac3"));
                            prvwdetails.put("prvw_wifimac4", rs.getString("wifi_mac4"));
                            prvwdetails.put("prvw_wifios1", rs.getString("wifi_os1"));
                            prvwdetails.put("prvw_wifios2", rs.getString("wifi_os2"));
                            prvwdetails.put("prvw_wifios3", rs.getString("wifi_os3"));
                            prvwdetails.put("prvw_wifios4", rs.getString("wifi_os4"));
                            prvwdetails.put("prvw_device_type1", rs.getString("device_type1"));
                            prvwdetails.put("prvw_device_type2", rs.getString("device_type2"));
                            prvwdetails.put("prvw_device_type3", rs.getString("device_type3"));
                            prvwdetails.put("prvw_device_type4", rs.getString("device_type4"));

                            prvwdetails.put("prvw_wifirequest", rs.getString("wifi_request"));
                            prvwdetails.put("prvw_wifitime", rs.getString("wifi_time"));
                            prvwdetails.put("prvw_wifiduration", rs.getString("wifi_duration"));
                            prvwdetails.put("prvw_ofc_name", rs.getString("fwd_ofc_name"));
                            prvwdetails.put("prvw_ofc_email", rs.getString("fwd_ofc_email"));
                            prvwdetails.put("prvw_ofc_mobile", rs.getString("fwd_ofc_mobile"));
                            prvwdetails.put("prvw_ofc_tel", rs.getString("fwd_ofc_tel"));
                            prvwdetails.put("prvw_ofc_add", rs.getString("fwd_ofc_add"));
                            prvwdetails.put("prvw_ofc_desig", rs.getString("fwd_ofc_desig"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("wifi_process", rs.getString("wifi_process"));
                            prvwdetails.put("role", role);
                            prvwdetails.put("final_id", rs.getString("wifi_value"));// line added by pr on 19thdec19

                            // start, code added by pr on 2ndjan2020
                            String ldap_wifi_value = entities.LdapQuery.fetchwifivalue(rs.getString("auth_email"));

                            //System.out.println(" inside usertrack value getting func for wifi ldap value of attribute is "+ldap_wifi_value);
                            prvwdetails.put("ldap_wifi_value", ldap_wifi_value);// line added by pr on 19thdec19

                            // end, code added by pr on 2ndjan2020
//                        //payal agarwal
                            if (rs.getString("wifi_process").equalsIgnoreCase("req_delete")) {
                                String sql2 = "select * from wifi_mac_os where registration_no=?";
                                pst = conSlave.prepareStatement(sql2);
                                pst.setString(1, refno);
                                System.out.println(printlog + "wifi delete query:::::::::::::" + pst);
                                rs5 = pst.executeQuery();
                                while (rs5.next()) {
                                    FormBean formBean = new FormBean();
                                    formBean.setWifi_mac1(rs5.getString(2));
                                    formBean.setWifi_os1(rs5.getString(3));
                                    mac_os_List.add(formBean);

                                }
                                prvwdetails.put("mac_os_List", mac_os_List);

                            }

//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("wifi_type", rs.getString("wifi_type"));
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("singleuser")) {
                    String sql = "select * from single_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_dob", rs.getString("dob"));
                            prvwdetails.put("prvw_dor", rs.getString("dor"));
                            prvwdetails.put("prvw_idtype", rs.getString("id_type"));
                            prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                            prvwdetails.put("prvw_pemail2", rs.getString("preferred_email2"));
                            prvwdetails.put("prvw_emp_type", rs.getString("emp_type"));
                            prvwdetails.put("prvw_type", rs.getString("type"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                            prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                            prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                            prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                            prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
                            String mobile = rs.getString("mobile");
                            prvwdetails.put("prvw_applicant_dept", rs.getString("other_applicant_dept"));
                            prvwdetails.put("prvw_applicant_name", rs.getString("other_applicant_name"));
                            prvwdetails.put("prvw_applicant_email", rs.getString("other_applicant_email"));
                            prvwdetails.put("prvw_applicant_mobile", rs.getString("other_applicant_mobile"));
                            prvwdetails.put("prvw_applicant_state", rs.getString("other_applicant_state"));
                            prvwdetails.put("prvw_applicant_empcode", rs.getString("other_applicant_empcode"));
                            prvwdetails.put("prvw_applicant_desig", rs.getString("other_applicant_desig"));
                            prvwdetails.put("prvw_request_flag", rs.getString("request_flag"));

                            prvwdetails.put("role", role);
                            //String mobile = "+919958910444";
                            String check_mobile = entities.LdapQuery.CheckMobile(mobile);
                            if (check_mobile.equalsIgnoreCase("success")) {
                            } else if (check_mobile.equalsIgnoreCase("create")) {
                                prvwdetails.put("dup_error", "Already we have " + check_mobile + " Mail address registered against this mobile number");
                            } else if (check_mobile.equalsIgnoreCase("block")) {
                                prvwdetails.put("dup_error", "Already we have " + check_mobile + " Mail address registered against this mobile number");
                            } else {
                            }
                            prvwdetails.put("final_id", rs.getString("final_id"));
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if ((rs1.getString("stat_type").equals("ca_rejected")) || (rs1.getString("stat_type").equals("support_rejected")) || (rs1.getString("stat_type").equals("coordinator_rejected")) || (rs1.getString("stat_type").equals("mail-admin_rejected"))) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("ldap")) {
                    String sql = "select * from ldap_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_appname", rs.getString("app_name"));
                            prvwdetails.put("prvw_appurl", rs.getString("app_url"));
                            prvwdetails.put("prvw_domain", rs.getString("domain"));
                            prvwdetails.put("prvw_baseip", rs.getString("base_ip"));
                            prvwdetails.put("prvw_serviceip", rs.getString("service_ip"));
                            prvwdetails.put("prvw_server_loc", rs.getString("server_loc"));
                            prvwdetails.put("prvw_server_loc_other", rs.getString("server_loc_other"));
                            prvwdetails.put("prvw_https", rs.getString("https"));
                            prvwdetails.put("prvw_audit", rs.getString("audit"));
                            prvwdetails.put("prvw_ldap_id1", rs.getString("ldap_id1"));
                            prvwdetails.put("prvw_ldap_id2", rs.getString("ldap_id2"));
                            prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("imappop")) {
                    String sql = "select * from imappop_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("protocol", rs.getString("protocol"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("mobile")) {
                    String sql = "select * from mobile_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }

                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("country_code", rs.getString("country_code"));
                            prvwdetails.put("new_mobile", rs.getString("new_mobile"));
                            prvwdetails.put("remarks", rs.getString("remarks"));
                            prvwdetails.put("remarks_flag", rs.getString("remarks_flag"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
                            prvwdetails.put("nicDateOfBirth", rs.getString("nic_dateofbirth"));
                            prvwdetails.put("nicDateOfRetirement", rs.getString("nic_dateofretirement"));
                            prvwdetails.put("designation", rs.getString("nic_designation"));
                            prvwdetails.put("displayName", rs.getString("nic_displayname"));
                            //added by sanjeev 03-08-2022
                            String email = rs.getString("auth_email");   //email of uder whose data is going to be updated
                            Ldap ldap = new Ldap();
                            Map<String, Object> ldapValues = ldap.fetchAttrUpdateMobile(email);
                            String nicDateOfBirthOld = (String) ldapValues.get("nicDateOfBirth");
                            String nicDateOfRetirementOld = (String) ldapValues.get("nicDateOfRetirement");
                            String designationOld = (String) ldapValues.get("designation");
                            String mobileOld = ldap.fetchMobileFromLdap(email);
                            String displayNameOld = ldap.fetchNameFromLdap(email);
                            System.out.println("ldap Details-----::nicDateOfBirthOld:" + nicDateOfBirthOld + "  nicDateOfRetirementOld:" + nicDateOfRetirementOld + "   designationOld:" + designationOld + " mobileOld:" + mobileOld + "                            displayNameOld:" + displayNameOld);
                            prvwdetails.put("nicDateOfBirthOld", nicDateOfBirthOld);
                            prvwdetails.put("nicDateOfRetirementOld", nicDateOfRetirementOld);
                            prvwdetails.put("designationOld", designationOld);
                            prvwdetails.put("displayNameOld", displayNameOld);
                            prvwdetails.put("mobileOld", mobileOld);

//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }

                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else if (whichform.equalsIgnoreCase("profile")) {
                    String sql = "select * from mobile_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }

                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("country_code", rs.getString("country_code"));
                            prvwdetails.put("new_mobile", rs.getString("new_mobile"));
                            prvwdetails.put("remarks", rs.getString("remarks"));
                            prvwdetails.put("remarks_flag", rs.getString("remarks_flag"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
                            prvwdetails.put("nicDateOfBirth", rs.getString("nic_dateofbirth"));
                            prvwdetails.put("nicDateOfRetirement", rs.getString("nic_dateofretirement"));
                            prvwdetails.put("designation", rs.getString("nic_designation"));
                            prvwdetails.put("displayName", rs.getString("nic_displayname"));

//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }

                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else if (whichform.equalsIgnoreCase("gem")) {
                    String sql = "select * from gem_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_ofc_name", rs.getString("fwd_ofc_name"));
                            prvwdetails.put("prvw_ofc_email", rs.getString("fwd_ofc_email"));
                            prvwdetails.put("prvw_ofc_mobile", rs.getString("fwd_ofc_mobile"));
                            prvwdetails.put("prvw_ofc_tel", rs.getString("fwd_ofc_tel"));
                            prvwdetails.put("prvw_ofc_add", rs.getString("fwd_ofc_add"));
                            prvwdetails.put("prvw_ofc_desig", rs.getString("fwd_ofc_desig"));
                            prvwdetails.put("prvw_pse", rs.getString("pse"));
                            prvwdetails.put("prvw_pse_ministry", rs.getString("pse_ministry"));
                            prvwdetails.put("prvw_pse_state", rs.getString("pse_state"));
                            prvwdetails.put("prvw_pse_district", rs.getString("pse_district"));
                            prvwdetails.put("prvw_dob", rs.getString("dob"));
                            prvwdetails.put("prvw_dor", rs.getString("dor"));
                            prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                            prvwdetails.put("prvw_pemail2", rs.getString("preferred_email2"));
                            prvwdetails.put("prvw_traffic", rs.getString("traffic"));
                            prvwdetails.put("primary_user", rs.getString("primary_user"));
                            prvwdetails.put("primary_user_id", rs.getString("primary_user_id"));
                            prvwdetails.put("role_assign", rs.getString("role_assign"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("final_id", rs.getString("final_id"));
                            prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("dorext")) {
                    String sql = "select * from dor_ext_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
                            prvwdetails.put("dor_email", rs.getString("dor_email"));
                            prvwdetails.put("dor", rs.getString("dor"));
                            prvwdetails.put("pre_dor", rs.getString("pre_dor"));
                            prvwdetails.put("uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("renamed_filepath", rs.getString("renamed_filepath"));
                            prvwdetails.put("single_id_type", rs.getString("id_type"));
                            prvwdetails.put("single_emp_type", rs.getString("emp_type"));
                            prvwdetails.put("single_dob", rs.getString("dob"));

//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            if (rs.getString("uploaded_filename") != null) {
                                session.put("uploaded_filename", rs.getString("uploaded_filename"));
                                session.put("renamed_filepath", rs.getString("renamed_filepath"));
                            }
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("bulkuser")) {
                    String sql = "select * from bulk_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_type", rs.getString("type"));
                            prvwdetails.put("prvw_id_type", rs.getString("id_type"));
                            prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("prvw_renamed_filepath", rs.getString("renamed_filepath"));
                            prvwdetails.put("prvw_emp_type", rs.getString("emp_type"));
                            prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                            prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                            prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                            prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                            prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
                            prvwdetails.put("role", role);
                            // start, code added by pr on 12thjun18
                            String str = rs.getString("renamed_filepath");
                            String onlyName = str.replace(".csv", "");
                            onlyName = onlyName.trim();
                            prvwdetails.put("valid_filepath", onlyName + "-valid.csv");
                            prvwdetails.put("notvalid_filepath", onlyName + "-notvalid.csv");
                            prvwdetails.put("error_filepath", onlyName + "-error.csv");
                            session.put("valid_filepath", onlyName + "-valid.csv");
                            session.put("error_filepath", onlyName + "-error.csv");
                            session.put("notvalid_filepath", onlyName + "-notvalid.csv");
                            // end, code added by pr on 12thjun18
                            prvwdetails.put("form_name", whichform);
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));
                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("dlist")) {
                    String sql = "select * from distribution_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }

                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("list_name", rs.getString("list_name"));
                            prvwdetails.put("list_description", rs.getString("list_description"));
                            prvwdetails.put("list_mod", rs.getString("list_moderated"));
                            prvwdetails.put("allowed_member", rs.getString("allowed_member_mail"));
                            prvwdetails.put("non_nicnet", rs.getString("other_member_mail"));
                            prvwdetails.put("list_temp", rs.getString("list_temp"));
                            prvwdetails.put("validity_date", rs.getString("valid_date"));
                            prvwdetails.put("memberCount", rs.getString("member_count"));

                            // Set<String> h =   fetchModerator(refno);
                            pst = conSlave.prepareStatement("select id,name,email,mobile from dlist_moderator where registration_no= ? and form_type = 'moderator' ");
                            pst.setString(1, refno);
                            rs4 = pst.executeQuery();
                            List<Object> moderatorList = new ArrayList<>();

                            while (rs4.next()) {
                                Map<String, String> tmp = new HashMap<>();

                                tmp.put("id", rs4.getString("id"));
                                tmp.put("name", rs4.getString("name"));
                                tmp.put("email", rs4.getString("email"));
                                tmp.put("mobile", rs4.getString("mobile"));

                                moderatorList.add(tmp);
                            }
                            prvwdetails.put("moderator", moderatorList);

                            pst = conSlave.prepareStatement("select id, name,email,mobile from dlist_moderator where registration_no = ? and  form_type = 'owner'");
                            pst.setString(1, refno);
                            rs4 = pst.executeQuery();

                            List<Object> ownerList = new ArrayList<>();

                            while (rs4.next()) {
                                Map<String, String> tmp = new HashMap<>();

                                tmp.put("id", rs4.getString("id"));
                                tmp.put("name", rs4.getString("name"));
                                tmp.put("email", rs4.getString("email"));
                                tmp.put("mobile", rs4.getString("mobile"));

                                ownerList.add(tmp);
                            }
                            prvwdetails.put("owner", ownerList);
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("nkn")) {
                    String sql = "select * from nkn_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_request_type", rs.getString("request_type"));
                            prvwdetails.put("prvw_inst_name", rs.getString("inst_name"));
                            prvwdetails.put("prvw_inst_id", rs.getString("inst_id"));
                            prvwdetails.put("prvw_nkn_project", rs.getString("nkn_project"));
                            prvwdetails.put("prvw_dob", rs.getString("dob"));
                            prvwdetails.put("prvw_dor", rs.getString("dor"));
                            prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                            prvwdetails.put("prvw_pemail2", rs.getString("preferred_email2"));
                            prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("prvw_renamed_filepath", rs.getString("renamed_filepath"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                            prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                            prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                            prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                            prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
                            prvwdetails.put("final_id", rs.getString("final_id"));
                            prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                            session.put("request_type", rs.getString("request_type")); // line added by pr on 1stfeb18
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("bulkdlist")) {
                    String sql = "select * from bulk_distribution_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }

                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("list_name", rs.getString("list_name"));
                            prvwdetails.put("list_description", rs.getString("list_description"));
                            prvwdetails.put("list_mod", rs.getString("list_moderated"));
                            prvwdetails.put("allowed_member", rs.getString("allowed_member_mail"));
                            prvwdetails.put("non_nicnet", rs.getString("other_member_mail"));
                            prvwdetails.put("list_temp", rs.getString("list_temp"));
                            prvwdetails.put("validity_date", rs.getString("valid_date"));

                            //===============
                            pst = conSlave.prepareStatement("select id,name,email,mobile from dlist_moderator where registration_no= ? and form_type = 'moderator' ");
                            pst.setString(1, refno);
                            rs4 = pst.executeQuery();
                            List<Object> moderatorList = new ArrayList<>();

                            while (rs4.next()) {
                                Map<String, String> tmp = new HashMap<>();

                                tmp.put("id", rs4.getString("id"));
                                tmp.put("name", rs4.getString("name"));
                                tmp.put("email", rs4.getString("email"));
                                tmp.put("mobile", rs4.getString("mobile"));

                                moderatorList.add(tmp);
                            }
                            prvwdetails.put("moderator", moderatorList);
                            // Excel file details 

                            pst = conSlave.prepareStatement("select id,list_name,description_list,list_mod,allowed_member,list_temp,mail_Acceptance,owner_Name,Owner_Email,owner_Mobile,moderator_Name,moderator_Email,moderator_Mobile,owner_Admin,moderator_Admin  from dlist_bulk where registration_no= ? ");
                            pst.setString(1, refno);
                            rs4 = pst.executeQuery();
                            List<Object> ExcelFileDetails = new ArrayList<>();

                            while (rs4.next()) {
                                Map<String, String> tmp = new HashMap<>();

                                tmp.put("id", rs4.getString("id"));
                                tmp.put("list_name", rs4.getString("list_name"));
                                tmp.put("description_list", rs4.getString("description_list"));
                                tmp.put("list_mod", rs4.getString("list_mod"));
                                tmp.put("allowed_member", rs4.getString("allowed_member"));
                                tmp.put("list_temp", rs4.getString("list_temp"));
                                tmp.put("mail_Acceptance", rs4.getString("mail_Acceptance"));
                                tmp.put("owner_Name", rs4.getString("owner_Name"));
                                tmp.put("Owner_Email", rs4.getString("Owner_Email"));
                                tmp.put("owner_Mobile", rs4.getString("owner_Mobile"));
                                tmp.put("moderator_Name", rs4.getString("moderator_Name"));

                                tmp.put("moderator_Email", rs4.getString("moderator_Email"));
                                tmp.put("moderator_Mobile", rs4.getString("moderator_Mobile"));
                                tmp.put("owner_Admin", rs4.getString("owner_Admin"));
                                tmp.put("moderator_Admin", rs4.getString("moderator_Admin"));

                                ExcelFileDetails.add(tmp);
                            }
                            prvwdetails.put("Excelfile", ExcelFileDetails);

                            pst = conSlave.prepareStatement("select id, name,email,mobile from dlist_moderator where registration_no = ? and  form_type = 'owner'");
                            pst.setString(1, refno);
                            rs4 = pst.executeQuery();

                            List<Object> ownerList = new ArrayList<>();

                            while (rs4.next()) {
                                Map<String, String> tmp = new HashMap<>();

                                tmp.put("id", rs4.getString("id"));
                                tmp.put("name", rs4.getString("name"));
                                tmp.put("email", rs4.getString("email"));
                                tmp.put("mobile", rs4.getString("mobile"));

                                ownerList.add(tmp);
                            }
                            prvwdetails.put("owner", ownerList);
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
                            // prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));    // june 2021
                            // prvwdetails.put("prvw_renamed_filepath", rs.getString("renamed_filepath"));
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("relay")) {
                    String sql = "select * from relay_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("app_ip", rs.getString("app_ip"));
                            prvwdetails.put("old_app_ip", rs.getString("relay_old_ip"));
                            prvwdetails.put("app_name", rs.getString("app_name"));
                            prvwdetails.put("division_name", rs.getString("division_name"));
                            prvwdetails.put("os", rs.getString("os"));
                            prvwdetails.put("server_loc", rs.getString("server_loc"));
                            prvwdetails.put("server_loc_other", rs.getString("server_loc_other"));
                            prvwdetails.put("uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("renamed_filepath", rs.getString("renamed_filepath"));

                            prvwdetails.put("staging_ip", rs.getString("staging_ip"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
                            prvwdetails.put("relay_app_url", rs.getString("relay_app_url"));
                            prvwdetails.put("relay_sender_id", rs.getString("relay_sender_id"));
                            prvwdetails.put("domain_mx", rs.getString("domain_mx"));
                            prvwdetails.put("spf", rs.getString("spf"));
                            prvwdetails.put("dkim", rs.getString("dkim"));
                            prvwdetails.put("dmarc", rs.getString("dmarc"));
                            prvwdetails.put("smtp_port", rs.getString("port"));
                            prvwdetails.put("relay_auth_id", rs.getString("relay_auth_id"));
                            prvwdetails.put("req_type", rs.getString("req_type"));
                            prvwdetails.put("relay_old_ip", rs.getString("relay_old_ip"));
                            prvwdetails.put("relay_mailsent", rs.getString("relay_mailsent"));
                            prvwdetails.put("point_name", rs.getString("point_name"));
                            prvwdetails.put("point_email", rs.getString("point_email"));
                            prvwdetails.put("mobile_number", rs.getString("point_mobile_number"));
                            prvwdetails.put("landline_number", rs.getString("landline_number"));
                            prvwdetails.put("security_audit", rs.getString("security_audit"));
                            prvwdetails.put("security_exp_date", rs.getString("security_exp_date"));
                            prvwdetails.put("other_mail_type", rs.getString("other_mail_type"));
                            prvwdetails.put("point_contact", rs.getString("point_contact"));
                            prvwdetails.put("is_hosted", rs.getString("is_hosted_nic"));
                            prvwdetails.put("mail_type", rs.getString("mail_type"));
                            prvwdetails.put("hardware_uploaded_filename", rs.getString("hardware_filename"));

//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));
                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            session.put("relay_ip", rs.getString("app_ip"));// line added by pr on 1stfeb18
                            if (rs.getString("hardware_filename") != null) {
                                session.put("hardware_uploaded_filename", rs.getString("hardware_filename"));
                                session.put("hardware_renamed_filepath", rs.getString("renamed_hardware_filepath"));
                            } else {
                                session.put("hardware_uploaded_filename", "");
                                session.put("hardware_renamed_filepath", "");
                            }

                            if (rs.getString("uploaded_filename") != null) {
                                session.put("uploaded_filename", rs.getString("uploaded_filename"));
                                session.put("renamed_filepath", rs.getString("renamed_filepath"));
                            } else {
                                session.put("uploaded_filename", "");
                                session.put("renamed_filepath", "");
                            }

                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("ip")) {
                    String sql = "select * from ip_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("req_for", rs.getString("ip_action_request"));
                            prvwdetails.put("account_name", rs.getString("account_name"));
                            prvwdetails.put("add_ip1", rs.getString("ip1"));
                            prvwdetails.put("add_ip2", rs.getString("ip2"));
                            prvwdetails.put("add_ip3", rs.getString("ip3"));
                            prvwdetails.put("add_ip4", rs.getString("ip4"));
                            prvwdetails.put("ip_type", rs.getString("ip_change_request"));
                            prvwdetails.put("app_name", rs.getString("app_name"));
                            prvwdetails.put("app_ip", rs.getString("app_ip"));
                            prvwdetails.put("server_loc", rs.getString("server_loc"));
                            prvwdetails.put("server_loc_other", rs.getString("server_loc_other"));
                            prvwdetails.put("ldap_url", rs.getString("ldap_url"));
                            prvwdetails.put("ldap_auth_allocate", rs.getString("ldap_auth_allocate"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            session.put("ip_type", rs.getString("ip_change_request"));
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.contains("VPN")) {
                    String sql = "select * from vpn_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();

                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));

                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);
                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_remarks", rs.getString("remarks"));
                            prvwdetails.put("prvw_vpncoord", rs.getString("coordinator_email"));
                            prvwdetails.put("user_type", rs.getString("user_type"));
                            prvwdetails.put("role", role);

                            if (rs.getString("user_type").equals("change_add") || rs.getString("user_type").equals("vpn_single")) {
                                String sql1 = "select * from vpn_entries where registration_no=?";
                                PreparedStatement pst1 = conSlave.prepareStatement(sql1);
                                pst1.setString(1, refno);
                                rs1 = pst1.executeQuery();
                                Map vpn_data = new LinkedHashMap();
                                int i = 0;

                                while (rs1.next()) {
                                    Map vpn_div_data = new LinkedHashMap();
                                    vpn_div_data.put("regno", rs1.getString("registration_no"));
                                    vpn_div_data.put("id", rs1.getString("id"));
                                    vpn_div_data.put("ip_type", rs1.getString("ip_type"));
                                    vpn_div_data.put("ip1", rs1.getString("ip1"));
                                    vpn_div_data.put("ip2", rs1.getString("ip2"));
                                    if (rs1.getString("ip_type").equals("single")) {
                                        vpn_div_data.put("ip", rs1.getString("ip1"));
                                    } else {
                                        vpn_div_data.put("ip", rs1.getString("ip1") + " - " + rs1.getString("ip2"));
                                    }
                                    vpn_div_data.put("app_url", rs1.getString("app_url"));
                                    vpn_div_data.put("dest_port", rs1.getString("dest_port"));
                                    vpn_div_data.put("server_loc", rs1.getString("server_location"));
                                    vpn_div_data.put("server_loc_txt", rs1.getString("server_loc_other"));
                                    if (rs1.getString("server_location").equalsIgnoreCase("other")) {
                                        vpn_div_data.put("server", rs1.getString("server_loc_other"));
                                    } else {
                                        vpn_div_data.put("server", rs1.getString("server_location"));
                                    }
                                    vpn_div_data.put("action_type", rs1.getString("action_type"));
                                    vpn_div_data.put("deleted_flag", rs1.getString("deleted_flag"));
                                    vpn_div_data.put("deleted_by", rs1.getString("deleted_by"));
                                    vpn_data.put("div_" + i, vpn_div_data);
                                    i++;
                                }

                                rs1.close();
                                pst1.close();
                                prvwdetails.put("vpn_data_all", vpn_data);
                            }

                            if (rs.getString("user_type").equals("vpn_delete")) {
                                ResultSet rs_delete = null;
                                pst = null;
                                String delete_query = "select server_ip,location,port,service,vpn_reg from vpn_registration_delete where registration_no=?";
                                pst = conSlave.prepareStatement(delete_query);
                                pst.setString(1, refno);
                                rs_delete = pst.executeQuery();
                                Map vpn_data = new LinkedHashMap();
                                int i = 0;
                                while (rs_delete.next()) {
                                    Map vpn_div_delete_data = new LinkedHashMap();
                                    vpn_div_delete_data.put("server_ip", rs_delete.getString("server_ip"));
                                    vpn_div_delete_data.put("service", rs_delete.getString("service"));
                                    vpn_div_delete_data.put("port", rs_delete.getString("port"));
                                    vpn_div_delete_data.put("location", rs_delete.getString("location"));
                                    //vpn_div_delete_data.put("vpn_reg", rs_delete.getString("vpn_reg"));	
                                    vpn_data.put("div_" + i, vpn_div_delete_data);
                                    i++;
                                }
                                rs_delete.close();
                                prvwdetails.put("vpn_data_all", vpn_data);
                            }

                            prvwdetails.put("vpn_reg_no", rs.getString("vpn_reg_no"));
                            prvwdetails.put("form_name", whichform);
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_reject") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            if (prvwdetails.get("user_type").equals("vpn_renew") || prvwdetails.get("user_type").equals("change_add") || prvwdetails.get("user_type").equals("vpn_surrender") || prvwdetails.get("user_type").equals("vpn_delete")) {

                                // hit api
                                Vpn_registration reg_obj = new Vpn_registration();
                                // String all_aliases = userdata.getAliasesInString().replaceAll("'", "\"");
                                // System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + userdata.getAliasesInString().replaceAll("'", "\""));

                                /**
                                 * ***********************************************
                                 */
                                ArrayList aliases = entities.LdapQuery.GetMailEqui(prvwdetails.get("prvw_authemail").toString());
                                int sizeOfAliases = aliases.size();
                                String commaSeparatedAliases = "";

                                if (sizeOfAliases > 1) {
                                    for (Object email : aliases) {
                                        commaSeparatedAliases += "\"" + email + "\",";
                                    }
                                    commaSeparatedAliases = commaSeparatedAliases.replaceAll(",$", "");

                                } else if (sizeOfAliases == 1) {
                                    commaSeparatedAliases = "\"" + aliases.iterator().next() + "\"";
                                } else if (sizeOfAliases == 0) {
                                    commaSeparatedAliases = "\"" + prvwdetails.get("prvw_authemail").toString() + "\"";
                                }

                                /**
                                 * ***********************************************
                                 */
                                String api_resp = reg_obj.post_api2(prvwdetails.get("vpn_reg_no").toString().trim(), prvwdetails.get("prvw_authemail").toString(), prvwdetails.get("prvw_mobile").toString(), commaSeparatedAliases);
                                System.out.println(printlog + "VPN Response :%%%%%%%:::" + api_resp);
                                JSONObject json2 = new JSONObject(api_resp);
                                JSONArray access = json2.getJSONArray("access_details");

                                String api_out = "<span style=' color: red; font-weight: bold; '>VPN Registration Number: " + prvwdetails.get("vpn_reg_no").toString().trim() + "</span><br/><br/><table class='table table-striped table-hover'><th>Server IP</th><th>Server Location</th><th>Destination Port</th><th>Application URL<th></th>";
                                for (int i = 0; i < access.length(); i++) {
                                    JSONObject detail = access.getJSONObject(i);
                                    String serip = detail.getString("serip");

                                    String serloc = "";
                                    try {
                                        serloc = detail.getString("serloc");
                                    } catch (Exception e) {
                                        System.out.println(printlog + "Error parsing json response serloc:::" + e);
                                    }

                                    String destport = "";
                                    try {

                                        destport = detail.getString("destport");
                                    } catch (Exception e) {
                                        System.out.println(printlog + "Error parsing json response destport:::" + e);
                                    }
                                    String desc_service = "";

                                    try {
                                        desc_service = detail.getString("desc_service");
                                    } catch (Exception e) {
                                        System.out.println(printlog + "Error parsing json response desc_service:::" + e);
                                    }
                                    System.out.println(printlog + serip + ":" + serloc + ":" + destport + ":" + desc_service);
                                    api_out += "<tr><td>" + serip + "</td><td>" + serloc + "</td><td>" + destport + "</td><td>" + desc_service + "</td></tr>";

                                }
                                api_out += "</table>";
                                prvwdetails.put("vpn_api_output", api_out);

                            }
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");

                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);

                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("webcast")) {
                    String sql = "select * from webcast_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();

                    try {

                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();

                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("fwd_ofc_name", rs.getString("fwd_ofc_name"));
                            prvwdetails.put("fwd_ofc_email", rs.getString("fwd_ofc_email"));
                            prvwdetails.put("fwd_ofc_mobile", rs.getString("fwd_ofc_mobile"));
                            prvwdetails.put("fwd_ofc_tel", rs.getString("fwd_ofc_tel"));
                            prvwdetails.put("fwd_ofc_add", rs.getString("fwd_ofc_add"));
                            prvwdetails.put("fwd_ofc_design", rs.getString("fwd_ofc_desig"));
                            prvwdetails.put("req_for", rs.getString("request_type"));
                            prvwdetails.put("role", role);
                            if (rs.getString("request_type").equals("live")) {
                                prvwdetails.put("event_coo_name", rs.getString("event_coo_name"));
                                prvwdetails.put("event_coo_email", rs.getString("event_coo_email"));
                                prvwdetails.put("event_coo_design", rs.getString("event_coo_design"));
                                prvwdetails.put("event_coo_mobile", rs.getString("event_coo_mobile"));
                                prvwdetails.put("event_coo_address", rs.getString("event_coo_address"));
                                prvwdetails.put("event_name_eng", rs.getString("event_name_eng"));
                                prvwdetails.put("event_name_hin", rs.getString("event_name_hindi"));
                                prvwdetails.put("event_start", rs.getString("event_start"));
                                prvwdetails.put("event_end", rs.getString("event_end"));
                                prvwdetails.put("event_type", rs.getString("event_type"));
                                prvwdetails.put("telecast", rs.getString("event_telecast"));
                                if (rs.getString("event_telecast").equals("yes")) {
                                    prvwdetails.put("channel_name", rs.getString("channel_name"));
                                } else {
                                    prvwdetails.put("live_feed", rs.getString("live_feed"));
                                    if (rs.getString("live_feed").equalsIgnoreCase("Through VC")) {
                                        prvwdetails.put("vc_id", rs.getString("vc_id"));
                                    }
                                }
                                prvwdetails.put("conf_radio", rs.getString("conf_radio"));
                                prvwdetails.put("conf_name", rs.getString("conf_name"));
                                prvwdetails.put("conf_type", rs.getString("conf_type"));
                                prvwdetails.put("conf_city", rs.getString("conf_city"));
                                prvwdetails.put("conf_schedule", rs.getString("conf_schedule"));
                                prvwdetails.put("conf_session", rs.getString("conf_session"));
                                prvwdetails.put("conf_bw", rs.getString("conf_bw"));
                                prvwdetails.put("conf_provider", rs.getString("conf_provider"));
                                prvwdetails.put("conf_event_hired", rs.getString("conf_event_hired"));
                                prvwdetails.put("conf_flash", rs.getString("conf_flash"));
                                if (rs.getString("conf_flash").equals("no")) {
                                    prvwdetails.put("local_setup", rs.getString("local_setup"));
                                }
                                prvwdetails.put("conf_video", rs.getString("conf_video"));
                                if (rs.getString("conf_video").equals("yes")) {
                                    prvwdetails.put("conf_contact", rs.getString("conf_contact"));
                                }
                                prvwdetails.put("hall_type", rs.getString("hall_type"));
                                prvwdetails.put("hall_number", rs.getString("hall_number"));
                                Map webcast_file = new HashMap();
                                PreparedStatement p = conSlave.prepareStatement("select * from webcast_uploaded_files where registration_no=?");
                                p.setString(1, refno);
                                ResultSet r = p.executeQuery();
                                while (r.next()) {
                                    webcast_file.put(r.getString("filename"), r.getString("path"));
                                }
                                if (!webcast_file.isEmpty()) {
                                    prvwdetails.put("webcast_uploaded_files", webcast_file);
                                }
                            } else if (rs.getString("request_type").equals("demand")) {
                                prvwdetails.put("event_size", rs.getString("event_size"));
                                prvwdetails.put("event_no", rs.getString("event_no"));
                                prvwdetails.put("media_format", rs.getString("media_format"));
                            }
                            prvwdetails.put("payment", rs.getString("payment"));
                            if (rs.getString("payment").equals("yes")) {
                                prvwdetails.put("cheque_no", rs.getString("cheque_no"));
                                prvwdetails.put("cheque_amount", rs.getString("cheque_amount"));
                                prvwdetails.put("cheque_date", rs.getString("cheque_date"));
                                prvwdetails.put("bank_name", rs.getString("bank_name"));
                            }
                            prvwdetails.put("remarks", rs.getString("remarks"));

//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_reject") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");

                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);

                        ServletActionContext.getResponse().setContentType("application/json;charset=UTF-8");
                        ServletActionContext.getResponse().getWriter().write(json);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("EMAILACTIVATE")) {
                    String table = "email_act_registration";
                    String sql = "select * from " + table + " where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            //prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                            prvwdetails.put("prvw_emp_type", rs.getString("emp_type"));
                            if (action != null) {
                                if (session.get("uploaded_filename") != null) {
                                    String uploaded_filename = session.get("uploaded_filename").toString();
                                    //String renamed_filepath = session.get("renamed_filepath").toString();
                                    prvwdetails.put("prvw_file_name", uploaded_filename);
                                }

                            } else {
                                prvwdetails.put("prvw_file_name", rs.getString("work_order"));
                            }
                            prvwdetails.put("prvw_dor", rs.getString("dor"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                            prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                            prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                            prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                            prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                System.out.println("inside single result.next" + rs1.getString("stat_type"));
//                                if ((rs1.getString("stat_type").equals("ca_rejected")) || (rs1.getString("stat_type").equals("support_rejected")) || (rs1.getString("stat_type").equals("coordinator_rejected")) || (rs1.getString("stat_type").equals("mail-admin_rejected"))) {
//                                    System.out.println("inside single condition match");
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("authMobile", rs.getString("mobile"));
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase("EMAILDEACTIVATE")) {

                    String table = "email_deact_registration";
                    String sql = "select * from " + table + " where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                            prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                            prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                            prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                            prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                System.out.println("inside single result.next" + rs1.getString("stat_type"));
//                                if ((rs1.getString("stat_type").equals("ca_rejected")) || (rs1.getString("stat_type").equals("support_rejected")) || (rs1.getString("stat_type").equals("coordinator_rejected")) || (rs1.getString("stat_type").equals("mail-admin_rejected"))) {
//                                    System.out.println("inside single condition match");
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("authMobile", rs.getString("mobile"));
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (this.whichform.equalsIgnoreCase("wifiport")) {
                    System.out.println("inside wifiport");
                    String sql = "select * from wifiport_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            //prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_purpose", rs.getString("purpose"));
                            pst = conSlave.prepareStatement("select sourceIP,destinationIP,service,ports,action,timeperiod from wifiport_entries where registration_no=?");
                            pst.setString(1, refno);
                            rs4 = pst.executeQuery();
                            String sourceIP = "";
                            String destinationIP = "";
                            String service = "";
                            String ports = "";
                            String action = "";
                            String timeperiod = "";
                            while (rs4.next()) {
                                sourceIP = sourceIP + rs4.getString("sourceIP").concat(";");
                                destinationIP = destinationIP + rs4.getString("destinationIP").concat(";");
                                service = service + rs4.getString("service").concat(";");
                                ports = ports + rs4.getString("ports").concat(";");
                                action = action + rs4.getString("action").concat(";");
                                timeperiod = timeperiod + rs4.getString("timeperiod").concat(";");
                            }
                            if (sourceIP.length() > 0) {
                                sourceIP = sourceIP.substring(0, sourceIP.length() - 1);
                                destinationIP = destinationIP.substring(0, destinationIP.length() - 1);
                                service = service.substring(0, service.length() - 1);
                                ports = ports.substring(0, ports.length() - 1);
                                action = action.substring(0, action.length() - 1);
                                timeperiod = timeperiod.substring(0, timeperiod.length() - 1);
                                pst.close();
                                rs4.close();
                            }
                            prvwdetails.put("sourceIP", sourceIP);
                            prvwdetails.put("destinationIP", destinationIP);
                            prvwdetails.put("service", service);
                            prvwdetails.put("ports", ports);
                            prvwdetails.put("action", action);
                            prvwdetails.put("timeperiod", timeperiod);
                            pst = null;
                            String sql1 = "select * from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
                            pst = conSlave.prepareStatement(sql1);
                            pst.setString(1, refno);
                            rs1 = pst.executeQuery();
                            while (rs1.next()) {
                                session.put("prvwdetails", prvwdetails);
                                session.put("profile_present", "true");
                            }
                            json = (new Gson()).toJson(prvwdetails);

                            System.out.println("prvwdetails for wifiport:::::::::::::::::::" + prvwdetails);
                            ServletActionContext.getResponse().setContentType("application/json");
                            ServletActionContext.getResponse().getWriter().write(json);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else if (this.whichform.equalsIgnoreCase("centralutm")) {
                    System.out.println("inside central utm");
                    String sql = "select * from centralutm_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            //prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_purpose", rs.getString("purpose"));
                            pst = conSlave.prepareStatement("select sourceIP,destinationIP,service,ports,action,timeperiod from firewall_entries where registration_no=?");
                            pst.setString(1, refno);
                            rs4 = pst.executeQuery();
                            String sourceIP = "";
                            String destinationIP = "";
                            String service = "";
                            String ports = "";
                            String action = "";
                            String timeperiod = "";
                            while (rs4.next()) {
                                sourceIP = sourceIP + rs4.getString("sourceIP").concat(";");
                                destinationIP = destinationIP + rs4.getString("destinationIP").concat(";");
                                service = service + rs4.getString("service").concat(";");
                                ports = ports + rs4.getString("ports").concat(";");
                                action = action + rs4.getString("action").concat(";");
                                timeperiod = timeperiod + rs4.getString("timeperiod").concat(";");
                            }
                            if (sourceIP.length() > 0) {
                                sourceIP = sourceIP.substring(0, sourceIP.length() - 1);
                                destinationIP = destinationIP.substring(0, destinationIP.length() - 1);
                                service = service.substring(0, service.length() - 1);
                                ports = ports.substring(0, ports.length() - 1);
                                action = action.substring(0, action.length() - 1);
                                timeperiod = timeperiod.substring(0, timeperiod.length() - 1);
                                pst.close();
                                rs4.close();
                            }
                            prvwdetails.put("sourceIP", sourceIP);
                            prvwdetails.put("destinationIP", destinationIP);
                            prvwdetails.put("service", service);
                            prvwdetails.put("ports", ports);
                            prvwdetails.put("action", action);
                            prvwdetails.put("timeperiod", timeperiod);
                            pst = null;
                            String sql1 = "select * from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
                            pst = conSlave.prepareStatement(sql1);
                            pst.setString(1, refno);
                            rs1 = pst.executeQuery();
                            while (rs1.next()) {
                                session.put("prvwdetails", prvwdetails);
                                session.put("profile_present", "true");
                            }
                            json = (new Gson()).toJson(prvwdetails);

                            System.out.println("prvwdetails for central utm:::::::::::::::::::" + prvwdetails);
                            ServletActionContext.getResponse().setContentType("application/json");
                            ServletActionContext.getResponse().getWriter().write(json);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else if (whichform.equalsIgnoreCase("daonboarding")) {
                    String sql = "select * from daonboarding_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));

                            prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("prvw_vpn_reg_no", rs.getString("vpn_reg_no"));
                            prvwdetails.put("prvw_bo_name", rs.getString("bo_name"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("role", role);
                            prvwdetails.put("daon_mobile", rs.getString("check_box"));
                            prvwdetails.put("eligibility", rs.getString("eligibility"));
//                            pst = null;
//                            String sql1 = "select stat_type from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("stat_type").equals("ca_rejected") || rs1.getString("stat_type").equals("support_rejected") || rs1.getString("stat_type").equals("coordinator_rejected") || rs1.getString("stat_type").equals("mail-admin_rejected")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserTrack.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(UserTrack.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs2 != null) {
                try {
                    rs2.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs3 != null) {
                try {
                    rs3.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs4 != null) {
                try {
                    rs4.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void PreviewRequest() throws ParseException {

        String SessionCSRFRandom = session.get("CSRFRandom").toString();

        if (!CSRFRandom.equals(SessionCSRFRandom)) {
            hmTrack.put("csrf_error", "CSRF Token is invalid.");
            return;
        }
        //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + "im in Details of PreviewRequest USer REgistration number  :" + getData());
        String refno = getData().trim();
        ResultSet rs = null, rs1 = null, rs2 = null, rs3 = null, rs4 = null, rs5 = null;
        //Connection con = null;
        PreparedStatement pst = null;
        setData(refno);
        session.put("ref", refno);
        String sessionKey = refno + ":editable";
        session.put("sessionKey", sessionKey);
        System.out.println("111111111111111111        " + session.get("sessionKey") + "     Key       " + sessionKey);

        Map<String, Object> prvwdetails = new HashMap<String, Object>();
        List<String> allowedRegNumbers = (List<String>) session.get("regNumberAllowed");
        if (!allowedRegNumbers.contains(refno)) {
            prvwdetails.put("error", "You are not authorized to view the request");
            String json = new Gson().toJson(prvwdetails);
            ServletActionContext.getResponse().setContentType("application/json");
            try {
                ServletActionContext.getResponse().getWriter().write(json);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            return;
        }

        boolean isEditable = false;  // due to ":editable"
        String role = "";
        UserData userdata = (UserData) session.get("uservalues");
        boolean isHodLdapEmployee = false;

        if (comingFrom.equals("user")) {
            isEditable = isRequestEditable(refno, userdata.getEmail(), "user", "toPreview", userdata.getAliases());
            role = "user";
        } else if (comingFrom.equals("admin")) {
            role = (String) session.get("admin_role");
            isEditable = isRequestEditable(refno, userdata.getEmail(), role, "toPreview", userdata.getAliases());
        }
        //added for hog preview
//        if (flag != null) {
//            if (flag.equalsIgnoreCase("hog")) {
//                isEditable = true;
//            }
//        }
        //EO added for hog preview

        System.out.println(printlog + "isEDITABLE ::::::::::::: " + isEditable);

        try {

            if (isEditable) {
                prvwdetails.put("isEditable", true);
            } else {
                prvwdetails.put("isEditable", false);
            }
            System.out.println(printlog + "Inside If block PreviewRequest userTrack " + whichform);
            //con = getConnection();
            conSlave = DbConnection.getSlaveConnection();
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + " Whichform in preview function: " + whichform);
            if (whichform.equalsIgnoreCase("sms")) {
                String sql = "select * from sms_registration where registration_no=?";
                pst = null;
                String json = null;

                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    //prvwdetails.put("isEditable", true);
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("sms_service", rs.getString("sms_service"));
                        prvwdetails.put("pull_url", rs.getString("pull_url"));
                        prvwdetails.put("pull_keyword", rs.getString("pull_keyword"));
                        prvwdetails.put("short_flag", rs.getString("short_flag"));
                        prvwdetails.put("short_note", rs.getString("short_note"));
                        prvwdetails.put("app_name", rs.getString("app_name"));
                        prvwdetails.put("app_url", rs.getString("app_url"));
                        prvwdetails.put("sms_usage", rs.getString("sms_usage"));
                        prvwdetails.put("server_loc", rs.getString("server_loc"));
                        prvwdetails.put("server_loc_other", rs.getString("server_loc_other"));
                        prvwdetails.put("base_ip", rs.getString("base_ip"));
                        prvwdetails.put("service_ip", rs.getString("service_ip"));
                        prvwdetails.put("tech_name", rs.getString("tech_name"));
                        prvwdetails.put("tech_desig", rs.getString("tech_desig"));
                        prvwdetails.put("tech_emp_code", rs.getString("tech_emp_code"));
                        prvwdetails.put("tech_address", rs.getString("tech_address"));
                        prvwdetails.put("tech_city", rs.getString("tech_city"));
                        prvwdetails.put("tech_state", rs.getString("tech_state"));
                        prvwdetails.put("tech_pin", rs.getString("tech_pin"));
                        prvwdetails.put("tech_ophone", rs.getString("tech_ophone"));
                        prvwdetails.put("tech_rphone", rs.getString("tech_rphone"));
                        prvwdetails.put("tech_mobile", rs.getString("tech_mobile"));
                        prvwdetails.put("tech_email", rs.getString("tech_email"));
                        prvwdetails.put("bowner_name", rs.getString("bowner_name"));
                        prvwdetails.put("bowner_desig", rs.getString("bowner_desig"));
                        prvwdetails.put("bowner_emp_code", rs.getString("bowner_emp_code"));
                        prvwdetails.put("bowner_address", rs.getString("bowner_address"));
                        prvwdetails.put("bowner_state", rs.getString("bowner_state"));
                        prvwdetails.put("bowner_city", rs.getString("bowner_city"));
                        prvwdetails.put("bowner_pin", rs.getString("bowner_pin"));
                        prvwdetails.put("bowner_ophone", rs.getString("bowner_ophone"));
                        prvwdetails.put("bowner_rphone", rs.getString("bowner_rphone"));
                        prvwdetails.put("bowner_mobile", rs.getString("bowner_mobile"));
                        prvwdetails.put("bowner_email", rs.getString("bowner_email"));
                        prvwdetails.put("audit", rs.getString("audit"));
                        prvwdetails.put("audit_date", rs.getString("audit_date"));
                        prvwdetails.put("staging_ip", rs.getString("staging_ip"));
                        prvwdetails.put("flag_sender", rs.getString("flag_sender"));
                        prvwdetails.put("sender_id", rs.getString("sender_id"));
                        prvwdetails.put("domestic_traffic", rs.getString("domestic_traffic"));
                        prvwdetails.put("inter_traffic", rs.getString("inter_traffic"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("final_id", rs.getString("final_id"));
                        prvwdetails.put("role", role);

//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("dns")) {
                int campaignId = dnsservice.fetchCampaignId(refno);
                if (campaignId != -1) {
                    String sql = "select * from dns_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("oldornew", "new");
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("dns_type", rs.getString("dns_type"));
                            prvwdetails.put("record_mx", rs.getString("record_mx"));
                            prvwdetails.put("record_ptr", rs.getString("record_ptr"));
                            prvwdetails.put("record_srv", rs.getString("record_srv"));
                            prvwdetails.put("record_spf", rs.getString("record_spf"));
                            prvwdetails.put("record_txt", rs.getString("record_txt"));
                            prvwdetails.put("record_dmarc", rs.getString("record_dmarc"));
                            prvwdetails.put("req_for", rs.getString("req_for"));
                            prvwdetails.put("form_type", rs.getString("form_type"));
                            prvwdetails.put("uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("renamed_filepath", rs.getString("renamed_filepath"));
                            prvwdetails.put("server_location", rs.getString("server_location"));
                            prvwdetails.put("record_ptr1", rs.getString("record_ptr1"));
                            prvwdetails.put("record_mx1", rs.getString("record_mx1"));
                            if (rs.getString("req_other_record") == null) {
                                prvwdetails.put("record_other", "");
                            } else if (rs.getString("req_other_record") != null && rs.getString("req_other_record").isEmpty()) {
                                prvwdetails.put("record_other", rs.getString("req_other_record"));
                            } else if (rs.getString("req_other_record") != null && !rs.getString("req_other_record").isEmpty()) {
                                prvwdetails.put("record_other", rs.getString("req_other_record"));
                            }
                            prvwdetails.put("record_other", rs.getString("req_other_record"));
                            prvwdetails.put("validRecord", dnsservice.fetchSuccessBulkDataUsingReg(rs.getString("registration_no"), rs.getString("req_for"), prvwdetails.get("record_other").toString()));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("url", rs.getString("service_url"));
                            prvwdetails.put("role", role);
                            prvwdetails.put("migration_date", rs.getString("migration_date"));
                            session.put("request_type", rs.getString("form_type")); // line added by pr on 1stfeb18
                            session.put("req_for", rs.getString("req_for")); // line added by pr on 1stfeb18
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                            pst = null;
                            String sql1 = "select status from final_audit_track where registration_no=?";
                            pst = conSlave.prepareStatement(sql1);
                            pst.setString(1, refno);
                            rs1 = pst.executeQuery();
                            while (rs1.next()) {
                                if (rs1.getString("status").contains("reject")) {
                                    session.put("resend_request", "true");
                                } else {
                                    session.put("resend_request", "false");
                                }
//                                    prvwdetails.put("stat_type", rs1.getString("stat_type")); // 12-04-2022 dns preview issue
                                prvwdetails.put("stat_type", rs1.getString("status"));
                            }
                            session.put("resend_request", "false");
                            session.put("authMobile", rs.getString("mobile"));
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));

                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    String sql = "select * from dns_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("oldornew", "old");
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            //prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("dns_type", rs.getString("dns_type"));
                            prvwdetails.put("record_mx", rs.getString("record_mx"));
                            prvwdetails.put("record_ptr", rs.getString("record_ptr"));
                            prvwdetails.put("record_srv", rs.getString("record_srv"));
                            prvwdetails.put("record_spf", rs.getString("record_spf"));
                            prvwdetails.put("record_txt", rs.getString("record_txt"));
                            prvwdetails.put("record_dmarc", rs.getString("record_dmarc"));
                            prvwdetails.put("req_for", rs.getString("req_for"));
                            prvwdetails.put("form_type", rs.getString("form_type"));
                            prvwdetails.put("uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("renamed_filepath", rs.getString("renamed_filepath"));
                            prvwdetails.put("server_location", rs.getString("server_location"));
                            prvwdetails.put("record_ptr1", rs.getString("record_ptr1"));
                            prvwdetails.put("record_mx1", rs.getString("record_mx1"));
                            prvwdetails.put("form_name", whichform);
                            prvwdetails.put("url", rs.getString("service_url"));
                            prvwdetails.put("role", role);
                            prvwdetails.put("migration_date", rs.getString("migration_date"));
                            session.put("request_type", rs.getString("form_type")); // line added by pr on 1stfeb18
                            session.put("req_for", rs.getString("req_for")); // line added by pr on 1stfeb18
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                            pst = null;
                            String sql1 = "select status from final_audit_track where registration_no=?";
                            pst = conSlave.prepareStatement(sql1);
                            pst.setString(1, refno);
                            rs1 = pst.executeQuery();
                            while (rs1.next()) {
                                if (rs1.getString("status").contains("reject")) {
                                    session.put("resend_request", "true");
                                } else {
                                    session.put("resend_request", "false");
                                }
//                                    prvwdetails.put("stat_type", rs1.getString("stat_type")); // 12-04-2022 dns preview issue
                                prvwdetails.put("stat_type", rs1.getString("status"));
                            }
                            session.put("resend_request", "false");
                            session.put("authMobile", rs.getString("mobile"));

                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        pst = conSlave.prepareStatement("select dns_url from dns_registration_url where registration_no=?");
                        pst.setString(1, refno);
                        rs1 = pst.executeQuery();
                        String url = "";
                        while (rs1.next()) {
                            url += rs1.getString("dns_url").concat(";");
                        }
                        String domain_url = url.replaceAll(";$", "");

                        if (session.get("req_for").equals("req_modify")) {
                            pst = conSlave.prepareStatement("select oldip from dns_registration_oldip where registration_no=?");
                            pst.setString(1, refno);
                            rs2 = pst.executeQuery();
                            String ip = "";
                            while (rs2.next()) {
                                if (rs2.getString("oldip") != null && !rs2.getString("oldip").isEmpty() && !rs2.getString("oldip").equalsIgnoreCase("N/A")) {
                                    ip += rs2.getString("oldip").concat(";");
                                }
                            }
                            if (ip.length() > 0) {
                                String domain_old_ip = ip.replaceAll(";$", "");
                                //String domain_old_ip = ip.substring(0, ip.length() - 1);
                                prvwdetails.put("domain_old_ip", domain_old_ip);
                            } else {
                                //System.out.println("inside else");
                            }
                        }
                        pst = conSlave.prepareStatement("select cname from dns_registration_cname where registration_no=?");
                        pst.setString(1, refno);
                        System.out.println(printlog + "pst of cname" + pst);
                        rs3 = pst.executeQuery();
                        String loc = "";
                        while (rs3.next()) {
                            if (rs3.getString("cname") != null && !rs3.getString("cname").isEmpty() && !rs3.getString("cname").equalsIgnoreCase("N/A")) {
                                loc += rs3.getString("cname").concat(";");
                            }
                        }
                        String domain_cname = "";
                        String domain_new_ip = "";
                        if (loc.length() > 0) {
                            //domain_cname = loc.substring(0, loc.length() - 1);
                            domain_cname = loc.replaceAll(";$", "");
                        } else {
                            //System.out.println("inside else");
                        }
                        pst = conSlave.prepareStatement("select newip from dns_registration_newip where registration_no=?");
                        pst.setString(1, refno);
                        rs4 = pst.executeQuery();
                        String ip = "";
                        while (rs4.next()) {
                            if (rs4.getString("newip") != null && !rs4.getString("newip").isEmpty() && !rs4.getString("newip").equalsIgnoreCase("N/A")) {
                                ip += rs4.getString("newip").concat(";");
                            }
                        }
                        if (ip.length() > 0) {
                            //domain_new_ip = ip.substring(0, ip.length() - 1);
                            domain_new_ip = ip.replaceAll(";$", "");
                        }
                        prvwdetails.put("domain_url", domain_url);
                        prvwdetails.put("domain_new_ip", domain_new_ip);
                        prvwdetails.put("domain_cname", domain_cname);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } else if (whichform.equalsIgnoreCase("wifi")) {
                String sql = "select * from wifi_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_wifitype", rs.getString("wifi_type"));
                        prvwdetails.put("prvw_wifimac1", rs.getString("wifi_mac1"));
                        prvwdetails.put("prvw_wifimac2", rs.getString("wifi_mac2"));
                        prvwdetails.put("prvw_wifimac3", rs.getString("wifi_mac3"));
                        prvwdetails.put("prvw_wifimac4", rs.getString("wifi_mac4"));
                        prvwdetails.put("prvw_wifios1", rs.getString("wifi_os1"));
                        prvwdetails.put("prvw_wifios2", rs.getString("wifi_os2"));
                        prvwdetails.put("prvw_wifios3", rs.getString("wifi_os3"));
                        prvwdetails.put("prvw_wifios4", rs.getString("wifi_os4"));
                        prvwdetails.put("prvw_device_type1", rs.getString("device_type1"));
                        prvwdetails.put("prvw_device_type2", rs.getString("device_type2"));
                        prvwdetails.put("prvw_device_type3", rs.getString("device_type3"));
                        prvwdetails.put("prvw_device_type4", rs.getString("device_type4"));

                        prvwdetails.put("prvw_wifirequest", rs.getString("wifi_request"));
                        prvwdetails.put("prvw_wifitime", rs.getString("wifi_time"));
                        prvwdetails.put("prvw_wifiduration", rs.getString("wifi_duration"));
                        prvwdetails.put("prvw_ofc_name", rs.getString("fwd_ofc_name"));
                        prvwdetails.put("prvw_ofc_email", rs.getString("fwd_ofc_email"));
                        prvwdetails.put("prvw_ofc_mobile", rs.getString("fwd_ofc_mobile"));
                        prvwdetails.put("prvw_ofc_tel", rs.getString("fwd_ofc_tel"));
                        prvwdetails.put("prvw_ofc_add", rs.getString("fwd_ofc_add"));
                        prvwdetails.put("prvw_ofc_desig", rs.getString("fwd_ofc_desig"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("wifi_process", rs.getString("wifi_process"));
                        prvwdetails.put("role", role);
                        prvwdetails.put("final_id", rs.getString("wifi_value"));// line added by pr on 19thdec19

                        // start, code added by pr on 2ndjan2020
                        String ldap_wifi_value = entities.LdapQuery.fetchwifivalue(rs.getString("auth_email"));

                        //System.out.println(" inside usertrack value getting func for wifi ldap value of attribute is "+ldap_wifi_value);
                        prvwdetails.put("ldap_wifi_value", ldap_wifi_value);// line added by pr on 19thdec19

                        // end, code added by pr on 2ndjan2020
//                        //payal agarwal
                        if (rs.getString("wifi_process").equalsIgnoreCase("req_delete")) {
                            String sql2 = "select * from wifi_mac_os where registration_no=?";
                            pst = conSlave.prepareStatement(sql2);
                            pst.setString(1, refno);
                            System.out.println(printlog + "wifi delete query:::::::::::::" + pst);
                            rs5 = pst.executeQuery();
                            while (rs5.next()) {
                                FormBean formBean = new FormBean();
                                formBean.setWifi_mac1(rs5.getString(2));
                                formBean.setWifi_os1(rs5.getString(3));
                                mac_os_List.add(formBean);

                            }
                            prvwdetails.put("mac_os_List", mac_os_List);

                        }

//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("wifi_type", rs.getString("wifi_type"));
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("singleuser")) {
                String sql = "select * from single_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);
                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_dob", rs.getString("dob"));
                        prvwdetails.put("prvw_dor", rs.getString("dor"));
                        prvwdetails.put("prvw_idtype", rs.getString("id_type"));
                        prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                        prvwdetails.put("prvw_pemail2", rs.getString("preferred_email2"));
                        prvwdetails.put("prvw_emp_type", rs.getString("emp_type"));
                        prvwdetails.put("prvw_type", rs.getString("type"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                        prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                        prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                        prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                        prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
                        String mobile = rs.getString("mobile");
                        prvwdetails.put("prvw_applicant_dept", rs.getString("other_applicant_dept"));
                        prvwdetails.put("prvw_applicant_name", rs.getString("other_applicant_name"));
                        prvwdetails.put("prvw_applicant_email", rs.getString("other_applicant_email"));
                        prvwdetails.put("prvw_applicant_mobile", rs.getString("other_applicant_mobile"));
                        prvwdetails.put("prvw_applicant_state", rs.getString("other_applicant_state"));
                        prvwdetails.put("prvw_applicant_empcode", rs.getString("other_applicant_empcode"));
                        prvwdetails.put("prvw_applicant_desig", rs.getString("other_applicant_desig"));
                        prvwdetails.put("prvw_request_flag", rs.getString("request_flag"));

                        prvwdetails.put("role", role);
                        //String mobile = "+919958910444";
                        String check_mobile = entities.LdapQuery.CheckMobile(mobile);
                        if (check_mobile.equalsIgnoreCase("success")) {
                        } else if (check_mobile.equalsIgnoreCase("create")) {
                            prvwdetails.put("dup_error", "Already we have " + check_mobile + " Mail address registered against this mobile number");
                        } else if (check_mobile.equalsIgnoreCase("block")) {
                            prvwdetails.put("dup_error", "Already we have " + check_mobile + " Mail address registered against this mobile number");
                        } else {
                        }
                        prvwdetails.put("final_id", rs.getString("final_id"));
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("ldap")) {
                String sql = "select * from ldap_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_appname", rs.getString("app_name"));
                        prvwdetails.put("prvw_appurl", rs.getString("app_url"));
                        prvwdetails.put("prvw_domain", rs.getString("domain"));
                        prvwdetails.put("prvw_baseip", rs.getString("base_ip"));
                        prvwdetails.put("prvw_serviceip", rs.getString("service_ip"));
                        prvwdetails.put("prvw_server_loc", rs.getString("server_loc"));
                        prvwdetails.put("prvw_server_loc_other", rs.getString("server_loc_other"));
                        prvwdetails.put("prvw_https", rs.getString("https"));
                        prvwdetails.put("prvw_audit", rs.getString("audit"));
                        prvwdetails.put("prvw_ldap_id1", rs.getString("ldap_id1"));
                        prvwdetails.put("prvw_ldap_id2", rs.getString("ldap_id2"));
                        prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                        session.put("uploaded_filename", rs.getString("uploaded_filename"));
                        session.put("renamed_filepath", rs.getString("renamed_filepath"));
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("imappop")) {
                String sql = "select * from imappop_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("protocol", rs.getString("protocol"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("mobile")) {
                String sql = "select * from mobile_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        // CODE CHANGE merge by sanjeev for profile updation 23-03-2022

                        String email = rs.getString("auth_email");   //email of uder whose data is going to be updated
                        Ldap ldap = new Ldap();

                        Map<String, Object> ldapValues = ldap.fetchAttrUpdateMobile(email);
                        String nicDateOfBirthOld = (String) ldapValues.get("nicDateOfBirth");
                        String nicDateOfRetirementOld = (String) ldapValues.get("nicDateOfRetirement");
                        String designationOld = (String) ldapValues.get("designation");
                        String mobileOld = ldap.fetchMobileFromLdap(email);
                        String displayNameOld = ldap.fetchNameFromLdap(email);
                        System.out.println("ldap Details-----::nicDateOfBirthOld:" + nicDateOfBirthOld + "  nicDateOfRetirementOld:" + nicDateOfRetirementOld + "   designationOld:" + designationOld + " mobileOld:" + mobileOld + "                            displayNameOld:" + displayNameOld);
                        prvwdetails.put("nicDateOfBirthOld", nicDateOfBirthOld);
                        prvwdetails.put("nicDateOfRetirementOld", nicDateOfRetirementOld);
                        prvwdetails.put("designationOld", designationOld);
                        prvwdetails.put("displayNameOld", displayNameOld);
                        prvwdetails.put("mobileOld", mobileOld);

                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("country_code", rs.getString("country_code"));
                        prvwdetails.put("new_mobile", rs.getString("new_mobile"));
                        prvwdetails.put("remarks", rs.getString("remarks"));
                        prvwdetails.put("remarks_flag", rs.getString("remarks_flag"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
                        prvwdetails.put("nicDateOfBirth", rs.getString("nic_dateofbirth"));
                        prvwdetails.put("nicDateOfRetirement", rs.getString("nic_dateofretirement"));
                        prvwdetails.put("designation", rs.getString("nic_designation"));
                        prvwdetails.put("displayName", rs.getString("nic_displayname"));
                        prvwdetails.put("formType", "Mobile");

//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");

                    }

                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (whichform.equalsIgnoreCase("profile")) {
                String sql = "select * from mobile_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }

                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("country_code", rs.getString("country_code"));
                        prvwdetails.put("new_mobile", rs.getString("new_mobile"));
                        prvwdetails.put("remarks", rs.getString("remarks"));
                        prvwdetails.put("remarks_flag", rs.getString("remarks_flag"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
                        prvwdetails.put("nicDateOfBirth", rs.getString("nic_dateofbirth"));
                        prvwdetails.put("nicDateOfRetirement", rs.getString("nic_dateofretirement"));
                        prvwdetails.put("designation", rs.getString("nic_designation"));
                        prvwdetails.put("displayName", rs.getString("nic_displayname"));
                        //added by sanjeev 03-08-2022
                        String email = rs.getString("auth_email");   //email of uder whose data is going to be updated
                        Ldap ldap = new Ldap();
                        Map<String, Object> ldapValues = ldap.fetchAttrUpdateMobile(email);
                        String nicDateOfBirthOld = (String) ldapValues.get("nicDateOfBirth");
                        String nicDateOfRetirementOld = (String) ldapValues.get("nicDateOfRetirement");
                        String designationOld = (String) ldapValues.get("designation");
                        String mobileOld = ldap.fetchMobileFromLdap(email);
                        String displayNameOld = ldap.fetchNameFromLdap(email);
                        System.out.println("ldap Details-----::nicDateOfBirthOld:" + nicDateOfBirthOld + "  nicDateOfRetirementOld:" + nicDateOfRetirementOld + "   designationOld:" + designationOld + " mobileOld:" + mobileOld + "                            displayNameOld:" + displayNameOld);
                        prvwdetails.put("nicDateOfBirthOld", nicDateOfBirthOld);
                        prvwdetails.put("nicDateOfRetirementOld", nicDateOfRetirementOld);
                        prvwdetails.put("designationOld", designationOld);
                        prvwdetails.put("displayNameOld", displayNameOld);
                        prvwdetails.put("mobileOld", mobileOld);
                        prvwdetails.put("formType", "Profile");

//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }

                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (whichform.equalsIgnoreCase("gem")) {
                String sql = "select * from gem_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_ofc_name", rs.getString("fwd_ofc_name"));
                        prvwdetails.put("prvw_ofc_email", rs.getString("fwd_ofc_email"));
                        prvwdetails.put("prvw_ofc_mobile", rs.getString("fwd_ofc_mobile"));
                        prvwdetails.put("prvw_ofc_tel", rs.getString("fwd_ofc_tel"));
                        prvwdetails.put("prvw_ofc_add", rs.getString("fwd_ofc_add"));
                        prvwdetails.put("prvw_ofc_desig", rs.getString("fwd_ofc_desig"));
                        prvwdetails.put("prvw_pse", rs.getString("pse"));
                        prvwdetails.put("prvw_pse_ministry", rs.getString("pse_ministry"));
                        prvwdetails.put("prvw_pse_state", rs.getString("pse_state"));
                        prvwdetails.put("prvw_pse_district", rs.getString("pse_district"));
                        prvwdetails.put("prvw_dob", rs.getString("dob"));
                        prvwdetails.put("prvw_dor", rs.getString("dor"));
                        prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                        prvwdetails.put("prvw_pemail2", rs.getString("preferred_email2"));
                        prvwdetails.put("prvw_traffic", rs.getString("traffic"));
                        prvwdetails.put("primary_user", rs.getString("primary_user"));
                        prvwdetails.put("primary_user_id", rs.getString("primary_user_id"));
                        prvwdetails.put("role_assign", rs.getString("role_assign"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("final_id", rs.getString("final_id"));
                        prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("dorext")) {
                String sql = "select * from dor_ext_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
                        prvwdetails.put("dor_email", rs.getString("dor_email"));
                        prvwdetails.put("dor", rs.getString("dor"));
                        prvwdetails.put("pre_dor", rs.getString("pre_dor"));
                        prvwdetails.put("uploaded_filename", rs.getString("uploaded_filename"));
                        prvwdetails.put("renamed_filepath", rs.getString("renamed_filepath"));
                        prvwdetails.put("single_id_type", rs.getString("id_type"));
                        prvwdetails.put("single_emp_type", rs.getString("emp_type"));
                        prvwdetails.put("single_dob", rs.getString("dob"));

//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                        if (rs.getString("uploaded_filename") != null) {
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                        }
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("DOREXTRT")) {
                String sql = "select * from dor_ext_retired_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);
                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
                        prvwdetails.put("dor_email", rs.getString("dor_email"));
                        prvwdetails.put("dor", rs.getString("new_dor"));
                        prvwdetails.put("pre_dor", rs.getString("prev_dor"));
                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "false");
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("bulkuser")) {
                int campaignId = emailservice.fetchCampaignId(refno);
                if (campaignId != -1) {
                    String sql = "select * from bulk_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_type", rs.getString("type"));
                            prvwdetails.put("prvw_id_type", rs.getString("id_type"));
                            prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("prvw_renamed_filepath", rs.getString("renamed_filepath"));
                            prvwdetails.put("prvw_emp_type", rs.getString("emp_type"));
                            prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                            prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                            prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                            prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                            prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
                            prvwdetails.put("role", role);
                            prvwdetails.put("validRecord", emailservice.fetchSuccessBulkDataUsingReg(rs.getString("registration_no")));
                            // start, code added by pr on 12thjun18
                            String str = rs.getString("renamed_filepath");
                            String onlyName = str.replace(".csv", "");
                            onlyName = onlyName.trim();
                            prvwdetails.put("valid_filepath", onlyName + "-valid.csv");
                            prvwdetails.put("notvalid_filepath", onlyName + "-notvalid.csv");
                            prvwdetails.put("error_filepath", onlyName + "-error.csv");
                            session.put("valid_filepath", onlyName + "-valid.csv");
                            session.put("error_filepath", onlyName + "-error.csv");
                            session.put("notvalid_filepath", onlyName + "-notvalid.csv");
                            // end, code added by pr on 12thjun18
                            prvwdetails.put("form_name", whichform);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));
                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    String sql = "select * from bulk_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    try {
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                        rs = pst.executeQuery();
                        while (rs.next()) {
                            prvwdetails.put("hod_name", rs.getString("hod_name"));
                            prvwdetails.put("hod_email", rs.getString("hod_email"));
                            // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                            isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                            if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                                String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                                String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                                String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                                prvwdetails.put("hod_mobile", hodMobile);

                            } else {
                                prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                            }
                            prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                            prvwdetails.put("ca_design", rs.getString("ca_desig"));
                            prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                            prvwdetails.put("prvw_desig", rs.getString("designation"));
                            prvwdetails.put("prvw_address", rs.getString("address"));
                            prvwdetails.put("prvw_city", rs.getString("city"));
                            prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                            prvwdetails.put("prvw_pin", rs.getString("pin"));
                            prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                            prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                            prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                            prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                            prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                            prvwdetails.put("prvw_employment", rs.getString("employment"));
                            prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                            prvwdetails.put("prvw_department", rs.getString("department"));
                            prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                            prvwdetails.put("prvw_state", rs.getString("state"));
                            prvwdetails.put("prvw_org", rs.getString("organization"));
                            prvwdetails.put("prvw_type", rs.getString("type"));
                            prvwdetails.put("prvw_id_type", rs.getString("id_type"));
                            prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                            prvwdetails.put("prvw_renamed_filepath", rs.getString("renamed_filepath"));
                            prvwdetails.put("prvw_emp_type", rs.getString("emp_type"));
                            prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                            prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                            prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                            prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                            prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
                            prvwdetails.put("role", role);
                            prvwdetails.put("validRecord", emailservice.fetchSuccessBulkData(rs.getString("registration_no")));
                            // start, code added by pr on 12thjun18
                            String str = rs.getString("renamed_filepath");
                            String onlyName = str.replace(".csv", "");
                            onlyName = onlyName.trim();
                            prvwdetails.put("valid_filepath", onlyName + "-valid.csv");
                            prvwdetails.put("notvalid_filepath", onlyName + "-notvalid.csv");
                            prvwdetails.put("error_filepath", onlyName + "-error.csv");
                            session.put("valid_filepath", onlyName + "-valid.csv");
                            session.put("error_filepath", onlyName + "-error.csv");
                            session.put("notvalid_filepath", onlyName + "-notvalid.csv");
                            // end, code added by pr on 12thjun18
                            prvwdetails.put("form_name", whichform);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                            session.put("resend_request", "false");
                            session.put("prEmployment", rs.getString("employment"));
                            session.put("prMinistry", rs.getString("ministry"));
                            session.put("prDepartment", rs.getString("department"));
                            session.put("prState", rs.getString("state"));
                            session.put("prStateDepartment", rs.getString("department"));
                            session.put("prOrganization", rs.getString("organization"));
                            session.put("authMobile", rs.getString("mobile"));;
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                        }
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                        json = new Gson().toJson(prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } else if (whichform.equalsIgnoreCase("dlist")) {
                String sql = "select * from distribution_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }

                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("list_name", rs.getString("list_name"));
                        prvwdetails.put("list_description", rs.getString("list_description"));
                        prvwdetails.put("list_mod", rs.getString("list_moderated"));
                        prvwdetails.put("allowed_member", rs.getString("allowed_member_mail"));
                        prvwdetails.put("non_nicnet", rs.getString("other_member_mail"));
                        prvwdetails.put("list_temp", rs.getString("list_temp"));
                        prvwdetails.put("validity_date", rs.getString("valid_date"));
                        prvwdetails.put("memberCount", rs.getString("member_count"));

                        // Set<String> h =   fetchModerator(refno);
                        pst = conSlave.prepareStatement("select id,name,email,mobile from dlist_moderator where registration_no= ? and form_type = 'moderator' ");
                        pst.setString(1, refno);
                        rs4 = pst.executeQuery();
                        List<Object> moderatorList = new ArrayList<>();

                        while (rs4.next()) {
                            Map<String, String> tmp = new HashMap<>();

                            tmp.put("id", rs4.getString("id"));
                            tmp.put("name", rs4.getString("name"));
                            tmp.put("email", rs4.getString("email"));
                            tmp.put("mobile", rs4.getString("mobile"));

                            moderatorList.add(tmp);
                        }
                        prvwdetails.put("moderator", moderatorList);

                        pst = conSlave.prepareStatement("select id, name,email,mobile from dlist_moderator where registration_no = ? and  form_type = 'owner'");
                        pst.setString(1, refno);
                        rs4 = pst.executeQuery();

                        List<Object> ownerList = new ArrayList<>();

                        while (rs4.next()) {
                            Map<String, String> tmp = new HashMap<>();

                            tmp.put("id", rs4.getString("id"));
                            tmp.put("name", rs4.getString("name"));
                            tmp.put("email", rs4.getString("email"));
                            tmp.put("mobile", rs4.getString("mobile"));

                            ownerList.add(tmp);
                        }
                        prvwdetails.put("owner", ownerList);
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("nkn")) {
                String sql = "select * from nkn_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_request_type", rs.getString("request_type"));
                        prvwdetails.put("prvw_inst_name", rs.getString("inst_name"));
                        prvwdetails.put("prvw_inst_id", rs.getString("inst_id"));
                        prvwdetails.put("prvw_nkn_project", rs.getString("nkn_project"));
                        prvwdetails.put("prvw_dob", rs.getString("dob"));
                        prvwdetails.put("prvw_dor", rs.getString("dor"));
                        prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                        prvwdetails.put("prvw_pemail2", rs.getString("preferred_email2"));
                        prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                        prvwdetails.put("prvw_renamed_filepath", rs.getString("renamed_filepath"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                        prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                        prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                        prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                        prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
                        prvwdetails.put("final_id", rs.getString("final_id"));
                        prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                        session.put("uploaded_filename", rs.getString("uploaded_filename"));
                        session.put("renamed_filepath", rs.getString("renamed_filepath"));
                        session.put("request_type", rs.getString("request_type")); // line added by pr on 1stfeb18
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("bulkdlist")) {
                String sql = "select * from bulk_distribution_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }

                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("list_name", rs.getString("list_name"));
                        prvwdetails.put("list_description", rs.getString("list_description"));
                        prvwdetails.put("list_mod", rs.getString("list_moderated"));
                        prvwdetails.put("allowed_member", rs.getString("allowed_member_mail"));
                        prvwdetails.put("non_nicnet", rs.getString("other_member_mail"));
                        prvwdetails.put("list_temp", rs.getString("list_temp"));
                        prvwdetails.put("validity_date", rs.getString("valid_date"));

                        //===============
                        pst = conSlave.prepareStatement("select id,name,email,mobile from dlist_moderator where registration_no= ? and form_type = 'moderator' ");
                        pst.setString(1, refno);
                        rs4 = pst.executeQuery();
                        List<Object> moderatorList = new ArrayList<>();

                        while (rs4.next()) {
                            Map<String, String> tmp = new HashMap<>();

                            tmp.put("id", rs4.getString("id"));
                            tmp.put("name", rs4.getString("name"));
                            tmp.put("email", rs4.getString("email"));
                            tmp.put("mobile", rs4.getString("mobile"));

                            moderatorList.add(tmp);
                        }
                        prvwdetails.put("moderator", moderatorList);
                        // Excel file details 

                        pst = conSlave.prepareStatement("select id,list_name,description_list,list_mod,allowed_member,list_temp,mail_Acceptance,owner_Name,Owner_Email,owner_Mobile,moderator_Name,moderator_Email,moderator_Mobile,owner_Admin,moderator_Admin  from dlist_bulk where registration_no= ? ");
                        pst.setString(1, refno);
                        rs4 = pst.executeQuery();
                        List<Object> ExcelFileDetails = new ArrayList<>();

                        while (rs4.next()) {
                            Map<String, String> tmp = new HashMap<>();

                            tmp.put("id", rs4.getString("id"));
                            tmp.put("list_name", rs4.getString("list_name"));
                            tmp.put("description_list", rs4.getString("description_list"));
                            tmp.put("list_mod", rs4.getString("list_mod"));
                            tmp.put("allowed_member", rs4.getString("allowed_member"));
                            tmp.put("list_temp", rs4.getString("list_temp"));
                            tmp.put("mail_Acceptance", rs4.getString("mail_Acceptance"));
                            tmp.put("owner_Name", rs4.getString("owner_Name"));
                            tmp.put("Owner_Email", rs4.getString("Owner_Email"));
                            tmp.put("owner_Mobile", rs4.getString("owner_Mobile"));
                            tmp.put("moderator_Name", rs4.getString("moderator_Name"));

                            tmp.put("moderator_Email", rs4.getString("moderator_Email"));
                            tmp.put("moderator_Mobile", rs4.getString("moderator_Mobile"));
                            tmp.put("owner_Admin", rs4.getString("owner_Admin"));
                            tmp.put("moderator_Admin", rs4.getString("moderator_Admin"));

                            ExcelFileDetails.add(tmp);
                        }
                        prvwdetails.put("Excelfile", ExcelFileDetails);

                        pst = conSlave.prepareStatement("select id, name,email,mobile from dlist_moderator where registration_no = ? and  form_type = 'owner'");
                        pst.setString(1, refno);
                        rs4 = pst.executeQuery();

                        List<Object> ownerList = new ArrayList<>();

                        while (rs4.next()) {
                            Map<String, String> tmp = new HashMap<>();

                            tmp.put("id", rs4.getString("id"));
                            tmp.put("name", rs4.getString("name"));
                            tmp.put("email", rs4.getString("email"));
                            tmp.put("mobile", rs4.getString("mobile"));

                            ownerList.add(tmp);
                        }
                        prvwdetails.put("owner", ownerList);
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
                        // prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));    // june 2021
                        // prvwdetails.put("prvw_renamed_filepath", rs.getString("renamed_filepath"));
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("relay")) {
                String sql = "select * from relay_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("app_ip", rs.getString("app_ip"));
                        prvwdetails.put("old_app_ip", rs.getString("relay_old_ip"));
                        prvwdetails.put("app_name", rs.getString("app_name"));
                        prvwdetails.put("division_name", rs.getString("division_name"));
                        prvwdetails.put("os", rs.getString("os"));
                        prvwdetails.put("server_loc", rs.getString("server_loc"));
                        prvwdetails.put("server_loc_other", rs.getString("server_loc_other"));
                        prvwdetails.put("uploaded_filename", rs.getString("uploaded_filename"));
                        prvwdetails.put("renamed_filepath", rs.getString("renamed_filepath"));

                        prvwdetails.put("staging_ip", rs.getString("staging_ip"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
                        prvwdetails.put("relay_app_url", rs.getString("relay_app_url"));
                        prvwdetails.put("relay_sender_id", rs.getString("relay_sender_id"));
                        prvwdetails.put("domain_mx", rs.getString("domain_mx"));
                        prvwdetails.put("spf", rs.getString("spf"));
                        prvwdetails.put("dkim", rs.getString("dkim"));
                        prvwdetails.put("dmarc", rs.getString("dmarc"));
                        prvwdetails.put("smtp_port", rs.getString("port"));
                        prvwdetails.put("relay_auth_id", rs.getString("relay_auth_id"));
                        prvwdetails.put("req_type", rs.getString("req_type"));
                        prvwdetails.put("relay_old_ip", rs.getString("relay_old_ip"));
                        prvwdetails.put("relay_mailsent", rs.getString("relay_mailsent"));
                        prvwdetails.put("point_name", rs.getString("point_name"));
                        prvwdetails.put("point_email", rs.getString("point_email"));
                        prvwdetails.put("mobile_number", rs.getString("point_mobile_number"));
                        prvwdetails.put("landline_number", rs.getString("landline_number"));
                        prvwdetails.put("security_audit", rs.getString("security_audit"));
                        prvwdetails.put("security_exp_date", rs.getString("security_exp_date"));
                        prvwdetails.put("other_mail_type", rs.getString("other_mail_type"));
                        prvwdetails.put("point_contact", rs.getString("point_contact"));
                        prvwdetails.put("is_hosted", rs.getString("is_hosted_nic"));
                        prvwdetails.put("mail_type", rs.getString("mail_type"));
                        prvwdetails.put("hardware_uploaded_filename", rs.getString("hardware_filename"));

//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));
                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                        session.put("relay_ip", rs.getString("app_ip"));// line added by pr on 1stfeb18
                        if (rs.getString("hardware_filename") != null) {
                            session.put("hardware_uploaded_filename", rs.getString("hardware_filename"));
                            session.put("hardware_renamed_filepath", rs.getString("renamed_hardware_filepath"));
                        } else {
                            session.put("hardware_uploaded_filename", "");
                            session.put("hardware_renamed_filepath", "");
                        }

                        if (rs.getString("uploaded_filename") != null) {
                            session.put("uploaded_filename", rs.getString("uploaded_filename"));
                            session.put("renamed_filepath", rs.getString("renamed_filepath"));
                        } else {
                            session.put("uploaded_filename", "");
                            session.put("renamed_filepath", "");
                        }

                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("ip")) {
                String sql = "select * from ip_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("req_for", rs.getString("ip_action_request"));
                        prvwdetails.put("account_name", rs.getString("account_name"));
                        prvwdetails.put("add_ip1", rs.getString("ip1"));
                        prvwdetails.put("add_ip2", rs.getString("ip2"));
                        prvwdetails.put("add_ip3", rs.getString("ip3"));
                        prvwdetails.put("add_ip4", rs.getString("ip4"));
                        prvwdetails.put("ip_type", rs.getString("ip_change_request"));
                        prvwdetails.put("app_name", rs.getString("app_name"));
                        prvwdetails.put("app_ip", rs.getString("app_ip"));
                        prvwdetails.put("server_loc", rs.getString("server_loc"));
                        prvwdetails.put("server_loc_other", rs.getString("server_loc_other"));
                        prvwdetails.put("ldap_url", rs.getString("ldap_url"));
                        prvwdetails.put("ldap_auth_allocate", rs.getString("ldap_auth_allocate"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                        session.put("ip_type", rs.getString("ip_change_request"));
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.contains("VPN")) {
                String sql = "select * from vpn_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    rs = pst.executeQuery();

                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));

                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);
                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_remarks", rs.getString("remarks"));
                        prvwdetails.put("prvw_vpncoord", rs.getString("coordinator_email"));
                        prvwdetails.put("user_type", rs.getString("user_type"));
                        prvwdetails.put("role", role);

                        if (rs.getString("user_type").equals("change_add") || rs.getString("user_type").equals("vpn_single")) {
                            String sql1 = "select * from vpn_entries where registration_no=?";
                            PreparedStatement pst1 = conSlave.prepareStatement(sql1);
                            pst1.setString(1, refno);
                            rs1 = pst1.executeQuery();
                            Map vpn_data = new LinkedHashMap();
                            int i = 0;

                            while (rs1.next()) {
                                Map vpn_div_data = new LinkedHashMap();
                                vpn_div_data.put("regno", rs1.getString("registration_no"));
                                vpn_div_data.put("id", rs1.getString("id"));
                                vpn_div_data.put("ip_type", rs1.getString("ip_type"));
                                vpn_div_data.put("ip1", rs1.getString("ip1"));
                                vpn_div_data.put("ip2", rs1.getString("ip2"));
                                if (rs1.getString("ip_type").equals("single")) {
                                    vpn_div_data.put("ip", rs1.getString("ip1"));
                                } else {
                                    vpn_div_data.put("ip", rs1.getString("ip1") + " - " + rs1.getString("ip2"));
                                }
                                vpn_div_data.put("app_url", rs1.getString("app_url"));
                                vpn_div_data.put("dest_port", rs1.getString("dest_port"));
                                vpn_div_data.put("server_loc", rs1.getString("server_location"));
                                vpn_div_data.put("server_loc_txt", rs1.getString("server_loc_other"));
                                if (rs1.getString("server_location").equalsIgnoreCase("other")) {
                                    vpn_div_data.put("server", rs1.getString("server_loc_other"));
                                } else {
                                    vpn_div_data.put("server", rs1.getString("server_location"));
                                }
                                vpn_div_data.put("action_type", rs1.getString("action_type"));
                                vpn_div_data.put("deleted_flag", rs1.getString("deleted_flag"));
                                vpn_div_data.put("deleted_by", rs1.getString("deleted_by"));
                                vpn_data.put("div_" + i, vpn_div_data);
                                i++;
                            }

                            rs1.close();
                            pst1.close();
                            prvwdetails.put("vpn_data_all", vpn_data);
                        }

                        if (rs.getString("user_type").equals("vpn_delete")) {
                            ResultSet rs_delete = null;
                            pst = null;
                            String delete_query = "select server_ip,location,port,service,vpn_reg from vpn_registration_delete where registration_no=?";
                            pst = conSlave.prepareStatement(delete_query);
                            pst.setString(1, refno);
                            rs_delete = pst.executeQuery();
                            Map vpn_data = new LinkedHashMap();
                            int i = 0;
                            while (rs_delete.next()) {
                                Map vpn_div_delete_data = new LinkedHashMap();
                                vpn_div_delete_data.put("server_ip", rs_delete.getString("server_ip"));
                                vpn_div_delete_data.put("service", rs_delete.getString("service"));
                                vpn_div_delete_data.put("port", rs_delete.getString("port"));
                                vpn_div_delete_data.put("location", rs_delete.getString("location"));
                                //vpn_div_delete_data.put("vpn_reg", rs_delete.getString("vpn_reg"));	
                                vpn_data.put("div_" + i, vpn_div_delete_data);
                                i++;
                            }
                            rs_delete.close();
                            prvwdetails.put("vpn_data_all", vpn_data);
                        }

                        prvwdetails.put("vpn_reg_no", rs.getString("vpn_reg_no"));
                        prvwdetails.put("form_name", whichform);
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        if (prvwdetails.get("user_type").equals("vpn_renew") || prvwdetails.get("user_type").equals("change_add") || prvwdetails.get("user_type").equals("vpn_surrender") || prvwdetails.get("user_type").equals("vpn_delete")) {

                            // hit api
                            Vpn_registration reg_obj = new Vpn_registration();
                            // String all_aliases = userdata.getAliasesInString().replaceAll("'", "\"");
                            // System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%" + userdata.getAliasesInString().replaceAll("'", "\""));

                            /**
                             * ***********************************************
                             */
                            ArrayList aliases = entities.LdapQuery.GetMailEqui(prvwdetails.get("prvw_authemail").toString());
                            int sizeOfAliases = aliases.size();
                            String commaSeparatedAliases = "";

                            if (sizeOfAliases > 1) {
                                for (Object email : aliases) {
                                    commaSeparatedAliases += "\"" + email + "\",";
                                }
                                commaSeparatedAliases = commaSeparatedAliases.replaceAll(",$", "");

                            } else if (sizeOfAliases == 1) {
                                commaSeparatedAliases = "\"" + aliases.iterator().next() + "\"";
                            } else if (sizeOfAliases == 0) {
                                commaSeparatedAliases = "\"" + prvwdetails.get("prvw_authemail").toString() + "\"";
                            }

                            /**
                             * ***********************************************
                             */
                            String api_resp = reg_obj.post_api2(prvwdetails.get("vpn_reg_no").toString().trim(), prvwdetails.get("prvw_authemail").toString(), prvwdetails.get("prvw_mobile").toString(), commaSeparatedAliases);
                            System.out.println(printlog + "VPN Response :%%%%%%%:::" + api_resp);
                            JSONObject json2 = new JSONObject(api_resp);
                            JSONArray access = json2.getJSONArray("access_details");

                            String api_out = "<span style=' color: red; font-weight: bold; '>VPN Registration Number: " + prvwdetails.get("vpn_reg_no").toString().trim() + "</span><br/><br/><table class='table table-striped table-hover'><th>Server IP</th><th>Server Location</th><th>Destination Port</th><th>Application URL<th></th>";
                            for (int i = 0; i < access.length(); i++) {
                                JSONObject detail = access.getJSONObject(i);
                                String serip = detail.getString("serip");

                                String serloc = "";
                                try {
                                    serloc = detail.getString("serloc");
                                } catch (Exception e) {
                                    System.out.println(printlog + "Error parsing json response serloc:::" + e);
                                }

                                String destport = "";
                                try {

                                    destport = detail.getString("destport");
                                } catch (Exception e) {
                                    System.out.println(printlog + "Error parsing json response destport:::" + e);
                                }
                                String desc_service = "";

                                try {
                                    desc_service = detail.getString("desc_service");
                                } catch (Exception e) {
                                    System.out.println(printlog + "Error parsing json response desc_service:::" + e);
                                }
                                System.out.println(printlog + serip + ":" + serloc + ":" + destport + ":" + desc_service);
                                api_out += "<tr><td>" + serip + "</td><td>" + serloc + "</td><td>" + destport + "</td><td>" + desc_service + "</td></tr>";

                            }
                            api_out += "</table>";
                            prvwdetails.put("vpn_api_output", api_out);

                        }
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");

                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);

                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("webcast")) {
                String sql = "select * from webcast_registration where registration_no=?";
                pst = null;
                String json = null;

                try {

                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    rs = pst.executeQuery();

                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        // prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("fwd_ofc_name", rs.getString("fwd_ofc_name"));
                        prvwdetails.put("fwd_ofc_email", rs.getString("fwd_ofc_email"));
                        prvwdetails.put("fwd_ofc_mobile", rs.getString("fwd_ofc_mobile"));
                        prvwdetails.put("fwd_ofc_tel", rs.getString("fwd_ofc_tel"));
                        prvwdetails.put("fwd_ofc_add", rs.getString("fwd_ofc_add"));
                        prvwdetails.put("fwd_ofc_design", rs.getString("fwd_ofc_desig"));
                        prvwdetails.put("req_for", rs.getString("request_type"));
                        prvwdetails.put("role", role);
                        if (rs.getString("request_type").equals("live")) {
                            prvwdetails.put("event_coo_name", rs.getString("event_coo_name"));
                            prvwdetails.put("event_coo_email", rs.getString("event_coo_email"));
                            prvwdetails.put("event_coo_design", rs.getString("event_coo_design"));
                            prvwdetails.put("event_coo_mobile", rs.getString("event_coo_mobile"));
                            prvwdetails.put("event_coo_address", rs.getString("event_coo_address"));
                            prvwdetails.put("event_name_eng", rs.getString("event_name_eng"));
                            prvwdetails.put("event_name_hin", rs.getString("event_name_hindi"));
                            prvwdetails.put("event_start", rs.getString("event_start"));
                            prvwdetails.put("event_end", rs.getString("event_end"));
                            prvwdetails.put("event_type", rs.getString("event_type"));
                            prvwdetails.put("telecast", rs.getString("event_telecast"));
                            if (rs.getString("event_telecast").equals("yes")) {
                                prvwdetails.put("channel_name", rs.getString("channel_name"));
                            } else {
                                prvwdetails.put("live_feed", rs.getString("live_feed"));
                                if (rs.getString("live_feed").equalsIgnoreCase("Through VC")) {
                                    prvwdetails.put("vc_id", rs.getString("vc_id"));
                                }
                            }
                            prvwdetails.put("conf_radio", rs.getString("conf_radio"));
                            prvwdetails.put("conf_name", rs.getString("conf_name"));
                            prvwdetails.put("conf_type", rs.getString("conf_type"));
                            prvwdetails.put("conf_city", rs.getString("conf_city"));
                            prvwdetails.put("conf_schedule", rs.getString("conf_schedule"));
                            prvwdetails.put("conf_session", rs.getString("conf_session"));
                            prvwdetails.put("conf_bw", rs.getString("conf_bw"));
                            prvwdetails.put("conf_provider", rs.getString("conf_provider"));
                            prvwdetails.put("conf_event_hired", rs.getString("conf_event_hired"));
                            prvwdetails.put("conf_flash", rs.getString("conf_flash"));
                            if (rs.getString("conf_flash").equals("no")) {
                                prvwdetails.put("local_setup", rs.getString("local_setup"));
                            }
                            prvwdetails.put("conf_video", rs.getString("conf_video"));
                            if (rs.getString("conf_video").equals("yes")) {
                                prvwdetails.put("conf_contact", rs.getString("conf_contact"));
                            }
                            prvwdetails.put("hall_type", rs.getString("hall_type"));
                            prvwdetails.put("hall_number", rs.getString("hall_number"));
                            Map webcast_file = new HashMap();
                            PreparedStatement p = conSlave.prepareStatement("select * from webcast_uploaded_files where registration_no=?");
                            p.setString(1, refno);
                            ResultSet r = p.executeQuery();
                            while (r.next()) {
                                webcast_file.put(r.getString("filename"), r.getString("path"));
                            }
                            if (!webcast_file.isEmpty()) {
                                prvwdetails.put("webcast_uploaded_files", webcast_file);
                            }
                        } else if (rs.getString("request_type").equals("demand")) {
                            prvwdetails.put("event_size", rs.getString("event_size"));
                            prvwdetails.put("event_no", rs.getString("event_no"));
                            prvwdetails.put("media_format", rs.getString("media_format"));
                        }
                        prvwdetails.put("payment", rs.getString("payment"));
                        if (rs.getString("payment").equals("yes")) {
                            prvwdetails.put("cheque_no", rs.getString("cheque_no"));
                            prvwdetails.put("cheque_amount", rs.getString("cheque_amount"));
                            prvwdetails.put("cheque_date", rs.getString("cheque_date"));
                            prvwdetails.put("bank_name", rs.getString("bank_name"));
                        }
                        prvwdetails.put("remarks", rs.getString("remarks"));

//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");

                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);

                    ServletActionContext.getResponse().setContentType("application/json;charset=UTF-8");
                    ServletActionContext.getResponse().getWriter().write(json);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("EMAILACTIVATE")) {
                String table = "email_act_registration";
                String sql = "select * from " + table + " where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        //prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                        prvwdetails.put("prvw_emp_type", rs.getString("emp_type"));
                        if (action != null) {
                            if (session.get("uploaded_filename") != null) {
                                String uploaded_filename = session.get("uploaded_filename").toString();
                                //String renamed_filepath = session.get("renamed_filepath").toString();
                                prvwdetails.put("prvw_file_name", uploaded_filename);
                            }

                        } else {
                            prvwdetails.put("prvw_file_name", rs.getString("work_order"));
                        }
                        prvwdetails.put("prvw_dor", rs.getString("dor"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                        prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                        prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                        prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                        prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
////                                System.out.println("inside single result.next" + rs1.getString("stat_type")); //12-04-2022 dns preview issue
//                                System.out.println("inside single result.next" + rs1.getString("status"));
//                                if (rs1.getString("status").contains("reject")) {
//                                    System.out.println("inside single condition match");
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("authMobile", rs.getString("mobile"));
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (whichform.equalsIgnoreCase("EMAILDEACTIVATE")) {

                String table = "email_deact_registration";
                String sql = "select * from " + table + " where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_pemail1", rs.getString("preferred_email1"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("prvw_under_sec_name", rs.getString("under_sec_name"));
                        prvwdetails.put("prvw_under_sec_desig", rs.getString("under_sec_desig"));
                        prvwdetails.put("prvw_under_sec_mobile", rs.getString("under_sec_mobile"));
                        prvwdetails.put("prvw_under_sec_email", rs.getString("under_sec_email"));
                        prvwdetails.put("prvw_under_sec_telephone", rs.getString("under_sec_telephone"));
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
////                                System.out.println("inside single result.next" + rs1.getString("stat_type")); //12-04-2022 dns preview issue
//                                System.out.println("inside single result.next" + rs1.getString("status"));
//                                if (rs1.getString("status").contains("reject")) {
//                                    System.out.println("inside single condition match");
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("authMobile", rs.getString("mobile"));
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                    }
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (this.whichform.equalsIgnoreCase("wifiport")) {
                System.out.println("inside wifiport");
                String sql = "select * from wifiport_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        //prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_purpose", rs.getString("purpose"));
                        pst = conSlave.prepareStatement("select sourceIP,destinationIP,service,ports,action,timeperiod from wifiport_entries where registration_no=?");
                        pst.setString(1, refno);
                        rs4 = pst.executeQuery();
                        String sourceIP = "";
                        String destinationIP = "";
                        String service = "";
                        String ports = "";
                        String action = "";
                        String timeperiod = "";
                        while (rs4.next()) {
                            sourceIP = sourceIP + rs4.getString("sourceIP").concat(";");
                            destinationIP = destinationIP + rs4.getString("destinationIP").concat(";");
                            service = service + rs4.getString("service").concat(";");
                            ports = ports + rs4.getString("ports").concat(";");
                            action = action + rs4.getString("action").concat(";");
                            timeperiod = timeperiod + rs4.getString("timeperiod").concat(";");
                        }
                        if (sourceIP.length() > 0) {
                            sourceIP = sourceIP.substring(0, sourceIP.length() - 1);
                            destinationIP = destinationIP.substring(0, destinationIP.length() - 1);
                            service = service.substring(0, service.length() - 1);
                            ports = ports.substring(0, ports.length() - 1);
                            action = action.substring(0, action.length() - 1);
                            timeperiod = timeperiod.substring(0, timeperiod.length() - 1);
                            pst.close();
                            rs4.close();
                        }
                        prvwdetails.put("sourceIP", sourceIP);
                        prvwdetails.put("destinationIP", destinationIP);
                        prvwdetails.put("service", service);
                        prvwdetails.put("ports", ports);
                        prvwdetails.put("action", action);
                        prvwdetails.put("timeperiod", timeperiod);
                        pst = null;
                        String sql1 = "select * from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
                        pst = conSlave.prepareStatement(sql1);
                        pst.setString(1, refno);
                        rs1 = pst.executeQuery();
                        while (rs1.next()) {
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        json = (new Gson()).toJson(prvwdetails);

                        System.out.println("prvwdetails for wifiport:::::::::::::::::::" + prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (this.whichform.equalsIgnoreCase("centralutm")) {
                System.out.println("inside central utm");
                String sql = "select * from centralutm_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        //prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));
                        prvwdetails.put("prvw_purpose", rs.getString("purpose"));
                        pst = conSlave.prepareStatement("select sourceIP,destinationIP,service,ports,action,timeperiod from firewall_entries where registration_no=?");
                        pst.setString(1, refno);
                        rs4 = pst.executeQuery();
                        String sourceIP = "";
                        String destinationIP = "";
                        String service = "";
                        String ports = "";
                        String action = "";
                        String timeperiod = "";
                        while (rs4.next()) {
                            sourceIP = sourceIP + rs4.getString("sourceIP").concat(";");
                            destinationIP = destinationIP + rs4.getString("destinationIP").concat(";");
                            service = service + rs4.getString("service").concat(";");
                            ports = ports + rs4.getString("ports").concat(";");
                            action = action + rs4.getString("action").concat(";");
                            timeperiod = timeperiod + rs4.getString("timeperiod").concat(";");
                        }
                        if (sourceIP.length() > 0) {
                            sourceIP = sourceIP.substring(0, sourceIP.length() - 1);
                            destinationIP = destinationIP.substring(0, destinationIP.length() - 1);
                            service = service.substring(0, service.length() - 1);
                            ports = ports.substring(0, ports.length() - 1);
                            action = action.substring(0, action.length() - 1);
                            timeperiod = timeperiod.substring(0, timeperiod.length() - 1);
                            pst.close();
                            rs4.close();
                        }
                        prvwdetails.put("sourceIP", sourceIP);
                        prvwdetails.put("destinationIP", destinationIP);
                        prvwdetails.put("service", service);
                        prvwdetails.put("ports", ports);
                        prvwdetails.put("action", action);
                        prvwdetails.put("timeperiod", timeperiod);
                        pst = null;
                        String sql1 = "select * from status where stat_reg_no=? ORDER BY stat_createdon DESC limit 1";
                        pst = conSlave.prepareStatement(sql1);
                        pst.setString(1, refno);
                        rs1 = pst.executeQuery();
                        while (rs1.next()) {
                            session.put("prvwdetails", prvwdetails);
                            session.put("profile_present", "true");
                        }
                        json = (new Gson()).toJson(prvwdetails);

                        System.out.println("prvwdetails for central utm:::::::::::::::::::" + prvwdetails);
                        ServletActionContext.getResponse().setContentType("application/json");
                        ServletActionContext.getResponse().getWriter().write(json);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (whichform.equalsIgnoreCase("daonboarding")) {
                String sql = "select * from daonboarding_registration where registration_no=?";
                pst = null;
                String json = null;
                try {
                    pst = conSlave.prepareStatement(sql);
                    pst.setString(1, refno);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + "query in preview function: " + pst);

                    rs = pst.executeQuery();
                    while (rs.next()) {
                        prvwdetails.put("hod_name", rs.getString("hod_name"));
                        prvwdetails.put("hod_email", rs.getString("hod_email"));
                        //isHodLdapEmployee = ldap.emailValidate(rs.getString("hod_email"));
                        isHodLdapEmployee = userdata.getHodData().isGovEmployee();
                        if (isHodLdapEmployee && (role.equals("user") || role.equals("ca"))) {
                            String ROstartMobile = rs.getString("hod_mobile").substring(0, 3);
                            String ROendMobile = rs.getString("hod_mobile").substring(10, 13);
                            String hodMobile = ROstartMobile + "XXXXXXX" + ROendMobile;
                            prvwdetails.put("hod_mobile", hodMobile);

                        } else {
                            prvwdetails.put("hod_mobile", rs.getString("hod_mobile"));
                        }
                        prvwdetails.put("hod_tel", rs.getString("hod_telephone"));
                        prvwdetails.put("ca_design", rs.getString("ca_desig"));
                        prvwdetails.put("prvw_offname", rs.getString("auth_off_name"));
                        prvwdetails.put("prvw_desig", rs.getString("designation"));
                        prvwdetails.put("prvw_address", rs.getString("address"));
                        prvwdetails.put("prvw_city", rs.getString("city"));
                        prvwdetails.put("prvw_addstate", rs.getString("add_state"));
                        prvwdetails.put("prvw_pin", rs.getString("pin"));
                        prvwdetails.put("prvw_ophone", rs.getString("ophone"));
                        prvwdetails.put("prvw_rphone", rs.getString("rphone"));
                        prvwdetails.put("prvw_mobile", rs.getString("mobile"));
                        prvwdetails.put("prvw_authemail", rs.getString("auth_email"));
                        prvwdetails.put("prvw_empcode", rs.getString("emp_code"));
                        prvwdetails.put("prvw_employment", rs.getString("employment"));
                        prvwdetails.put("prvw_ministry", rs.getString("ministry"));
                        prvwdetails.put("prvw_department", rs.getString("department"));
                        prvwdetails.put("prvw_state_dept", rs.getString("other_dept"));
                        prvwdetails.put("prvw_state", rs.getString("state"));
                        prvwdetails.put("prvw_org", rs.getString("organization"));

                        prvwdetails.put("prvw_uploaded_filename", rs.getString("uploaded_filename"));
                        prvwdetails.put("prvw_vpn_reg_no", rs.getString("vpn_reg_no"));
                        prvwdetails.put("prvw_bo_name", rs.getString("bo_name"));
                        prvwdetails.put("form_name", whichform);
                        prvwdetails.put("role", role);
                        prvwdetails.put("daon_mobile", rs.getString("check_box"));
                        prvwdetails.put("eligibility", rs.getString("eligibility"));
//                            pst = null;
//                            String sql1 = "select status from final_audit_track where registration_no=?";
//                            pst = conSlave.prepareStatement(sql1);
//                            pst.setString(1, refno);
//                            rs1 = pst.executeQuery();
//                            while (rs1.next()) {
//                                if (rs1.getString("status").contains("reject")) {
//                                    session.put("resend_request", "true");
//                                } else {
//                                    session.put("resend_request", "false");
//                                }
//                            }
                        session.put("resend_request", "false");
                        session.put("prEmployment", rs.getString("employment"));
                        session.put("prMinistry", rs.getString("ministry"));
                        session.put("prDepartment", rs.getString("department"));
                        session.put("prState", rs.getString("state"));
                        session.put("prStateDepartment", rs.getString("department"));
                        session.put("prOrganization", rs.getString("organization"));

                        session.put("authMobile", rs.getString("mobile"));;
                        session.put("prvwdetails", prvwdetails);
                        session.put("profile_present", "true");
                        session.put("uploaded_filename", rs.getString("uploaded_filename"));
                        session.put("renamed_filepath", rs.getString("renamed_filepath"));
                    }
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PREVIEW: " + prvwdetails);
                    json = new Gson().toJson(prvwdetails);
                    ServletActionContext.getResponse().setContentType("application/json");
                    ServletActionContext.getResponse().getWriter().write(json);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserTrack.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(UserTrack.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs2 != null) {
                try {
                    rs2.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs3 != null) {
                try {
                    rs3.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs4 != null) {
                try {
                    rs4.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public boolean fisValidUserBackup26102022(String registrationNumber, String email, String role, String filter, Set<String> s) {
        // UserData userdata = (UserData) session.get("uservalues");
        // Set<String> s = (Set<String>) userdata.getAliases();
        boolean isValid = false;
        PreparedStatement ps = null;
        ResultSet res = null;

        try {
            conSlave = DbConnection.getSlaveConnection();
            String sEmail = "";
            String qry = "SELECT count(*) FROM final_audit_track WHERE registration_no = '" + registrationNumber + "'";

            System.out.println(printlog + "filter###########" + filter);

            if (filter.equals("toEdit")) {
                if (!(role.equals("admin") || role.equals("sup"))) {
                    qry += " AND ((";
                }

                if (role.equals("admin")) {
                    sEmail = "to_email";
                } else if (role.equals("sup")) {
                    sEmail = "support_email";
                } else if (role.equals("ca")) {
                    sEmail = "ca_email";
                    for (String emailAddress : s) {
                        qry += sEmail + " = '" + emailAddress + "' OR ";
                    }
                } else if (role.equals("co")) {
                    sEmail = "coordinator_email";
                    for (String emailAddress : s) {
                        qry += sEmail + " like '%" + emailAddress + "%' OR ";
                    }
                } else if (role.equals("user")) {
                    sEmail = "applicant_email";
                    for (String emailAddress : s) {
                        qry += sEmail + " = '" + emailAddress + "' OR ";
                    }
                }

                qry = qry.replaceAll("\\s*OR\\s*$", "");

                if (role.equals("admin")) {
                    qry += " AND status = 'mail-admin_pending'";
                } else if (role.equals("sup")) {
                    qry += " AND (status = 'coordinator_pending' OR status= 'support_pending')";
//                    for (String emailAddress : s) {
//                        qry += "to_email = '" + emailAddress + "' OR ";
//                    }
                    //qry = qry.replaceAll("\\s*OR\\s*$", "");

//                    qry += " ) ";
                } else if (role.equals("ca")) {
                    qry += " ) AND status = 'coordinator_pending') OR (status= 'ca_pending' AND ( ";
                    for (String emailAddress : s) {
                        qry += "to_email = '" + emailAddress + "' OR ";
                    }
                    qry = qry.replaceAll("\\s*OR\\s*$", "");

                    qry += " )) ";
                } else if (role.equals("co")) {
                    qry += " ) AND status = 'mail-admin_pending') OR (status= 'coordinator_pending' AND ( ";
                    for (String emailAddress : s) {
                        qry += "to_email = '" + emailAddress + "' OR ";
                    }
                    qry = qry.replaceAll("\\s*OR\\s*$", "");

                    qry += " )) ";
                } else if (role.equals("user")) {
                    qry += " ) AND (status = 'ca_pending' OR status = 'manual_upload' OR status = 'api' OR status = 'domainapi'))";
                }
            } else if (!(role.equals("admin") || role.equals("sup"))) {
                qry += " AND (";

                for (String emailAddress : s) {
                    qry += " to_email  like '%" + emailAddress + "%' OR applicant_email = '" + emailAddress + "' OR ca_email = '" + emailAddress + "' OR coordinator_email like '%" + emailAddress + "%' OR ";
                }

                qry = qry.replaceAll("\\s*OR\\s*$", "");

                qry += ")";
            }
            System.out.println(printlog + "QUERY for validating user against registration number : " + qry);
            ps = conSlave.prepareStatement(qry);

            res = ps.executeQuery();
            while (res.next()) {
                if (res.getInt("count(*)") > 0) {
                    isValid = true;
                }
            }
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside get status rows  " + " - " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res != null) {
                try {
                    res.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return isValid;
    }

    public boolean fisValidUser(String registrationNumber, String email, String role, String filter, Set<String> s) {
        boolean isValid = false;
        PreparedStatement ps = null;
        ResultSet res = null;
        String aliases = "";

        for (String emailAddress : s) {
            aliases += "'" + emailAddress + "',";
        }

        aliases = aliases.replaceAll(",$", "");

        try {
            conSlave = DbConnection.getSlaveConnection();
            String qry = "SELECT count(*) FROM final_audit_track WHERE registration_no = '" + registrationNumber + "' and to_email in (" + aliases + ")";

            if (role.equals("admin")) {
                qry += " AND status = 'mail-admin_pending'";
            } else if (role.equals("sup")) {
                qry += " AND status= 'support_pending'";
            } else if (role.equals("ca")) {
                qry += " AND status = 'ca_pending'";
            } else if (role.equals("co")) {
                qry += " AND status= 'coordinator_pending'";
            } else if (role.equals("user")) {
                qry += " AND (status like 'manual%' OR status = 'api' OR status = 'domainapi')";
            }

            System.out.println(printlog + "QUERY for checking is the request editable : " + qry);
            ps = conSlave.prepareStatement(qry);
            res = ps.executeQuery();
            while (res.next()) {
                if (res.getInt("count(*)") > 0) {
                    isValid = true;
                }
            }

            if (!isValid) {
                qry = "SELECT count(*) FROM final_audit_track WHERE registration_no = '" + registrationNumber + "'";

                if (role.equals("admin")) {
                    qry += " AND status = 'mail-admin_pending'";
                } else if (role.equals("sup")) {
                    qry += " AND status= 'support_pending'";
                } else if (role.equals("co")) {
                    qry += " AND status= 'coordinator_pending'";
                }

                if (role.equals("admin") || role.equals("sup") || role.equals("co")) {
                    qry += " AND (";
                    for (String emailAddress : s) {
                        aliases += "to_email like '%" + emailAddress + "%' OR ";
                    }

                    aliases = aliases.replaceAll("\\s*OR\\s*$", "");
                    qry += aliases + ")";
                }

                System.out.println(printlog + "QUERY for checking is the request editable inside if : " + qry);
                ps = conSlave.prepareStatement(qry);
                res = ps.executeQuery();
                while (res.next()) {
                    if (res.getInt("count(*)") > 0) {
                        isValid = true;
                    }
                }
            }
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside get status rows  " + " - " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res != null) {
                try {
                    res.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return isValid;
    }

    public boolean isRequestEditable(String registrationNumber, String email, String role, String filter, Set<String> s) {
        String status = "";
        PreparedStatement ps = null;
        ResultSet res = null;
        boolean isEditable = false;

        if (role.equalsIgnoreCase("ca")) {
            status = "ca_pending";
        } else if (role.equalsIgnoreCase("co")) {
            status = "coordinator_pending";
        } else if (role.equalsIgnoreCase("sup")) {
            status = "support_pending";
        } else if (role.equalsIgnoreCase("admin")) {
            status = "mail-admin_pending";
        }

        try {
            conSlave = DbConnection.getSlaveConnection();
            String qry = "SELECT * FROM final_audit_track WHERE registration_no = ?";
            ps = conSlave.prepareStatement(qry);
            ps.setString(1, registrationNumber);
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde user track fetchStatusAdmins query is: " + ps);
            res = ps.executeQuery();
            if (res.next()) {
                if (res.getString("status").toLowerCase().contains("reject") || res.getString("status").toLowerCase().contains("cancel") || res.getString("status").toLowerCase().contains("complete")) {
                    isEditable = false;
                } else if (!role.equalsIgnoreCase("user") && res.getString("status").equalsIgnoreCase(status)) {
                    for (String mail : s) {
                        if (res.getString("to_email").contains(mail)) {
                            isEditable = true;
                            break;
                        }
                    }
                } else if (role.equalsIgnoreCase("user") && (res.getString("status").equalsIgnoreCase("domainapi") || res.getString("status").equalsIgnoreCase("manual_upload") || res.getString("status").equalsIgnoreCase("manual") || res.getString("status").equalsIgnoreCase("api"))) {
                    for (String mail : s) {
                        if (res.getString("to_email").contains(mail) || res.getString("applicant_email").contains(mail)) {
                            isEditable = true;
                            break;
                        }
                    }
                } else {
                    isEditable = false;
                }
            }
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside get status rows  " + " - " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res != null) {
                try {
                    res.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return isEditable;
    }

    public Boolean isRegistrationNumberAllowed(String aliasesInString, List<String> roles, ArrayList<String> formsAllowed, Set<String> aliases, String regNumber) {
        String qry = "";
        String finalFormNames = "";
        for (String formName : formsAllowed) {
            finalFormNames += formName + ",";
        }
        System.out.println("Roles :::::" + roles.toString());
        finalFormNames = finalFormNames.replaceAll(",$", "").trim();

        //roles = Arrays.asList("user","ca");
        if (roles.contains("sup") || roles.contains("admin")) {
            System.out.println("Inside sup or admin role ...");
            qry = "SELECT registration_no FROM final_audit_track where registration_no=? and form_name in (" + finalFormNames + ")";
            System.out.println("FOR SUPORT OR ADMIN ::: " + qry);
            try {
                conSlave = DbConnection.getSlaveConnection();
                PreparedStatement ps = conSlave.prepareStatement(qry);
                ps.setString(1, regNumber);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    return true;
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else if (!roles.contains("email_co")) {
            System.out.println("Inside co or ro role ... else block");
            try {
                conSlave = DbConnection.getSlaveConnection();
                qry = "SELECT registration_no FROM final_audit_track where registration_no=? and (to_email in (" + aliasesInString + ") or applicant_email in (" + aliasesInString + ") or ca_email in (" + aliasesInString + ") or coordinator_email in (" + aliasesInString + "))";
                PreparedStatement ps = conSlave.prepareStatement(qry);
                ps.setString(1, regNumber);
                System.out.println("FOR OTHER ROLES :::: " + qry);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    return true;
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                qry = "SELECT registration_no FROM final_audit_track where registration_no=? and co_id=0 and (to_email in (" + aliasesInString + ") or ca_email in (" + aliasesInString + ") or coordinator_email in (" + aliasesInString + "))";  //31-10-2022
                PreparedStatement ps = conSlave.prepareStatement(qry);
                ps.setString(1, regNumber);
                System.out.println("FOR CO ROLES :::: " + qry);
                ResultSet rs = ps.executeQuery();
                String to_email = "";
                while (rs.next()) {
                    return true;
                }
                qry = "SELECT to_email FROM final_audit_track where registration_no=? and co_id>0 and (ca_email in (" + aliasesInString + ") or coordinator_email in (" + aliasesInString + "))";  //31-10-2022
                ps = conSlave.prepareStatement(qry);
                ps.setString(1, regNumber);
                System.out.println("FOR CO ROLES 2nd query co_id > 0 :::: " + qry);
                rs = ps.executeQuery();
                while (rs.next()) {
                    to_email = rs.getString("to_email");

                    for (String aliase : aliases) {
                        if (to_email.contains(aliase)) {
                            return true;
                        }
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        }
        return false;
    }

    public ArrayList<HashMap> fetchStatusAdmins(String reg_no) {
        ArrayList<HashMap> arr = new ArrayList<HashMap>();
        HashMap<String, String> hm = null;
        PreparedStatement ps = null;
        ResultSet res = null;
        Inform infObj = new Inform();
        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde user track fetchStatusAdmins: ");

        //Connection con = null;
        try {
            conSlave = DbConnection.getSlaveConnection();
            String qry = "SELECT stat_type,stat_ip,stat_createdon,stat_forwarded_to_user,stat_forwarded_to,stat_forwarded_by,stat_forwarded_by_name,stat_forwarded_by_mobile,stat_forwarded_by_email,stat_forwarded_by_user FROM status WHERE stat_reg_no = ? ORDER BY stat_id ASC ";
            ps = conSlave.prepareStatement(qry);
            ps.setString(1, reg_no);
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde user track fetchStatusAdmins query is: " + ps);
            res = ps.executeQuery();
            String submitted_by = "", detail = "", submitted_to = "", status = "", date = "", ip = "", fwdToEmail = "";
            ArrayList ldapArr = null;
            while (res.next()) {
                submitted_by = "";
                detail = "";
                submitted_to = "";
                status = "";
                date = "";
                ip = "";
                fwdToEmail = "";
                hm = new HashMap<String, String>();
                status = fetchStatTypeString(res.getString("stat_type"));
                ip = res.getString("stat_ip");
                date = res.getString("stat_createdon");
                if (res.getString("stat_forwarded_to_user") != null) {
                    submitted_to = res.getString("stat_forwarded_to_user");
                    if (res.getString("stat_forwarded_to") != null && res.getString("stat_forwarded_to").equalsIgnoreCase("ca") && res.getString("stat_forwarded_to_user") != null) {
                        //ldapArr = infObj.fetchCADetail(res.getString("stat_forwarded_to_user"));
                        ldapArr = infObj.fetchCADetail(reg_no);// above line modified by pr on 3rddec19
                        if (ldapArr != null && ldapArr.size() > 0) {
                            submitted_to = ldapArr.get(0).toString();
                        }
                    }
                }
                if (res.getString("stat_forwarded_by") != null) {
                    submitted_by = fetchForwardedToBy(res.getString("stat_forwarded_by"), "");
                }
                //if (submitted_by.equals("a")) {
                if (submitted_by.equals("") || submitted_by.equals("-")) { // line modified by pr on 21tsjan19
                    submitted_by = "User";
                }
                System.out.println(printlog + " submitted_by value is " + submitted_by);
                // get the details for submitted by column
                String by_name = "", by_email = "", by_mobile = "";
                // if these values exist in these columns then fetch from there
                if (res.getString("stat_forwarded_by_name") != null && !res.getString("stat_forwarded_by_name").equals("")) {
                    by_name = res.getString("stat_forwarded_by_name");
                }
                if (res.getString("stat_forwarded_by_email") != null && !res.getString("stat_forwarded_by_email").equals("")) {
                    by_email = res.getString("stat_forwarded_by_email");
                }
                if (res.getString("stat_forwarded_by_mobile") != null && !res.getString("stat_forwarded_by_mobile").equals("")) {
                    by_mobile = res.getString("stat_forwarded_by_mobile");
                }
                // else fetch then from ldap etc
                if (res.getString("stat_forwarded_by") != null && res.getString("stat_forwarded_by_user") != null) {
                    if (by_name.equals("") || by_email.equals("") || by_mobile.equals("")) {
                        if (res.getString("stat_forwarded_by").equals("ca")) {
                            // fetch the details from the comp_auth table
                            ForwardAction fwdObj = new ForwardAction();
                        } else {
                            // fetch the details from the LDAP
                            ldapArr = infObj.fetchLDAPName(res.getString("stat_forwarded_by_user"));
                            if (ldapArr != null && ldapArr.size() > 0)// get the mobile only which is in the second location
                            {
                                if (by_email.equals("") && ldapArr.get(0) != null) {
                                    by_email = ldapArr.get(0).toString();
                                }
                                if (by_mobile.equals("") && ldapArr.get(1) != null) {
                                    by_mobile = ldapArr.get(1).toString();
                                }
                                if (by_name.equals("") && ldapArr.get(3) != null) {
                                    by_name = ldapArr.get(3).toString();
                                }
                            }
                        }
                    }
                }
                String[] detailArr = new String[3];
                int cnt = 0;
                //if (by_email.contains("support")) // if it is a support id either support@gov.in/smssupport@nic.in/support@nkn.in then dont show the mobile
                // above line modified by pr on 2ndjul19
                if (by_email.contains("support") || submitted_by.equalsIgnoreCase("support") || (submitted_by.equalsIgnoreCase("Admin") && by_email.toLowerCase().contains("support"))
                        || (res.getString("stat_forwarded_by_user") != null && res.getString("stat_forwarded_by_user").toLowerCase().contains("support"))) {
                    by_mobile = "";
                }
                if (by_name != null && !by_name.equals("")) {
                    detailArr[cnt] = by_name;
                    cnt++;
                }
                if (by_email != null && !by_email.equals("")) {
                    detailArr[cnt] = by_email;
                    cnt++;
                }
                if (by_mobile != null && !by_mobile.equals("")) {
                    detailArr[cnt] = by_mobile;
                    cnt++;
                }
                //System.out.println(" detail arr value is "+detailArr);
                int i = 1;
                for (String s : detailArr) {
                    //System.out.println(" inside detail arr for loop "+s);
                    if (s != null && !s.equals("")) {
                        if (i == 1) {
                            detail = s;
                        } else {
                            detail += ", " + s;
                        }
                        i++;
                    }
                }
                if (submitted_to.equals("")) {
                    submitted_to = "-";
                }

                System.out.println(printlog + " inside UserTrack fetchStatusAdmins function submitted by value is " + submitted_by + " detail value is " + detail);

                hm.put("submitted_by", submitted_by);
                hm.put("detail", detail);
                hm.put("ip", ip);
                hm.put("submitted_to", submitted_to);
                hm.put("status", status);
                hm.put("date", date);
                arr.add(hm);
            }
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside get status rows  " + " - " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res != null) {
                try {
                    res.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return arr;
    }

    public String fetchForwardedToBy(String value, String email) {
        String stat_type = "-";
        if (value != null && value != "") {
            if (value.equalsIgnoreCase("ca")) {
                stat_type = "Reporting/Nodal/Forwarding Officer";
            } else if (value.equalsIgnoreCase("s")) {
                stat_type = "Support";
            } else if (value.equalsIgnoreCase("c")) {
                stat_type = "Coordinator";
            } else if (value.equalsIgnoreCase("m")) {
                stat_type = "Admin";
            } else if (value.equalsIgnoreCase("d")) {
                stat_type = "DA-Admin";
            } else if (value.equalsIgnoreCase("us")) // else if added by pr on 8thjan19
            {
                stat_type = "Under Secretary";
            }
            if (email != null && email != "") {
                stat_type += "(" + email + ")";
            }
        }
        return stat_type;
    }

    public String genPDF() {
        //String refno = decrypt(getData());
        UserTrackWifi userTrackWifi = new UserTrackWifi();
        String refno = getData();
//
//        Base64.Decoder decoder = Base64.getDecoder();
//        String refno = new String(decoder.decode(getData()));   //String refno = Base64.getDecoder().decode(getData()).toString();        

        ArrayList<String> allowedRegNumbers = (ArrayList) session.get("regNumberAllowed");  // audit by nikki

        if (allowedRegNumbers.contains(refno)) {
            setData(refno);
            session.put("ref", refno);
            whichform = refno.substring(0, refno.indexOf('-'));
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "REF NUM::: " + refno + " Whichform in preview function: " + whichform);
            ResultSet rs = null, rs1 = null, rs2 = null, rs3 = null, rs4 = null;
            PreparedStatement pst = null;
            //Connection con = null;

            try {
                if (whichform.equalsIgnoreCase("sms")) {
                    String sql = "select * from sms_registration where registration_no=?";
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            try {
                                String final_dept;
                                /*switch (rs.getString("employment")) {
                                case "Central":
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization")+ " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization")+ " / " + rs.getString("department");  // other department added by pr on 10thjul19
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }*/

                                // above code modified by pr on 11thjul19
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                    case "Nkn":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                        }
                                        break;
                                    default:
                                        /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }

                                        break;
                                }

                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font smallFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL);
                                Font smallBoldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                header.add(new Paragraph("SMS Services Request Form", boldFont));
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", smallFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", smallFont));// line modified by pr on 18thjan19
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "   Designation* : " + rs.getString("ca_desig"), normalFont));
                                //details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email") + "        7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "         Reporting/Nodal/Forwarding Officer Designation* : " + rs.getString("ca_desig"), normalFont));

                                if (rs.getString("emp_code") == null || rs.getString("emp_code").equals("")) {
                                    details.add(new Paragraph("8) Designation* : " + rs.getString("designation"), normalFont));
                                } else {
                                    details.add(new Paragraph("8) Designation* : " + rs.getString("designation") + "               Employee Code : " + rs.getString("emp_code"), normalFont));
                                }
                                if (rs.getString("rphone") == null || rs.getString("rphone").equals("")) {
                                    details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone"), normalFont));
                                } else {
                                    details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone") + "               Telephone Number(R) : " + rs.getString("rphone"), normalFont));
                                }
                                details.add(new Paragraph("10) Official Address* : " + rs.getString("address"), normalFont));
                                details.add(new Paragraph("11) City* : " + rs.getString("city") + "           State* : " + rs.getString("add_state") + "           Pin Code* : " + rs.getString("pin"), normalFont));
                                if (rs.getString("sms_service").equals("quicksms")) {
                                    details.add(new Paragraph("12) SMS Service required* : quickSMS", normalFont));
                                } else if (rs.getString("sms_service").equals("otp")) {
                                    details.add(new Paragraph("12) SMS Service required* : OTP Service", normalFont));
                                } else {
                                    details.add(new Paragraph("12) SMS Service required* : " + rs.getString("sms_service"), normalFont));
                                }
                                if (!rs.getString("pull_url").equals("") && !rs.getString("pull_keyword").equals("")) {
                                    if (rs.getString("short_note").equals("")) {
                                        details.add(new Paragraph("   a) If PULL, URL path* : " + rs.getString("pull_url") + "               b) Keyword* : " + rs.getString("pull_keyword"), normalFont));
                                    } else {
                                        details.add(new Paragraph("   a) If PULL, URL path* : " + rs.getString("pull_url") + "               b) Keyword* : " + rs.getString("pull_keyword"), normalFont));
                                        details.add(new Paragraph("   c) Short Code* : " + rs.getString("short_note"), normalFont));
                                    }
                                }
                                if (rs.getString("sms_service").equals("quicksms")) {
                                    details.add(new Paragraph("13) Name of the Application : QuickSms" + "               Application URL* : https://quicksms.emailgov.in/", normalFont));
                                    details.add(new Paragraph("14) Server Location : Shastri Park" + "               Purpose of the application : NIC Web Console to send SMS", normalFont));
                                    details.add(new Paragraph("15) IP form which quicksms will be access : IP1* : " + rs.getString("base_ip") + "               IP2 : " + rs.getString("service_ip"), normalFont));
                                } else {
                                    details.add(new Paragraph("13) Name of the Application* : " + rs.getString("app_name") + "               Application URL* : " + rs.getString("app_url"), normalFont));
                                    if (rs.getString("server_loc").equals("Other")) {
                                        details.add(new Paragraph("14) Server Location* : " + rs.getString("server_loc_other") + "               Purpose of the application : " + rs.getString("sms_usage"), normalFont));
                                    } else {
                                        details.add(new Paragraph("14) Server Location* : " + rs.getString("server_loc") + "               Purpose of the application : " + rs.getString("sms_usage"), normalFont));
                                    }
                                    details.add(new Paragraph("15) IP form which SMS Gateway will be access : IP1* : " + rs.getString("base_ip") + "               IP2 : " + rs.getString("service_ip"), normalFont));
                                }
                                if (rs.getString("staging_ip").equals("")) {
                                    details.add(new Paragraph("16) IP of Staging Server Required for Testing : NA ", normalFont));
                                } else {
                                    details.add(new Paragraph("16) IP of Staging Server Required for Testing : " + rs.getString("staging_ip"), normalFont));
                                }
                                if (rs.getString("inter_traffic").equals("")) {
                                    details.add(new Paragraph("17) Projected Domestic Monthly SMS traffic* : " + rs.getString("domestic_traffic") + "               Projected International Monthly SMS traffic : NA", normalFont));
                                } else {
                                    details.add(new Paragraph("17) Projected Domestic Monthly SMS traffic : " + rs.getString("domestic_traffic") + "               Projected International Monthly SMS traffic : " + rs.getString("inter_traffic"), normalFont));
                                }
                                if (rs.getString("sms_service").equals("quicksms")) {
                                } else if (rs.getString("audit").equals("No")) {
                                    details.add(new Paragraph("18) Application security audit cleared* : " + rs.getString("audit") + "               Audit Date by when it will be cleared : " + rs.getString("audit_date"), normalFont));
                                } else {
                                    details.add(new Paragraph("18) Application security audit cleared* : " + rs.getString("audit"), normalFont));
                                }
                                if (rs.getString("flag_sender").equals("Yes")) {
                                    details.add(new Paragraph("19) Do you have TRAI exempted Sender Id* : " + rs.getString("flag_sender") + "               Sender ID : " + rs.getString("sender_id"), normalFont));
                                } else {
                                    details.add(new Paragraph("19) Do you have TRAI exempted Sender Id* : " + rs.getString("flag_sender"), normalFont));
                                }
                                details.add(new Paragraph(""));
                                details.add(new Paragraph("Technical Admin Details: ", boldFont));
                                details.add(new Paragraph("20) Name* : " + rs.getString("tech_name"), normalFont));
                                details.add(new Paragraph("21) Email* : " + rs.getString("tech_email") + "               22) Mobile : " + rs.getString("tech_mobile"), normalFont));
                                if (rs.getString("tech_emp_code") == null || rs.getString("tech_emp_code").equals("")) {
                                    details.add(new Paragraph("23) Designation* : " + rs.getString("tech_desig") + "               Employee Code : " + rs.getString("tech_emp_code"), normalFont));
                                } else {
                                    details.add(new Paragraph("23) Designation* : " + rs.getString("tech_desig") + "               Employee Code : " + rs.getString("tech_emp_code"), normalFont));
                                }
                                if (rs.getString("tech_ophone") == null || rs.getString("tech_ophone").equals("")) {
                                    details.add(new Paragraph("24) Telephone Number(O)* : " + rs.getString("tech_ophone"), normalFont));
                                } else {
                                    details.add(new Paragraph("24) Telephone Number(O)* : " + rs.getString("tech_ophone") + "               Telephone Number(R) : " + rs.getString("tech_rphone"), normalFont));
                                }
                                details.add(new Paragraph("25) Official Address* : " + rs.getString("tech_address"), normalFont));
                                details.add(new Paragraph("26) City* : " + rs.getString("tech_city") + "           State* : " + rs.getString("tech_state") + "           Pin Code* : " + rs.getString("tech_pin"), normalFont));
                                details.add(new Paragraph(""));
                                details.add(new Paragraph("Billing Owner Details: ", boldFont));
                                details.add(new Paragraph("27) Name* : " + rs.getString("bowner_name"), normalFont));
                                details.add(new Paragraph("28) Email* : " + rs.getString("bowner_email") + "               29) Mobile : " + rs.getString("bowner_mobile"), normalFont));
                                if (rs.getString("bowner_emp_code") == null || rs.getString("bowner_emp_code").equals("")) {
                                    details.add(new Paragraph("30) Designation* : " + rs.getString("bowner_desig") + "               Employee Code : " + rs.getString("bowner_emp_code"), normalFont));
                                } else {
                                    details.add(new Paragraph("30) Designation* : " + rs.getString("bowner_desig") + "               Employee Code : " + rs.getString("bowner_emp_code"), normalFont));
                                }
                                if (rs.getString("bowner_ophone") == null || rs.getString("bowner_ophone").equals("")) {
                                    details.add(new Paragraph("31) Telephone Number(O)* : " + rs.getString("bowner_ophone"), normalFont));
                                } else {
                                    details.add(new Paragraph("31) Telephone Number(O)* : " + rs.getString("bowner_ophone") + "               Telephone Number(R) : " + rs.getString("bowner_rphone"), normalFont));
                                }
                                details.add(new Paragraph("32) Official Address* : " + rs.getString("bowner_address"), normalFont));
                                details.add(new Paragraph("32) City* : " + rs.getString("bowner_city") + "           State* : " + rs.getString("bowner_state") + "           Pin Code* : " + rs.getString("bowner_pin"), normalFont));
                                // document.newPage();
                                details.add(new Paragraph("*Application must be on HTTPS due to security policy.", smallBoldFont));
                                details.add(new Paragraph("*The application will be suspended if security audit certificate is not submitted within the date mentioned above.", smallBoldFont));
                                document.add(details);
                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("  Signature of the Reporting/Nodal/Forwarding Officer with date and seal", normalFont));
                                footer.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer);
                                document.add(emptypara);
                                Paragraph billing = new Paragraph();
                                PdfPTable table_user = new PdfPTable(1);
                                PdfPCell cell1 = new PdfPCell(new Paragraph("FOR OFFICE USE", boldFont));
                                cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell1.setBackgroundColor(Color.GRAY);
                                table_user.addCell(cell1);
                                billing.add(table_user);
                                // line commented by MI,suggested by Taha sir
//                        billing.add(new Paragraph("Account Category: Free", normalFont));
//                        billing.add(new Paragraph("NIC Will Not Charge: " + " Apex Org (O/o President/Vice President/Parliament/Cabinet Sectt.)/ PMO/NIC/DeitY", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("Email:________________________________", normalFont));
                                billing.add(new Paragraph("Telephone:____________________________Name & Designation:____________________________", normalFont));
                                billing.add(new Paragraph("Mobile:_______________________________", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("Signature of NIC Coordinator/Reporting/Nodal/Forwarding Officer/SIO with seal:_______________________________", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("Billing Division(NICSI):", boldFont));
                                billing.add(new Paragraph("File Number:________________________________", normalFont));
                                billing.add(new Paragraph("Payment Processed: Yes/ No:____________________________ ", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("Signature"));
                                document.add(billing);
                                document.newPage();
                                Paragraph tnc = new Paragraph();
                                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                                tnc.setAlignment(header.ALIGN_CENTER);
                                document.add(tnc);
                                document.add(emptypara);
                                Paragraph tncpoints = new Paragraph();
                                tncpoints.add(new Paragraph("1. The ID provided to you is for a single application ONLY. If a user department/division wishes to integrate additional applications with the NIC SMS Gateway, then an id pertaining to that application needs to be created. Id created for application A cannot be used for application B. The user department needs to contact NIC for creation of the id for application B. Any violation detected by the user department will result in termination of the application integration. It is the responsibility of undersigned to ensure the same.", normalFont));
                                tncpoints.add(new Paragraph("2. The authorized officer is the officer at the level of undersecretary or above working in Ministries/Departments/Statutory Bodies/Autonomous Bodies of both Central and State/UT Governments.", normalFont));
                                tncpoints.add(new Paragraph("3. Concerned Department/Ministry shall be solely responsible for all the information, contents, data send and received using NIC SMS gateway under this agreement. Concerned Department/Ministry further acknowledges that it shall be solely responsible and undertake to maintain complete authenticity of the information/data sent and/or received and takes all possible steps and measures to ensure that consistent authentic information is transmitted.", normalFont));
                                tncpoints.add(new Paragraph("4. Concerned Department/ Ministry shall be solely responsible at its own costs and expenses for obtaining and maintaining all necessary approvals, sanctions, permissions, and licenses as for sending and receiving SMS from the relevant authorities and/or regulatory bodies, as the case may be.", normalFont));
                                tncpoints.add(new Paragraph("5. International SMS will only be given after approval from Reporting/Nodal/Forwarding Officer.", normalFont));
                                tncpoints.add(new Paragraph("6. NIC reserves the right to change any parameter relating integration of application and changing criteria of SMS sent.", normalFont));
                                tncpoints.add(new Paragraph("7. NIC will not share the details regarding the traffic or id details with anyone without the due authorization from the Reporting/Nodal/Forwarding Officer of the concerned department", normalFont));
                                tncpoints.add(new Paragraph("8. Concerned Department/ Ministry shall , at all times during the Term, fully comply with the regulations and directions issued by TRAI (Telecom Regulatory Authority of India) and the Department of Telecommunications, Government of India, from time to time relating to the duties and obligations of the other service provider under the Agreement", normalFont));
                                tncpoints.add(new Paragraph("9. Concerned Department/ Ministry undertakes that it shall be fully responsible and liable for clearance of, in relation to third party, all rights including, but not limited to, copyrights, right to privacy / publicity, etc. in relation to the publicity undertaken by Concerned Department/Ministry as well as acquiring, propagating, publicizing, sharing and/or using the requisite intellectual property rights including trademark and copyrights of any third party for the SMSÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢s being transmitted by NIC SMS Gateway.", normalFont));
                                tncpoints.add(new Paragraph("10. Concerned Department/Ministry shall keep the account information such as userid, password provided, obtained from SMS gateway operations in safe custody to avoid any misuse by unauthorized users.", normalFont));
                                tncpoints.add(new Paragraph("11. Any unauthorized commercial use of the services is expressly prohibited and concerned Department/Ministry shall be solely responsible for all acts or omissions that occur under its account or password, including the content of any transmissions through the services and the concerned Department/ Ministry shall strictly not: ", normalFont));
                                tncpoints.add(new Paragraph("    a) Use the service in connection with junk Short Messages, spamming or any unsolicited Short Messages (commercial or otherwise).", normalFont));
                                tncpoints.add(new Paragraph("    b) Harvest or otherwise collect information about others, including email addresses, without their consent.", normalFont));
                                tncpoints.add(new Paragraph("    c) Create a false identity mobile phone address or header, or otherwise attempt to mislead others as to the identity of the sender or the origin of the message.", normalFont));
                                tncpoints.add(new Paragraph("    d) Transmit through the Service, associated with the Service or publishing with the Service unlawful, harassing, libelous, abusive, threatening, harmful, vulgar, obscene or otherwise objectionable material of any kind or nature.", normalFont));
                                tncpoints.add(new Paragraph("    e) Transmit any material that may infringe the intellectual property rights or other rights of third parties, including trademark, copyright or right of publicity.", normalFont));
                                tncpoints.add(new Paragraph("    f) Libel, defame or slander any person, or infringe upon any person's privacy rights.", normalFont));
                                tncpoints.add(new Paragraph("    g) Transmit any material that contains viruses, Trojan horses, worms, time bombs; cancel bots, or any other harmful or deleterious programs.", normalFont));
                                tncpoints.add(new Paragraph("    h) Interfere with or disrupt networks connected to the Service or violate the regulations, policies or procedures of such networks.", normalFont));
                                tncpoints.add(new Paragraph("    i) Attempt to gain unauthorized access to the Service, other accounts, computer systems or networks connected to the Service, through password mining or any other means.", normalFont));
                                tncpoints.add(new Paragraph("    j) Interfere with another user's use and enjoyment of the Service or another entity's use and enjoyment of similar services or engage in any other activity that SMS Service Providers believes could subject it to criminal liability or civil penalty or judgment. Concerned Department/ Ministry is fully responsible for the content sent through Short Messages from their respective application or otherwise.", normalFont));
                                tncpoints.add(new Paragraph("    k) Send any Short Messages to any numbers listed under ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¹Ã…â€œDo Not DisturbÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ category.", normalFont));
                                tncpoints.add(new Paragraph("12. The user agrees to transfer a 6-month advance payment to NICSI based on the projected traffic prior to integration of the application.", normalFont));
                                tncpoints.add(new Paragraph("13. SMS Support shall share the billable SMS count. If the undersigned does not give go-ahead/raise query within 05 working days, it will be assumed that the SMS count is certified for bill realization.", normalFont));
                                tncpoints.add(new Paragraph("14. The list of chargeable error codes are placed at http://sms.gov.in.", normalFont));
                                tncpoints.add(new Paragraph("15. NIC does not capture any aadhaar related information.", normalFont));
                                tncpoints.add(new Paragraph("16. The department shall abide by the payment terms and conditions of NICSI at all time during and after the usage of SMS gateway services and shall pay all outstanding dues if any.", normalFont));
                                tncpoints.setAlignment(header.ALIGN_LEFT);
                                document.add(tncpoints);
                                document.add(emptypara);
                                // below function call added by pr on 3rdjan19, table created with status flow
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF SMS exception: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF SMS exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase("dns")) {
                    String sql = "select * from dns_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<>();
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            try {
                                String final_dept;
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                    case "Nkn":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                        }
                                        break;
                                    default:
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }

                                        break;
                                }

                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                if (rs.getString("req_for").equals("req_modify")) {
                                    header.add(new Paragraph("MODIFY DNS Entry Request Form", boldFont));
                                } else if (rs.getString("req_for").equals("req_delete")) {
                                    header.add(new Paragraph("DNS Entry DELETE Request Form", boldFont));
                                } else {
                                    header.add(new Paragraph("NEW DNS Entry Request Form", boldFont));
                                }
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont)); // line modified by pr on 18thjan19
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "   Designation* : " + rs.getString("ca_desig"), normalFont));
                                if (!dnsservice.isNewRequestCompleteCheck(refno, rs.getString("req_other_record"))) {
                                    details.add(new Paragraph("8) DNS Entry Details : ", normalFont));
                                    if (rs.getString("form_type").equals("dns_single")) {
                                        pst = conSlave.prepareStatement("select dns_url from dns_registration_url where registration_no=?");
                                        pst.setString(1, refno);
                                        rs1 = pst.executeQuery();
                                        String url = "";
                                        while (rs1.next()) {
                                            url += rs1.getString("dns_url").concat(";");
                                        }
                                        if (url.length() > 0) {
                                            String domain_url = url.substring(0, url.length() - 1);
                                            if (domain_url.contains(";")) {
                                                details.add(new Paragraph("DNS URL* : " + domain_url.replaceAll(";", " , "), normalFont));
                                            } else {
                                                details.add(new Paragraph("DNS URL* : " + domain_url, normalFont));
                                            }
                                        }
                                        pst = conSlave.prepareStatement("select newip from dns_registration_newip where registration_no=?");
                                        pst.setString(1, refno);
                                        rs2 = pst.executeQuery();
                                        String ip = "";
                                        while (rs2.next()) {
                                            ip += rs2.getString("newip").concat(";");
                                        }
                                        if (ip.length() > 0) {
                                            String domain_newip = ip.substring(0, ip.length() - 1);
                                            if (domain_newip.contains(";")) {
                                                details.add(new Paragraph("NEW Application IP : " + domain_newip.replaceAll(";", " , "), normalFont));
                                            } else {
                                                details.add(new Paragraph("NEW Application IP : " + domain_newip, normalFont));
                                            }
                                        }
                                        pst = conSlave.prepareStatement("select cname from dns_registration_cname where registration_no=?");
                                        pst.setString(1, refno);
                                        rs3 = pst.executeQuery();
                                        String loc = "";
                                        while (rs3.next()) {
                                            loc += rs3.getString("cname").concat(";");
                                        }
                                        if (loc.length() > 0) {
                                            String domain_loc = loc.substring(0, loc.length() - 1);
                                            if (domain_loc.contains(";")) {
                                                details.add(new Paragraph("CNAME : " + domain_loc.replaceAll(";", " , "), normalFont));
                                            } else {
                                                details.add(new Paragraph("CNAME : " + domain_loc, normalFont));
                                            }
                                        }
                                        if (rs.getString("req_for").equals("req_modify")) {
                                            pst = conSlave.prepareStatement("select oldip from dns_registration_oldip where registration_no=?");
                                            pst.setString(1, refno);
                                            rs4 = pst.executeQuery();
                                            String oldip = "";
                                            while (rs4.next()) {
                                                oldip += rs4.getString("oldip").concat(";");
                                            }
                                            if (oldip.length() > 0) {
                                                String domain_oldip = oldip.substring(0, oldip.length() - 1);
                                                if (domain_oldip.contains(";")) {
                                                    details.add(new Paragraph(" OLD Application IP : " + domain_oldip.replaceAll(";", " , "), normalFont));
                                                } else {
                                                    details.add(new Paragraph(" OLD Application IP : " + domain_oldip, normalFont));
                                                }
                                            }
                                        }
                                        if (rs.getString("record_mx") == null || rs.getString("record_mx").equals("")) {
                                            details.add(new Paragraph("9) MX : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("9) MX : " + rs.getString("record_mx"), normalFont));
                                        }
                                        if (rs.getString("record_ptr") == null || rs.getString("record_ptr").equals("")) {
                                            details.add(new Paragraph("10) PTR : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("10) PTR : " + rs.getString("record_ptr"), normalFont));
                                        }
                                        if (rs.getString("record_srv") == null || rs.getString("record_srv").equals("")) {
                                            details.add(new Paragraph("11) SRV : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("11) SRV : " + rs.getString("record_srv"), normalFont));
                                        }
                                        if (rs.getString("record_spf") == null || rs.getString("record_spf").equals("")) {
                                            details.add(new Paragraph("12) SPF : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("12) SPF : " + rs.getString("record_spf"), normalFont));
                                        }
                                        if (rs.getString("record_txt") == null || rs.getString("record_txt").equals("")) {
                                            details.add(new Paragraph("13) TXT : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("13) TXT : " + rs.getString("record_txt"), normalFont));
                                        }
                                        if (rs.getString("record_dmarc") == null || rs.getString("record_dmarc").equals("")) {
                                            details.add(new Paragraph("14) DMARC : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("14) DMARC : " + rs.getString("record_dmarc"), normalFont));
                                        }
                                        details.add(new Paragraph("15) DNS Server Location* : " + rs.getString("server_location").replaceAll(";", " , "), normalFont));
                                    } else {
                                        pst = conSlave.prepareStatement("select dns_url from dns_registration_url where registration_no=?");
                                        pst.setString(1, refno);
                                        rs1 = pst.executeQuery();
                                        String url = "";
                                        while (rs1.next()) {
                                            url += rs1.getString("dns_url").concat(";");
                                        }
                                        if (url.length() > 0) {
                                            String domain_url = url.substring(0, url.length() - 1);
                                            if (domain_url.contains(";")) {
                                                details.add(new Paragraph("DNS URL* : " + domain_url.replaceAll(";", " , "), normalFont));
                                            } else {
                                                details.add(new Paragraph("DNS URL* : " + domain_url, normalFont));
                                            }
                                        }
                                        pst = conSlave.prepareStatement("select newip from dns_registration_newip where registration_no=?");
                                        pst.setString(1, refno);
                                        rs2 = pst.executeQuery();
                                        String ip = "";
                                        while (rs2.next()) {
                                            ip += rs2.getString("newip").concat(";");
                                        }
                                        if (ip.length() > 0) {
                                            String domain_newip = ip.substring(0, ip.length() - 1);
                                            if (domain_newip.contains(";")) {
                                                details.add(new Paragraph("NEW Application IP : " + domain_newip.replaceAll(";", " , "), normalFont));
                                            } else {
                                                details.add(new Paragraph("NEW Application IP : " + domain_newip, normalFont));
                                            }
                                        }
                                        pst = conSlave.prepareStatement("select cname from dns_registration_cname where registration_no=?");
                                        pst.setString(1, refno);
                                        rs3 = pst.executeQuery();
                                        String loc = "";
                                        while (rs3.next()) {
                                            loc += rs3.getString("cname").concat(";");
                                        }
                                        if (loc.length() > 0) {
                                            String domain_loc = loc.substring(0, loc.length() - 1);
                                            if (domain_loc.contains(";")) {
                                                details.add(new Paragraph("CNAME : " + domain_loc.replaceAll(";", " , "), normalFont));
                                            } else {
                                                details.add(new Paragraph("CNAME : " + domain_loc, normalFont));
                                            }
                                        }
                                        if (rs.getString("req_for").equals("req_modify")) {
                                            pst = conSlave.prepareStatement("select oldip from dns_registration_oldip where registration_no=?");
                                            pst.setString(1, refno);
                                            rs4 = pst.executeQuery();
                                            String oldip = "";
                                            while (rs4.next()) {
                                                oldip += rs4.getString("oldip").concat(";");
                                            }
                                            if (oldip.length() > 0) {
                                                String domain_oldip = oldip.substring(0, oldip.length() - 1);
                                                if (domain_oldip.contains(";")) {
                                                    details.add(new Paragraph("OLD Application IP : " + domain_oldip.replaceAll(";", " , "), normalFont));
                                                } else {
                                                    details.add(new Paragraph("OLD Application IP : " + domain_oldip, normalFont));
                                                }
                                            }
                                        }
                                        if (rs.getString("record_mx") == null || rs.getString("record_mx").equals("")) {
                                            details.add(new Paragraph("9) MX : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("9) MX : " + rs.getString("record_mx"), normalFont));
                                        }
                                        if (rs.getString("record_ptr") == null || rs.getString("record_ptr").equals("")) {
                                            details.add(new Paragraph("10) PTR : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("10) PTR : " + rs.getString("record_ptr"), normalFont));
                                        }
                                        if (rs.getString("record_srv") == null || rs.getString("record_srv").equals("")) {
                                            details.add(new Paragraph("11) SRV : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("11) SRV : " + rs.getString("record_srv"), normalFont));
                                        }
                                        if (rs.getString("record_spf") == null || rs.getString("record_spf").equals("")) {
                                            details.add(new Paragraph("12) SPF : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("12) SPF : " + rs.getString("record_spf"), normalFont));
                                        }
                                        if (rs.getString("record_txt") == null || rs.getString("record_txt").equals("")) {
                                            details.add(new Paragraph("13) TXT : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("13) TXT : " + rs.getString("record_txt"), normalFont));
                                        }
                                        if (rs.getString("record_dmarc") == null || rs.getString("record_dmarc").equals("")) {
                                            details.add(new Paragraph("14) DMARC : NA", normalFont));
                                        } else {
                                            details.add(new Paragraph("14) DMARC : " + rs.getString("record_dmarc"), normalFont));
                                        }
                                        if (rs.getString("req_for").equals("req_modify")) {
                                            if (rs.getString("record_mx1") == null || rs.getString("record_mx1").equals("")) {
                                                details.add(new Paragraph("15 NEW MX : NA", normalFont));
                                            } else {
                                                details.add(new Paragraph("15) NEW MX : " + rs.getString("record_mx1"), normalFont));
                                            }
                                            if (rs.getString("record_ptr1") == null || rs.getString("record_ptr1").equals("")) {
                                                details.add(new Paragraph("16) NEW PTR : NA", normalFont));
                                            } else {
                                                details.add(new Paragraph("16) NEW PTR : " + rs.getString("record_ptr1"), normalFont));
                                            }
                                        }
                                    }
                                    document.add(details);
                                    document.add(emptypara);
                                    // above code commented below added by pr on 12thjan19
                                    Paragraph footer = new Paragraph();
                                    footer.add(new Paragraph(""));
                                    footer.add(new Paragraph(""));
                                    footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                    footer.add(new Paragraph(""));
                                    footer.add(new Paragraph(""));
                                    footer.setAlignment(footer.ALIGN_JUSTIFIED);
                                    document.add(footer);
                                    Paragraph footer1 = new Paragraph();
                                    footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                    footer1.setAlignment(footer.ALIGN_RIGHT);
                                    document.add(footer1);
                                    document.add(emptypara);
                                    // below function call added by pr on 3rdjan19, table created with status flow
                                } else {
                                    document.add(details);
                                    document.add(emptypara);
                                    // above code commented below added by pr on 12thjan19
                                    Paragraph footer = new Paragraph();
                                    footer.add(new Paragraph(""));
                                    footer.add(new Paragraph(""));
                                    footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                    footer.add(new Paragraph(""));
                                    footer.add(new Paragraph(""));
                                    footer.setAlignment(footer.ALIGN_JUSTIFIED);
                                    document.add(footer);
                                    Paragraph footer1 = new Paragraph();
                                    footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                    footer1.setAlignment(footer.ALIGN_RIGHT);
                                    document.add(footer1);
                                    document.add(emptypara);
                                    // below function call added by pr on 3rdjan19, table created with status flow
                                    createDNSTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("req_other_record"), rs.getString("req_for"));
                                }
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF DNS exception: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF DNS exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase("wifi")) {
                        FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                        userTrackWifi.wifimac(refno, file);
                    try {
                        genfileDownload = refno + ".pdf";
                        fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                    } catch (Exception e) {
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                    }
                    return SUCCESS;
                } else if (whichform.equalsIgnoreCase("singleuser")) {
                    String sql = "select * from single_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();

                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            try {
                                String final_dept;
                                /*switch (rs.getString("employment")) {
                                case "Central":
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        System.out.println("here1");
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        System.out.println("here2");
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }*/

                                // above code modified by pr on 10thjul19
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                    case "Nkn":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                        }
                                        break;
                                    default:
                                        /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }

                                        break;
                                }

                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font smallFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                header.add(new Paragraph("Single User Subscription Form", boldFont));
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", smallFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", smallFont));// line modified by pr on 18thjan19
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);

                                // if added by pr on 4thsep2020
                                if (rs.getString("final_id") != null && !rs.getString("final_id").equals("")) {
                                    Paragraph id = new Paragraph("Created ID :" + rs.getString("final_id"), boldFont);
                                    id.setAlignment(id.ALIGN_RIGHT);
                                    document.add(id);

                                }

                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                                details.add(new Paragraph("8) Date Of Birth* : " + rs.getString("dob") + "               Date Of Retirement* : " + rs.getString("dor"), normalFont));
                                if (rs.getString("emp_code") == null || rs.getString("emp_code").equals("")) {
                                    details.add(new Paragraph("9) Designation* : " + rs.getString("designation"), normalFont));
                                } else {
                                    details.add(new Paragraph("9) Designation* : " + rs.getString("designation") + "               Employee Code : " + rs.getString("emp_code"), normalFont));
                                }
                                if (rs.getString("rphone") == null || rs.getString("rphone").equals("")) {
                                    details.add(new Paragraph("10) Telephone Number(O)* : " + rs.getString("ophone"), normalFont));
                                } else {
                                    details.add(new Paragraph("10) Telephone Number(O)* : " + rs.getString("ophone") + "               Telephone Number(R) : " + rs.getString("rphone"), normalFont));
                                }
                                details.add(new Paragraph("11) Official Address* : " + rs.getString("address"), normalFont));
                                details.add(new Paragraph("12) City* : " + rs.getString("city") + "           State* : " + rs.getString("add_state") + "           Pin Code* : " + rs.getString("pin"), normalFont));

                                // start, code added by pr on 11thjul19
                                String mailType = "";

                                if (rs.getString("type").trim().toLowerCase().equals("mail")) {
                                    mailType = "Mail user (with mailbox)";
                                } else if (rs.getString("type").trim().toLowerCase().equals("app")) {
                                    //mailType = "Application user (without mailbox)";
                                    mailType = "Application user (without mail box(Eoffice-auth))";// line modified by pr on 5thmay2020
                                } else if (rs.getString("type").trim().toLowerCase().equals("eoffice")) {
                                    mailType = "e-office-srilanka";
                                }

                                // end, code added by pr on 11thjul19
                                //details.add(new Paragraph("13) Type of Mail ID* : " + rs.getString("type"), normalFont));
                                details.add(new Paragraph("13) Type of Mail ID* : " + mailType, normalFont)); // line modified by pr on 11thjul19

                                if (rs.getString("id_type").equals("id_name")) {
                                    details.add(new Paragraph("14) Email address preference* : Name Based", normalFont));
                                } else {
                                    details.add(new Paragraph("14 Email address preference* : Designation/Office based id", normalFont));
                                }
                                details.add(new Paragraph("15) Preferred Email Address 1* : " + rs.getString("preferred_email1"), normalFont));
                                details.add(new Paragraph("16) Preferred Email Address 2* : " + rs.getString("preferred_email2"), normalFont));

                                if (rs.getString("emp_type").equals("emp_regular")) {
                                    details.add(new Paragraph("17) Employee Description* : Regular Employee", normalFont));
                                } else if (rs.getString("emp_type").equals("consultant")) {
                                    details.add(new Paragraph("17 Employee Description* : Consultant", normalFont));
                                } else {
                                    details.add(new Paragraph("17) Employee Description* : FMS Support Staffs", normalFont));
                                }

                                if (rs.getString("under_sec_email") != null && !rs.getString("under_sec_email").equals("")) {
                                    details.add(new Paragraph("18) Under Secretary Name* : " + rs.getString("under_sec_name") + "     Email* : " + rs.getString("under_sec_email"), normalFont));
                                    details.add(new Paragraph("19) Under Secretary Mobile* : " + rs.getString("under_sec_mobile") + "     Designation* : " + rs.getString("under_sec_desig"), normalFont));
                                }
                                // end, code added by pr on 8thjan19
                                document.add(details);
                                // above code commented below added by pr on 12thjan19
                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.setAlignment(footer.ALIGN_JUSTIFIED);
                                document.add(footer);
                                Paragraph footer1 = new Paragraph();
                                footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer1.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer1);
                                document.add(emptypara);
                                Paragraph billing = new Paragraph();
                                PdfPTable table_user = new PdfPTable(1);
                                PdfPCell cell1 = new PdfPCell(new Paragraph("FOR OFFICE USE", boldFont));
                                cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell1.setBackgroundColor(Color.GRAY);
                                table_user.addCell(cell1);
                                billing.add(table_user);
                                billing.add(new Paragraph("Billing Division(RR Section):", boldFont));
                                billing.add(new Paragraph("Payment Processed: Yes/ No:", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("User ID Creation:", boldFont));
                                billing.add(new Paragraph("Assigned login ID:________________________________Domain:_______________________________", normalFont));
                                billing.add(new Paragraph("Remarks(BO/PO):______________________________________________", normalFont));
                                document.add(billing);
                                document.add(emptypara);
                                Paragraph inoc = new Paragraph();
                                inoc.add(new Paragraph("Signature of iNOC incharge                                                                        Signature of the Operator"));
                                inoc.add(new Paragraph(""));
                                inoc.add(new Paragraph("Name & Designation:__________________________"));
                                inoc.setAlignment(inoc.ALIGN_RIGHT);
                                document.add(inoc);
                                document.newPage();
                                Paragraph tnc = new Paragraph();
                                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                                tnc.setAlignment(header.ALIGN_CENTER);
                                document.add(tnc);
                                //document.add(emptypara);
                                Paragraph tncpoints = new Paragraph();
                                tncpoints.add(new Paragraph("1. Users are requested to keep the given userid and password a secret.", normalFont));
                                tncpoints.add(new Paragraph("2. Please change your password at least once in every three months.", normalFont));
                                tncpoints.add(new Paragraph("3. By not doing so (point no. 1 & 2 above) the account may be compromised by hackers and the hacker can use the same account for sending spurious mails on the accounts behalf. NIC is neither responsible nor accountable for this type of misuse of the compromised mail accounts. Gross misuse might be detected by automated monitoring tools, which in turn will automatically deactivate the account.", normalFont));
                                tncpoints.add(new Paragraph("4. Do not use the Save password option on the browser when you are prompted for it .", normalFont));
                                tncpoints.add(new Paragraph("5.  Do not use your Government email address to register on public sites.", normalFont));
                                tncpoints.add(new Paragraph("6. Do not open any attachments unless, it has come from a known source. In fact delete those mails which are not relevant to you and still you have received them. They might contain a virus that will corrupt your computer.", normalFont));
                                tncpoints.add(new Paragraph("7. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                                tncpoints.add(new Paragraph("8. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                                tncpoints.add(new Paragraph("9. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                                tncpoints.add(new Paragraph("10. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                                tncpoints.add(new Paragraph("11. NIC e-Mail Service is provided over secure channels only. WEB interface can be accessed over HTTPs(port 443), POP service is over POP3s(port 995),IMAP service is over IMAPs(port 993) and SMTP service is over SMTPs(port 465). Users are required to suitably modify the client software settings to use the services.Please check the FAQ at: https://msgapp.emailgov.in/docs/assets/download/POP.pdf", normalFont));
                                tncpoints.add(new Paragraph("12. By default accounts will be given access over WEB only (https://mail.gov.in). If user wants to access over POP/IMAP,please generate a request through eForms (https://eforms.nic.in). For security reasons either POP or IMAP will be allowed. NIC recommends use of IMAP.", normalFont));
                                tncpoints.add(new Paragraph("13. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                                tncpoints.add(new Paragraph("14. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                                tncpoints.add(new Paragraph("15. Individuals are responsible for saving email messages as they deem appropriate. Messages will be automatically purged from folders as: Trash - 7 days, ProbablySpam - 7 days", normalFont));
                                tncpoints.add(new Paragraph("16. NIC account will be deactivated, if not used for 90 days.", normalFont));
                                tncpoints.add(new Paragraph("17. Email id will be deleted after a period of 9 months from the date of deactivation if no request for activation is received.", normalFont));
                                tncpoints.add(new Paragraph("18. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont));
                                tncpoints.add(new Paragraph("19. Please note that advance payment is a must for paid users.", normalFont));
                                tncpoints.add(new Paragraph("20. NIC coordinator reserves the right to ask for supporting documents like copy of identify card or any other document deemed appropriate to confirm the credentials of the applicant.", normalFont));
                                tncpoints.add(new Paragraph("21. NIC will not share the details of Email Accounts and Email Addresses with anyone unless authorized by Reporting/Nodal/Forwarding Officer of the Department.", normalFont));
                                tncpoints.add(new Paragraph("22. NIC does not capture any aadhaar related information.", normalFont));
                                tncpoints.add(new Paragraph("23. Government officers who resign or superannuate after rendering at least 20 years of service shall be allowed to retain the name based e-mail address. However, they need to intimate to NIC about their willingness to retain the id through NIC coordinator prior to retirement.", normalFont));
                                tncpoints.setAlignment(header.ALIGN_LEFT);
                                document.add(tncpoints);
                                //document.add(emptypara);
                                // below function call added by pr on 3rdjan19, table created with status flow
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF SINGLE exception: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF SINGLE exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase("bulkuser")) {
                    String sql = "select * from bulk_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "Generating PDF for bulk: ");
                            try {
                                String final_dept;

                                /*switch (rs.getString("employment")) {
                                case "Central":
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }*/
                                // above code modified by pr on 10thjul19
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                    case "Nkn":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                        }
                                        break;
                                    default:
                                        /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }

                                        break;
                                }

                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                //FileOutputStream file = new FileOutputStream("F://eForms/PDF/" + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font smallFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                header.add(new Paragraph("Bulk User Subscription Form", boldFont));
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", smallFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", smallFont));// line modified by pr on 18thjan19
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                                if (rs.getString("emp_code") == null || rs.getString("emp_code").equals("")) {
                                    details.add(new Paragraph("8) Designation* : " + rs.getString("designation"), normalFont));
                                } else {
                                    details.add(new Paragraph("8) Designation* : " + rs.getString("designation") + "               Employee Code : " + rs.getString("emp_code"), normalFont));
                                }
                                if (rs.getString("rphone") == null || rs.getString("rphone").equals("")) {
                                    details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone"), normalFont));
                                } else {
                                    details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone") + "               Telephone Number(R) : " + rs.getString("rphone"), normalFont));
                                }
                                details.add(new Paragraph("10) Official Address* : " + rs.getString("address"), normalFont));
                                details.add(new Paragraph("11) City* : " + rs.getString("city") + "           State* : " + rs.getString("add_state") + "           Pin Code* : " + rs.getString("pin"), normalFont));

                                // start, code added by pr on 11thjul19
                                String mailType = "";

                                if (rs.getString("type").trim().toLowerCase().equals("mail")) {
                                    mailType = "Mail user (with mailbox)";
                                } else if (rs.getString("type").trim().toLowerCase().equals("app")) {
                                    //mailType = "Application user (without mailbox)";
                                    mailType = "Application user (without mail box(Eoffice-auth))";// line modified by pr on 5thmay2020
                                } else if (rs.getString("type").trim().toLowerCase().equals("eoffice")) {
                                    mailType = "e-office-srilanka";
                                }

                                // end, code added by pr on 11thjul19
                                //details.add(new Paragraph("12) Type of Mail ID* : " + rs.getString("type"), normalFont));
                                details.add(new Paragraph("12) Type of Mail ID* : " + mailType, normalFont)); // line modified by pr on 11thjul19

                                if (rs.getString("id_type").equals("id_name")) {
                                    details.add(new Paragraph("13) Email address preference* : Name Based", normalFont));
                                } else {
                                    details.add(new Paragraph("13) Email address preference* : Designation/Office based id", normalFont));
                                }

                                if (rs.getString("emp_type").equals("emp_regular")) {
                                    details.add(new Paragraph("14) Employee Description* : Govt/Psu Official", normalFont));
                                } else if (rs.getString("emp_type").equals("consultant")) {
                                    details.add(new Paragraph("14) Employee Description* : Consultant ", normalFont));
                                } else {
                                    details.add(new Paragraph("14) Employee Description* : FMS Support Staffs ", normalFont));
                                }

                                // start, code added by pr on 8thjan19
                                if (rs.getString("under_sec_email") != null && !rs.getString("under_sec_email").equals("")) {
                                    details.add(new Paragraph("15) Under Secretary Name* : " + rs.getString("under_sec_name") + "     Email* : " + rs.getString("under_sec_email"), normalFont));
                                    details.add(new Paragraph("16) Under Secretary Mobile* : " + rs.getString("under_sec_mobile") + "     Designation* : " + rs.getString("under_sec_desig"), normalFont));
                                }
                                // end, code added by pr on 8thjan19                        
                                // details.add(new Paragraph("13) Account Category* : Free", normalFont));
                                document.add(details);
                                // above code commented below added by pr on 12thjan19
                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.setAlignment(footer.ALIGN_JUSTIFIED);
                                document.add(footer);
                                Paragraph footer1 = new Paragraph();
                                footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer1.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer1);
                                document.add(emptypara);
                                Paragraph billing = new Paragraph();
                                PdfPTable table_user = new PdfPTable(1);
                                PdfPCell cell1 = new PdfPCell(new Paragraph("FOR OFFICE USE", boldFont));
                                cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell1.setBackgroundColor(Color.GRAY);
                                table_user.addCell(cell1);
                                billing.add(table_user);
                                billing.add(new Paragraph("Billing Division(RR Section):", boldFont));
                                billing.add(new Paragraph("Payment Processed: Yes/ No:", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("User ID Creation:", boldFont));
                                billing.add(new Paragraph("Assigned login ID:________________________________Domain:_______________________________", normalFont));
                                billing.add(new Paragraph("Remarks(BO/PO):______________________________________________", normalFont));
                                document.add(billing);
                                document.add(emptypara);
                                Paragraph inoc = new Paragraph();
                                inoc.add(new Paragraph(""));
                                inoc.add(new Paragraph("Signature of iNOC incharge                                                                        Signature of the Operator"));
                                inoc.add(new Paragraph(""));
                                inoc.add(new Paragraph("Name & Designation:__________________________"));
                                inoc.setAlignment(inoc.ALIGN_RIGHT);
                                document.add(inoc);
                                document.newPage();
                                Paragraph tnc = new Paragraph();
                                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                                tnc.setAlignment(header.ALIGN_CENTER);
                                document.add(tnc);
                                //document.add(emptypara);
                                Paragraph tncpoints = new Paragraph();
                                tncpoints.add(new Paragraph("1. Users are requested to keep the given userid and password a secret.", normalFont));
                                tncpoints.add(new Paragraph("2. Please change your password at least once in every three months.", normalFont));
                                tncpoints.add(new Paragraph("3. By not doing so (point no. 1 & 2 above) the account may be compromised by hackers and the hacker can use the same account for sending spurious mails on the accounts behalf. NIC is neither responsible nor accountable for this type of misuse of the compromised mail accounts. Gross misuse might be detected by automated monitoring tools, which in turn will automatically deactivate the account.", normalFont));
                                tncpoints.add(new Paragraph("4. Do not use the Save password option on the browser when you are prompted for it .", normalFont));
                                tncpoints.add(new Paragraph("5.  Do not use your Government email address to register on public sites.", normalFont));
                                tncpoints.add(new Paragraph("6. Do not open any attachments unless, it has come from a known source. In fact delete those mails which are not relevant to you and still you have received them. They might contain a virus that will corrupt your computer.", normalFont));
                                tncpoints.add(new Paragraph("7. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                                tncpoints.add(new Paragraph("8. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                                tncpoints.add(new Paragraph("9. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                                tncpoints.add(new Paragraph("10. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                                tncpoints.add(new Paragraph("11. NIC e-Mail Service is provided over secure channels only. WEB interface can be accessed over HTTPs(port 443), POP service is over POP3s(port 995),IMAP service is over IMAPs(port 993) and SMTP service is over SMTPs(port 465). Users are required to suitably modify the client software settings to use the services.Please check the FAQ at: https://msgapp.emailgov.in/docs/assets/download/POP.pdf", normalFont));
                                tncpoints.add(new Paragraph("12. By default accounts will be given access over WEB only (https://mail.gov.in). If user wants to access over POP/IMAP,please generate a request through eForms (https://eforms.nic). For security reasons either POP or IMAP will be allowed. NIC recommends use of IMAP.", normalFont));
                                tncpoints.add(new Paragraph("13. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                                tncpoints.add(new Paragraph("14. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                                tncpoints.add(new Paragraph("15. Individuals are responsible for saving email messages as they deem appropriate. Messages will be automatically purged from folders as: Trash - 7 days, ProbablySpam - 7 days", normalFont));
                                tncpoints.add(new Paragraph("16. NIC account will be deactivated, if not used for 90 days.", normalFont));
                                tncpoints.add(new Paragraph("17. Email id will be deleted after a period of 9 months from the date of deactivation if no request for activation is received.", normalFont));
                                tncpoints.add(new Paragraph("18. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont)); // email modified by pr on 14thjan19
                                tncpoints.add(new Paragraph("19. Please note that advance payment is a must for paid users.", normalFont));
                                tncpoints.add(new Paragraph("20. NIC coordinator reserves the right to ask for supporting documents like copy of identify card or any other document deemed appropriate to confirm the credentials of the applicant.", normalFont));
                                tncpoints.add(new Paragraph("21. NIC will not share the details of Email Accounts and Email Addresses with anyone unless authorized by Reporting/Nodal/Forwarding Officer of the Department.", normalFont));
                                tncpoints.add(new Paragraph("22. NIC does not capture any aadhaar related information.", normalFont));
                                tncpoints.add(new Paragraph("23. Government officers who resign or superannuate after rendering at least 20 years of service shall be allowed to retain the name based e-mail address. However, they need to intimate to NIC about their willingness to retain the id through NIC coordinator prior to retirement.", normalFont));
                                tncpoints.setAlignment(header.ALIGN_LEFT);
                                document.add(tncpoints);
                                //document.add(emptypara);
                                // below function call added by pr on 3rdjan19, table created with status flow
                                createEmailTable(refno, document, header, emptypara, normalFont, boldFont);
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                    //fileInputStream = new FileInputStream(new File("F://eForms/PDF/" + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF BULK exception: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF BULK exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase("gem")) {
                    String sql = "select * from gem_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        System.out.println(printlog + "PS: " + pst);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            try {
                                String final_dept = null;
                                switch (rs.getString("pse")) {
                                    case "central_pse":
                                        final_dept = "1) Controlling Ministry* : " + rs.getString("pse_ministry");
                                        break;
                                    case "state_pse":
                                        final_dept = "1) State (Where PSE is located)/District Name (Where applicant is posted)* : " + rs.getString("pse_state") + " / " + rs.getString("pse_district");
                                        break;
                                }
                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font smallFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                header.add(new Paragraph("Gem User Subscription Form", boldFont));
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", smallFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", smallFont));// line modified by pr on 18thjan19
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                                details.add(new Paragraph("8) Date Of Birth* : " + rs.getString("dob") + "               Date Of Retirement* : " + rs.getString("dor"), normalFont));
                                if (rs.getString("emp_code") == null || rs.getString("emp_code").equals("")) {
                                    details.add(new Paragraph("9) Designation* : " + rs.getString("designation"), normalFont));
                                } else {
                                    details.add(new Paragraph("9) Designation* : " + rs.getString("designation") + "               Employee Code : " + rs.getString("emp_code"), normalFont));
                                }
                                if (rs.getString("rphone") == null || rs.getString("rphone").equals("")) {
                                    details.add(new Paragraph("10) Telephone Number(O)* : " + rs.getString("ophone"), normalFont));
                                } else {
                                    details.add(new Paragraph("10) Telephone Number(O)* : " + rs.getString("ophone") + "               Telephone Number(R) : " + rs.getString("rphone"), normalFont));
                                }
                                details.add(new Paragraph("11) Official Address* : " + rs.getString("address"), normalFont));
                                details.add(new Paragraph("12) City* : " + rs.getString("city") + "           State* : " + rs.getString("add_state") + "           Pin Code* : " + rs.getString("pin"), normalFont));
                                details.add(new Paragraph("13) Preferred Email Address 1 1* : " + rs.getString("preferred_email1"), normalFont));
                                details.add(new Paragraph("14) Preferred Email Address 1 2* : " + rs.getString("preferred_email2"), normalFont));
                                details.add(new Paragraph("14) Account Category* : Free", normalFont));
                                details.add(new Paragraph("15) Project Monthly Traffic* : " + rs.getString("traffic"), normalFont));
                                if (rs.getString("under_sec_email") != null && !rs.getString("under_sec_email").isEmpty()) {
                                    details.add(new Paragraph("16) Under Secretary Name* :" + rs.getString("under_sec_name") + "       Email* : " + rs.getString("under_sec_email"), normalFont));
                                    details.add(new Paragraph("17) Under Secretary Mobile* :" + rs.getString("under_sec_mobile") + "       Designation* : " + rs.getString("under_sec_desig"), normalFont));
                                }

                                document.add(details);

                                // above code commented below added by pr on 12thjan19
                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.setAlignment(footer.ALIGN_JUSTIFIED);
                                document.add(footer);
                                Paragraph footer1 = new Paragraph();
                                footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer1.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer1);
                                document.add(emptypara);
                                Paragraph billing = new Paragraph();
                                PdfPTable table_user = new PdfPTable(1);
                                PdfPCell cell1 = new PdfPCell(new Paragraph("FOR OFFICE USE", boldFont));
                                cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell1.setBackgroundColor(Color.GRAY);
                                table_user.addCell(cell1);
                                billing.add(table_user);
                                billing.add(new Paragraph("Billing Division(RR Section):", boldFont));
                                billing.add(new Paragraph("Payment Processed: Yes/ No:", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("User ID Creation:", boldFont));
                                billing.add(new Paragraph("Assigned login ID:________________________________Domain:_______________________________", normalFont));
                                billing.add(new Paragraph("Remarks(BO/PO):______________________________________________", normalFont));
                                document.add(billing);
                                document.add(emptypara);
                                Paragraph inoc = new Paragraph();
                                //inoc.add(new Paragraph(""));
                                inoc.add(new Paragraph("Signature of iNOC incharge                                                                        Signature of the Operator"));
                                inoc.add(new Paragraph(""));
                                inoc.add(new Paragraph("Name & Designation:__________________________"));
                                inoc.setAlignment(inoc.ALIGN_RIGHT);
                                document.add(inoc);
                                document.newPage();
                                Paragraph tnc = new Paragraph();
                                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                                tnc.setAlignment(header.ALIGN_CENTER);
                                document.add(tnc);
                                //document.add(emptypara);
                                Paragraph tncpoints = new Paragraph();
                                tncpoints.add(new Paragraph("1. The validity of account will be 12 months from the date of intergration.", normalFont));
                                tncpoints.add(new Paragraph("2. The applicant agrees to transfer the fund within 7 days from the date of PI generation by NICSI.", normalFont));
                                tncpoints.add(new Paragraph("3. NIC reserves te right to deactivate the account anytime due to non-payment of dues.", normalFont));
                                tncpoints.add(new Paragraph("4. Users are requested to keep the given userid and password a secret.", normalFont));
                                tncpoints.add(new Paragraph("5. Please change your password at least once in every three months.", normalFont));
                                tncpoints.add(new Paragraph("6. By not doing so (point no. 4 & 5 above) the account may be compromised by hackers and the hacker can use the same account for sending spurious mails on the accounts behalf. NIC is neither responsible nor accountable for this type of misuse of the compromised mail accounts. Gross misuse might be detected by automated monitoring tools, which in turn will automatically deactivate the account.", normalFont));
                                tncpoints.add(new Paragraph("7. Do not use the Save password option on the browser when you are prompted for it .", normalFont));
                                tncpoints.add(new Paragraph("8.  Do not use your Government email address to register on public sites.", normalFont));
                                tncpoints.add(new Paragraph("9. Do not open any attachments unless, it has come from a known source. In fact delete those mails which are not relevant to you and still you have received them. They might contain a virus that will corrupt your computer.", normalFont));
                                tncpoints.add(new Paragraph("10. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                                tncpoints.add(new Paragraph("11. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                                tncpoints.add(new Paragraph("12. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                                tncpoints.add(new Paragraph("13. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                                tncpoints.add(new Paragraph("14. NIC e-Mail Service is provided over secure channels only. WEB interface can be accessed over HTTPs(port 443), POP service is over POP3s(port 995),IMAP service is over IMAPs(port 993) and SMTP service is over SMTPs(port 465). Users are required to suitably modify the client software settings to use the services.Please check the FAQ at: https://msgapp.emailgov.in/docs/assets/download/POP.pdf", normalFont));
                                tncpoints.add(new Paragraph("15. By default accounts will be given access over WEB only (https://mail.gov.in). If user wants to access over POP/IMAP,please generate a request through eForms (https://eforms.nic). For security reasons either POP or IMAP will be allowed. NIC recommends use of IMAP.", normalFont));
                                tncpoints.add(new Paragraph("16. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                                tncpoints.add(new Paragraph("17. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                                tncpoints.add(new Paragraph("18. Individuals are responsible for saving email messages as they deem appropriate. Messages will be automatically purged from folders as: Trash - 7 days, ProbablySpam - 7 days", normalFont));
                                tncpoints.add(new Paragraph("19. NIC account will be deactivated, if not used for 90 days.", normalFont));
                                tncpoints.add(new Paragraph("20. Email id will be deleted after a period of 9 months from the date of deactivation if no request for activation is received.", normalFont));
                                tncpoints.add(new Paragraph("21. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont));// email modified by pr on 14thjan19
                                tncpoints.add(new Paragraph("22. Please note that advance payment is a must for paid users.", normalFont));
                                tncpoints.add(new Paragraph("23. NIC coordinator reserves the right to ask for supporting documents like copy of identify card or any other document deemed appropriate to confirm the credentials of the applicant.", normalFont));
                                tncpoints.add(new Paragraph("24. NIC will not share the details of Email Accounts and Email Addresses with anyone unless authorized by Reporting/Nodal/Forwarding Officer of the Department.", normalFont));
                                tncpoints.add(new Paragraph("25. NIC does not capture any aadhaar related information.", normalFont));
                                tncpoints.setAlignment(header.ALIGN_LEFT);
                                document.add(tncpoints);
                                //document.add(emptypara);
                                // below function call added by pr on 3rdjan19, table created with status flow
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF GEM exception: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF GEM exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase("nkn")) {
                    String sql = "select * from nkn_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            String final_dept;
                            /*switch (rs.getString("employment")) {
                            case "Central":
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                if (rs.getString("department").equalsIgnoreCase("other")) {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                }
                                break;
                            case "Others":
                            case "Psu":
                            case "Const":
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                } else {
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                }
                                break;
                            default:
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                }
                                break;
                        }*/

                            // above code modified by pr on 10thjul19
                            switch (rs.getString("employment")) {
                                case "Central":
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                case "Nkn":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                    }
                                    break;
                                default:
                                    /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }

                                    break;
                            }

                            FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                            Document document = new Document();
                            PdfWriter writer = PdfWriter.getInstance(document, file);
                            document.open();
                            Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                            Font smallFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL);
                            Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                            Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                            Paragraph emptypara = new Paragraph("\n");
                            Paragraph header = new Paragraph();
                            header.add(new Paragraph("Government of India", HeaderFont));
                            header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                            header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                            header.add(new Paragraph("NKN Email Subscription Form", boldFont));
                            /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                         + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", smallFont));*/
                            header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                    + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", smallFont));// line modified by pr on 18thjan19
                            header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                            header.setAlignment(header.ALIGN_CENTER);
                            document.add(header);
                            document.add(emptypara);
                            Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                            reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                            document.add(reg_num);

                            // below code added by pr on 4thsep2020
                            if (rs.getString("final_id") != null && !rs.getString("final_id").equals("")) {
                                Paragraph id = new Paragraph("Created ID :" + rs.getString("final_id"), boldFont);
                                id.setAlignment(id.ALIGN_RIGHT);
                                document.add(id);

                            }

                            document.add(emptypara);
                            Paragraph details = new Paragraph();
                            details.add(new Paragraph(final_dept, normalFont));
                            details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                            details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                            details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                            details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                            details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                            if (rs.getString("emp_code") == null || rs.getString("emp_code").equals("")) {
                                details.add(new Paragraph("8) Designation* : " + rs.getString("designation"), normalFont));
                            } else {
                                details.add(new Paragraph("8) Designation* : " + rs.getString("designation") + "               Employee Code : " + rs.getString("emp_code"), normalFont));
                            }
                            if (rs.getString("rphone") == null || rs.getString("rphone").equals("")) {
                                details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone"), normalFont));
                            } else {
                                details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone") + "               Telephone Number(R) : " + rs.getString("rphone"), normalFont));
                            }
                            details.add(new Paragraph("10) Official Address* : " + rs.getString("address"), normalFont));
                            details.add(new Paragraph("11) City* : " + rs.getString("city") + "           State* : " + rs.getString("add_state") + "           Pin Code* : " + rs.getString("pin"), normalFont));
                            details.add(new Paragraph("12) Institute Name* : " + rs.getString("inst_name"), normalFont));
                            details.add(new Paragraph("13) Institute ID* : " + rs.getString("inst_id"), normalFont));
                            details.add(new Paragraph("14) Name of Project NKN* : " + rs.getString("nkn_project"), normalFont));
                            if (rs.getString("request_type").equals("nkn_single")) {
                                details.add(new Paragraph("15) Date Of Birth* : " + rs.getString("dob") + "               Date Of Retirement* : " + rs.getString("dor"), normalFont));
                                details.add(new Paragraph("16) Preferred Email Address 1 1* : " + rs.getString("preferred_email1"), normalFont));
                                details.add(new Paragraph("17) Preferred Email Address 1 2* : " + rs.getString("preferred_email2"), normalFont));
                            }
                            // start, code added by pr on 8thjan19
                            if (rs.getString("under_sec_email") != null && !rs.getString("under_sec_email").equals("")) {
                                details.add(new Paragraph("18) Under Secretary Name* : " + rs.getString("under_sec_name") + "     Name* : " + rs.getString("under_sec_email"), normalFont));
                                details.add(new Paragraph("19) Under Secretary Mobile* : " + rs.getString("under_sec_mobile") + "     Designation* : " + rs.getString("under_sec_desig"), normalFont));
                            }
                            // end, code added by pr on 8thjan19
                            document.add(details);
                            // above code commented below added by pr on 12thjan19
                            Paragraph footer = new Paragraph();
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.setAlignment(footer.ALIGN_JUSTIFIED);
                            document.add(footer);
                            Paragraph footer1 = new Paragraph();
                            footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                            footer1.setAlignment(footer.ALIGN_RIGHT);
                            document.add(footer1);
                            document.add(emptypara);
                            Paragraph billing = new Paragraph();
                            PdfPTable table_user = new PdfPTable(1);
                            PdfPCell cell1 = new PdfPCell(new Paragraph("FOR OFFICE USE", boldFont));
                            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell1.setBackgroundColor(Color.GRAY);
                            table_user.addCell(cell1);
                            billing.add(table_user);
                            billing.add(new Paragraph("User ID Creation:", boldFont));
                            billing.add(new Paragraph("Assigned login ID:________________________________Domain:_______________________________", normalFont));
                            billing.add(new Paragraph("Remarks(BO/PO):______________________________________________", normalFont));
                            document.add(billing);
                            document.add(emptypara);
                            Paragraph inoc = new Paragraph();
                            //inoc.add(new Paragraph(""));
                            inoc.add(new Paragraph("Signature of iNOC incharge                                                                        Signature of the Operator"));
                            inoc.add(new Paragraph(""));
                            inoc.add(new Paragraph("Name & Designation:__________________________"));
                            inoc.setAlignment(inoc.ALIGN_RIGHT);
                            document.add(inoc);
                            document.newPage();
                            Paragraph tnc = new Paragraph();
                            tnc.add(new Paragraph("Terms And Conditions", boldFont));
                            tnc.setAlignment(header.ALIGN_CENTER);
                            document.add(tnc);
                            //document.add(emptypara);
                            Paragraph tncpoints = new Paragraph();
                            tncpoints.add(new Paragraph("1. Users are requested to keep the given userid and password a secret.", normalFont));
                            tncpoints.add(new Paragraph("2. Please change your password at least once in every three months.", normalFont));
                            tncpoints.add(new Paragraph("3. By not doing so (point no. 1 & 2 above) the account may be compromised by hackers and the hacker can use the same account for sending spurious mails on the accounts behalf. NIC is neither responsible nor accountable for this type of misuse of the compromised mail accounts. Gross misuse might be detected by automated monitoring tools, which in turn will automatically deactivate the account.", normalFont));
                            tncpoints.add(new Paragraph("4. Do not use the Save password option on the browser when you are prompted for it .", normalFont));
                            tncpoints.add(new Paragraph("5.  Do not use your Government email address to register on public sites.", normalFont));
                            tncpoints.add(new Paragraph("6. Do not open any attachments unless, it has come from a known source. In fact delete those mails which are not relevant to you and still you have received them. They might contain a virus that will corrupt your computer.", normalFont));
                            tncpoints.add(new Paragraph("7. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                            tncpoints.add(new Paragraph("8. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                            tncpoints.add(new Paragraph("9. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                            tncpoints.add(new Paragraph("10. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                            tncpoints.add(new Paragraph("11. NIC e-Mail Service is provided over secure channels only. WEB interface can be accessed over HTTPs(port 443), POP service is over POP3s(port 995),IMAP service is over IMAPs(port 993) and SMTP service is over SMTPs(port 465). Users are required to suitably modify the client software settings to use the services.Please check the FAQ at: https://msgapp.emailgov.in/docs/assets/download/POP.pdf", normalFont));
                            tncpoints.add(new Paragraph("12. By default accounts will be given access over WEB only (https://mail.gov.in). If user wants to access over POP/IMAP,please generate a request through eForms (https://eforms.nic). For security reasons either POP or IMAP will be allowed. NIC recommends use of IMAP.", normalFont));
                            tncpoints.add(new Paragraph("13. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                            tncpoints.add(new Paragraph("14. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                            tncpoints.add(new Paragraph("15. Individuals are responsible for saving email messages as they deem appropriate. Messages will be automatically purged from folders as: Trash - 7 days, ProbablySpam - 7 days", normalFont));
                            tncpoints.add(new Paragraph("16. NIC account will be deactivated, if not used for 90 days.", normalFont));
                            tncpoints.add(new Paragraph("17. Email id will be deleted after a period of 9 months from the date of deactivation if no request for activation is received.", normalFont));
                            tncpoints.add(new Paragraph("18. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont));
                            tncpoints.add(new Paragraph("19. Please note that advance payment is a must for paid users.", normalFont));
                            tncpoints.add(new Paragraph("20. NIC coordinator reserves the right to ask for supporting documents like copy of identify card or any other document deemed appropriate to confirm the credentials of the applicant.", normalFont));
                            tncpoints.add(new Paragraph("21. NIC will not share the details of Email Accounts and Email Addresses with anyone unless authorized by Reporting/Nodal/Forwarding Officer of the Department.", normalFont));
                            tncpoints.add(new Paragraph("22. NIC does not capture any aadhaar related information.", normalFont));
                            tncpoints.add(new Paragraph("23. Government officers who resign or superannuate after rendering at least 20 years of service shall be allowed to retain the name based e-mail address. However, they need to intimate to NIC about their willingness to retain the id through NIC coordinator prior to retirement.", normalFont));
                            tncpoints.setAlignment(header.ALIGN_LEFT);
                            document.add(tncpoints);
                            //document.add(emptypara);
                            // below function call added by pr on 3rdjan19, table created with status flow
                            createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                            document.close();
                            try {
                                genfileDownload = refno + ".pdf";
                                fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                            } catch (Exception e) {
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF NKN exception: " + e.getMessage());
                    }
                    return SUCCESS;
                } else if (whichform.equalsIgnoreCase(
                        "ldap")) {
                    String sql = "select * from ldap_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            String final_dept;

                            /*switch (rs.getString("employment")) {
                            case "Central":
                                System.out.println("inside central");
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                if (rs.getString("department").equalsIgnoreCase("other")) {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                }
                                break;
                            case "Others":
                            case "Psu":
                            case "Const":
                                System.out.println("inside other" + rs.getString("organization"));
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    System.out.println("inside if");
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                } else {
                                    System.out.println("inside else");
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                }
                                break;
                            default:
                                System.out.println("inside default");
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                }
                                break;
                        }*/
                            // above code modified by pr on 10thjul19
                            switch (rs.getString("employment")) {
                                case "Central":
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                case "Nkn":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                    }
                                    break;
                                default:
                                    /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }

                                    break;
                            }

                            FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                            Document document = new Document();
                            PdfWriter writer = PdfWriter.getInstance(document, file);
                            document.open();
                            Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                            Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                            Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                            Paragraph emptypara = new Paragraph("\n");
                            Paragraph header = new Paragraph();
                            header.add(new Paragraph("Government of India", HeaderFont));
                            header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                            header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                            header.add(new Paragraph("LDAP Request Form", boldFont));
                            /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                         + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                            header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                    + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont));// line modified by pr on 18thjan19
                            header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                            header.setAlignment(header.ALIGN_CENTER);
                            document.add(header);
                            document.add(emptypara);
                            Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                            reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                            document.add(reg_num);
                            document.add(emptypara);
                            Paragraph details = new Paragraph();
                            details.add(new Paragraph(final_dept, normalFont));
                            details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                            details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                            details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                            details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                            details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                            details.add(new Paragraph("8) Name of the Application* : " + rs.getString("app_name") + "                    Application URL* : " + rs.getString("app_url"), normalFont));
                            if (rs.getString("service_ip") == null || rs.getString("service_ip").equals("")) {
                                details.add(new Paragraph("9) IP from which you will access LDAP Server : " + rs.getString("base_ip"), normalFont));
                            } else {
                                details.add(new Paragraph("9) IP from which you will access LDAP Server : " + rs.getString("base_ip") + " , " + rs.getString("service_ip"), normalFont));
                            }
                            details.add(new Paragraph("10) Domain/Group Of People who will access this application* : " + rs.getString("domain"), normalFont));
                            if (rs.getString("server_loc").equals("Other")) {
                                details.add(new Paragraph("11) Server Location* : " + rs.getString("server_loc_other"), normalFont));
                            } else {
                                details.add(new Paragraph("11) Server Location* : " + rs.getString("server_loc"), normalFont));
                            }
                            details.add(new Paragraph("12) Is the application enabled over https* : " + rs.getString("https"), normalFont));
                            details.add(new Paragraph("13) Is the application security audit cleared* : " + rs.getString("audit"), normalFont));
                            if (rs.getString("audit").equals("no")) {
                                if (rs.getString("ldap_id1") == null || rs.getString("ldap_id2").equals("")) {
                                    details.add(new Paragraph("14)  Id which will access ldap server* : " + rs.getString("ldap_id1"), normalFont));
                                } else {
                                    details.add(new Paragraph("14)  Id which will access ldap server* : " + rs.getString("ldap_id1") + " , " + rs.getString("ldap_id2"), normalFont));
                                }
                            }
                            document.add(details);
                            // above code commented below added by pr on 12thjan19
                            Paragraph footer = new Paragraph();
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.setAlignment(footer.ALIGN_JUSTIFIED);
                            document.add(footer);
                            Paragraph footer1 = new Paragraph();
                            footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                            footer1.setAlignment(footer.ALIGN_RIGHT);
                            document.add(footer1);
                            document.add(emptypara);
                            Paragraph billing = new Paragraph();
                            PdfPTable table_user = new PdfPTable(1);
                            PdfPCell cell1 = new PdfPCell(new Paragraph("FOR OFFICE USE", boldFont));
                            cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell1.setBackgroundColor(Color.GRAY);
                            table_user.addCell(cell1);
                            billing.add(table_user);
                            billing.add(new Paragraph("Account Category: Free/ Paid", normalFont));
                            billing.add(new Paragraph("If free, on What Basis:", normalFont));
                            billing.add(new Paragraph("If paid, Project No. :", normalFont));
                            billing.add(new Paragraph(""));
                            billing.add(new Paragraph("User ID Activation:Application login ID: _______________________ has been activated for the LDAP Authentication Service", normalFont));
                            document.add(billing);
                            document.add(emptypara);
                            Paragraph inoc = new Paragraph();
                            inoc.add(new Paragraph(""));
                            inoc.add(new Paragraph("Signature of the In charge"));
                            inoc.add(new Paragraph(""));
                            inoc.add(new Paragraph("Name & Designation:__________________________"));
                            inoc.setAlignment(inoc.ALIGN_RIGHT);
                            document.add(inoc);
                            document.newPage();
                            Paragraph tnc = new Paragraph();
                            tnc.add(new Paragraph("Terms And Conditions", boldFont));
                            tnc.setAlignment(header.ALIGN_CENTER);
                            document.add(tnc);
                            document.add(emptypara);
                            Paragraph tncpoints = new Paragraph();
                            tncpoints.add(new Paragraph("1. Concerned Department/ Ministry shall be solely responsible for all the information, contents, data send and received using NIC LDAP Authentication under this Agreement. Concerned Department/ Ministry further acknowledges that it shall be solely responsible and undertake to maintain complete authenticity of the information/data sent and/or received and takes all possible steps and measures to ensure that consistent authentic information is transmitted.", normalFont));
                            tncpoints.add(new Paragraph("2. Concerned Department/ Ministry shall keep the account information such as userid, password provided obtained for LDAP Authentication in safe custody to avoid any misue by unauthorised users.", normalFont));
                            tncpoints.add(new Paragraph("3. I will take one id per application. ID assigned for authentication with one application will not be used by another application. I understand the risks involved . I hereby authorize NIC support cell to deactivate the id in case of misuse/abuse.", normalFont));
                            tncpoints.add(new Paragraph("4. NIC does not capture any aadhaar related information.", normalFont));
                            tncpoints.setAlignment(header.ALIGN_LEFT);
                            document.add(tncpoints);
                            document.add(emptypara);
                            // below function call added by pr on 3rdjan19, table created with status flow
                            createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                            document.close();
                            try {
                                genfileDownload = refno + ".pdf";
                                fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                            } catch (Exception e) {
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF LDAP exception: " + e.getMessage());
                    }
                    return SUCCESS;
                } else if (whichform.equalsIgnoreCase(
                        "dlist")) {
                    String sql = "select * from distribution_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {

                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            String final_dept;
                            switch (rs.getString("employment")) {
                                case "Central":
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                case "Nkn":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                    }
                                    break;
                                default:
                                    /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }

                                    break;
                            }

                            String sql1 = "select * from dlist_moderator where registration_no = ? and form_type = 'owner'";
                            conSlave = DbConnection.getSlaveConnection();
                            pst = conSlave.prepareStatement(sql1);
                            pst.setString(1, refno);
                            rs1 = pst.executeQuery();

                            List<Object> ownerNameData = new ArrayList<>();
                            List<Object> ownerEmailData = new ArrayList<>();
                            List<Object> ownerMobileData = new ArrayList<>();
                            while (rs1.next()) {

                                String ownerName = rs1.getString("name");
                                ownerNameData.add(ownerName);

                                String ownerEmail = rs1.getString("email");
                                ownerEmailData.add(ownerEmail);

                                String ownerMobile = rs1.getString("mobile");
                                ownerMobileData.add(ownerMobile);
                            }
                            String sql2 = "select * from dlist_moderator where registration_no = ? and form_type = 'moderator'";
                            conSlave = DbConnection.getSlaveConnection();
                            pst = conSlave.prepareStatement(sql2);
                            pst.setString(1, refno);
                            rs2 = pst.executeQuery();

                            List<Object> moderatorNameData = new ArrayList<>();
                            List<Object> moderatorEmailData = new ArrayList<>();
                            List<Object> moderatorMobileData = new ArrayList<>();
                            while (rs2.next()) {

                                String moderatorName = rs2.getString("name");
                                moderatorNameData.add(moderatorName);

                                String moderatorEmail = rs2.getString("email");
                                moderatorEmailData.add(moderatorEmail);

                                String moderatorMobile = rs2.getString("mobile");
                                moderatorMobileData.add(moderatorMobile);
                            }

                            System.out.println("satyaaaaaaaa:::::" + ownerMobileData);
                            System.out.println("satyaaaaaaaa:::::" + ownerEmailData);
                            System.out.println("satyaaaaaaaa:::::" + ownerNameData);

                            System.out.println("sahil:::::" + moderatorMobileData.toString().replace("[", "").replace("]", ""));
                            System.out.println("sahil:::::" + moderatorEmailData);
                            System.out.println("sahil:::::" + moderatorNameData);

                            FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                            Document document = new Document();
                            PdfWriter writer = PdfWriter.getInstance(document, file);
                            document.open();
                            Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                            Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                            Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                            Paragraph emptypara = new Paragraph("\n");
                            Paragraph header = new Paragraph();
                            header.add(new Paragraph("Government of India", HeaderFont));
                            header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                            header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                            header.add(new Paragraph("Distribution List Request Form", boldFont));
                            /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                         + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                            header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                    + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont));// line modified by pr on 18thjan19
                            header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                            header.setAlignment(header.ALIGN_CENTER);
                            document.add(header);
                            document.add(emptypara);
                            Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                            reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                            document.add(reg_num);
                            document.add(emptypara);
                            Paragraph details = new Paragraph();
                            details.add(new Paragraph(final_dept, normalFont));
                            details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                            details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                            details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                            details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                            details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                            details.add(new Paragraph("8) Name of List* : " + rs.getString("list_name"), normalFont));
                            details.add(new Paragraph("9) Description of List* : " + rs.getString("list_description"), normalFont));
                            details.add(new Paragraph("10) Moderator Name* : " + moderatorNameData.toString().replace("[", "").replace("]", ""), normalFont));
                            details.add(new Paragraph("11) Moderator Email* : " + moderatorEmailData.toString().replace("[", "").replace("]", ""), normalFont));
                            details.add(new Paragraph("12) Moderator Mobile* : " + moderatorMobileData.toString().replace("[", "").replace("]", ""), normalFont));
                            details.add(new Paragraph("13) Owner Name* : " + ownerNameData.toString().replace("[", "").replace("]", ""), normalFont));
                            details.add(new Paragraph("14) Owner Email* : " + ownerEmailData.toString().replace("[", "").replace("]", ""), normalFont));
                            details.add(new Paragraph("15) Owner Mobile* : " + ownerMobileData.toString().replace("[", "").replace("]", ""), normalFont));
                            details.add(new Paragraph("16) Will the List be moderated* : " + rs.getString("list_moderated"), normalFont));
                            details.add(new Paragraph("17) Are only members allowed to send mails to the list* : " + rs.getString("allowed_member_mail"), normalFont));
                            if (rs.getString("list_temp").equals("yes")) {
                                details.add(new Paragraph("18) Is list temporary* : " + rs.getString("list_temp") + "   Validity Date* : " + rs.getString("valid_date"), normalFont));
                            } else {
                                details.add(new Paragraph("18) Is list temporary* : " + rs.getString("list_temp"), normalFont));
                            }
                            details.add(new Paragraph("19) Will list accept mail from a non-NICNET email address (from internet like gmail, yahoo etc)* : " + rs.getString("other_member_mail"), normalFont));
                            document.add(details);
                            document.add(emptypara);

                            // above code commented below added by pr on 12thjan19
                            Paragraph footer = new Paragraph();
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.setAlignment(footer.ALIGN_JUSTIFIED);
                            document.add(footer);
                            Paragraph footer1 = new Paragraph();
                            footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                            footer1.setAlignment(footer.ALIGN_RIGHT);
                            document.add(footer1);
                            document.add(emptypara);
                            document.newPage();
                            Paragraph tnc = new Paragraph();
                            tnc.add(new Paragraph("Terms And Conditions", boldFont));
                            tnc.setAlignment(header.ALIGN_CENTER);
                            document.add(tnc);
                            document.add(emptypara);
                            Paragraph tncpoints = new Paragraph();
                            tncpoints.add(new Paragraph("1. Entries marked with asterisk  (*) are mandatory", normalFont));
                            tncpoints.add(new Paragraph("2. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                            tncpoints.add(new Paragraph("3. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                            tncpoints.add(new Paragraph("4. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                            tncpoints.add(new Paragraph("5. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                            tncpoints.add(new Paragraph("6. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                            tncpoints.add(new Paragraph("7. NIC does not capture any aadhaar related information.", normalFont));
                            tncpoints.add(new Paragraph("8. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                            tncpoints.setAlignment(header.ALIGN_LEFT);
                            document.add(tncpoints);
                            document.add(emptypara);
                            // below function call added by pr on 3rdjan19, table created with status flow
                            createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                            document.close();
                            try {
                                genfileDownload = refno + ".pdf";
                                fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                            } catch (Exception e) {
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF DLIST exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase(
                        "relay")) {
                    String sql = "select * from relay_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            String final_dept;

                            /*switch (rs.getString("employment")) {
                            case "Central":
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                if (rs.getString("department").equalsIgnoreCase("other")) {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                }
                                break;
                            case "Others":
                            case "Psu":
                            case "Const":
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                } else {
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                }
                                break;
                            default:
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                }
                                break;
                        }*/
                            // above code modified by pr on 10thjul19
                            switch (rs.getString("employment")) {
                                case "Central":
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                case "Nkn":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                    }
                                    break;
                                default:
                                    /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }

                                    break;
                            }

                            FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                            Document document = new Document();
                            PdfWriter writer = PdfWriter.getInstance(document, file);
                            document.open();
                            Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                            Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                            Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                            Paragraph emptypara = new Paragraph("\n");
                            Paragraph header = new Paragraph();
                            header.add(new Paragraph("Government of India", HeaderFont));
                            header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                            header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                            header.add(new Paragraph("Relay Request Form", boldFont));
                            /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                         + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                            header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                    + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont));// line modified by pr on 18thjan19
                            header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                            header.setAlignment(header.ALIGN_CENTER);
                            document.add(header);
                            document.add(emptypara);
                            Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                            reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                            document.add(reg_num);
                            document.add(emptypara);
                            Paragraph details = new Paragraph();
                            details.add(new Paragraph(final_dept, normalFont));
                            details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                            details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                            details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                            details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                            details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                            if (rs.getString("app_ip").contains(";")) {
                                details.add(new Paragraph("8) Application IP* : " + rs.getString("app_ip").replaceAll(";", " , "), normalFont));
                            } else {
                                details.add(new Paragraph("8) Application IP* : " + rs.getString("app_ip"), normalFont));
                            }
                            details.add(new Paragraph("9) Application Name* : " + rs.getString("app_name"), normalFont));
                            details.add(new Paragraph("10) Name of Division* : " + rs.getString("division_name"), normalFont));
                            details.add(new Paragraph("11) Operating System (Name, Version) * : " + rs.getString("os"), normalFont));
                            if (rs.getString("server_loc").equals("Other")) {
                                details.add(new Paragraph("12) Server Location* : " + rs.getString("server_loc_other"), normalFont));
                            } else {
                                details.add(new Paragraph("12) Server Location* : " + rs.getString("server_loc"), normalFont));
                            }
                            details.add(new Paragraph("13) Staging Server? (If yes IP will be allowed maximum for 15 days )* : " + rs.getString("staging_ip").toUpperCase(), normalFont));
                            document.add(details);
                            Paragraph footer = new Paragraph();
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("  Signature of the Reporting/Nodal/Forwarding Officer with date and seal", normalFont));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", normalFont));
                            footer.setAlignment(footer.ALIGN_RIGHT);
                            document.add(footer);
                            document.newPage();
                            Paragraph tnc = new Paragraph();
                            tnc.add(new Paragraph("Terms And Conditions", boldFont));
                            tnc.setAlignment(header.ALIGN_CENTER);
                            document.add(tnc);
                            document.add(emptypara);
                            Paragraph tncpoints = new Paragraph();
                            tncpoints.add(new Paragraph("1. Fill one form for one IP only.", normalFont));
                            tncpoints.add(new Paragraph("2. If administrator is from outside NIC, please get the form approved by NIC coordinator.", normalFont));
                            tncpoints.add(new Paragraph("3. NIC does not capture any aadhaar related information.", normalFont));
                            tncpoints.setAlignment(header.ALIGN_LEFT);
                            document.add(tncpoints);
                            document.add(emptypara);
                            // below function call added by pr on 3rdjan19, table created with status flow
                            createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                            document.close();
                            try {
                                genfileDownload = refno + ".pdf";
                                fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                            } catch (Exception e) {
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF RELAY exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase(
                        "ip")) {
                    String sql = "select * from ip_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            try {
                                String final_dept;

                                /*switch (rs.getString("employment")) {
                                case "Central":
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }*/
                                // above code modified by pr on 10thjul19
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                    case "Nkn":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                        }
                                        break;
                                    default:
                                        /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }

                                        break;
                                }

                                String request_type;
                                if (rs.getString("ip_change_request").equals("addip")) {
                                    request_type = "8) Request* : ADD IP Request for : " + rs.getString("ip_change_request");
                                } else {
                                    request_type = "8) Request* : Change IP Request for : " + rs.getString("ip_change_request");
                                }
                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                header.add(new Paragraph("IP Change/Add Request Form", boldFont));
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont));// line modified by pr on 18thjan19
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                                details.add(new Paragraph(request_type, normalFont));
                                if (rs.getString("ip_action_request").equalsIgnoreCase("sms")) {
                                    details.add(new Paragraph("  a) SMS Account Name* : " + rs.getString("account_name"), normalFont));
                                }
                                if (rs.getString("ip_action_request").equalsIgnoreCase("relay")) {
                                    details.add(new Paragraph("  a) Application Name* : " + rs.getString("app_name"), normalFont));
                                    if (rs.getString("server_loc").equals("Other")) {
                                        details.add(new Paragraph("  b) Server Location* : " + rs.getString("server_loc_other"), normalFont));
                                    } else {
                                        details.add(new Paragraph("  b) Server Location* : " + rs.getString("server_loc"), normalFont));
                                    }
                                    if (rs.getString("app_ip").equals("") || rs.getString("app_ip") == null) {
                                    } else {
                                        details.add(new Paragraph("  c) Old IP Address : " + rs.getString("app_ip"), normalFont));
                                    }
                                }

                                if (rs.getString("ip_action_request").equalsIgnoreCase("ldap")) {
                                    details.add(new Paragraph("  a) Application Name* : " + rs.getString("app_name"), normalFont));

                                    details.add(new Paragraph("  b) URL of the application* : " + rs.getString("ldap_url"), normalFont));

                                    details.add(new Paragraph("  c) LDAP auth id allocated: " + rs.getString("ldap_auth_allocate"), normalFont));
                                }
                                details.add(new Paragraph("9) IP Details* : ", normalFont));
                                document.add(details);
                                document.add(emptypara);
                                PdfPTable iptable = null;
                                if (rs.getString("ip_change_request").equals("addip")) {
                                    iptable = new PdfPTable(4); // 4 columns.
                                    PdfPCell cell1 = new PdfPCell(new Paragraph("IP 1", boldFont));
                                    PdfPCell cell2 = new PdfPCell(new Paragraph("IP 2", boldFont));
                                    PdfPCell cell3 = new PdfPCell(new Paragraph("IP 3", boldFont));
                                    PdfPCell cell4 = new PdfPCell(new Paragraph("IP 4", boldFont));
                                    cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                                    cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
                                    cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
                                    iptable.addCell(cell1);
                                    iptable.addCell(cell2);
                                    iptable.addCell(cell3);
                                    iptable.addCell(cell4);
                                    iptable.addCell(new Paragraph(rs.getString("ip1"), normalFont));
                                    iptable.addCell(new Paragraph(rs.getString("ip2"), normalFont));
                                    iptable.addCell(new Paragraph(rs.getString("ip3"), normalFont));
                                    iptable.addCell(new Paragraph(rs.getString("ip4"), normalFont));
                                } else {
                                    iptable = new PdfPTable(2); // 2 columns.
                                    PdfPCell cell1 = new PdfPCell(new Paragraph("OLD IP", boldFont));
                                    PdfPCell cell2 = new PdfPCell(new Paragraph("NEW IP", boldFont));
                                    cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                                    cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                                    iptable.addCell(cell1);
                                    iptable.addCell(cell2);
                                    String ip1[] = rs.getString("ip1").split(";");
                                    String ip2[] = rs.getString("ip2").split(";");
                                    String ip3[] = rs.getString("ip3").split(";");
                                    String ip4[] = rs.getString("ip4").split(";");
                                    iptable.addCell(new Paragraph(ip1[0], normalFont));
                                    iptable.addCell(new Paragraph(ip1[1], normalFont));
                                    if (!ip2[0].equals("") && ip2[1] != null) {
                                        iptable.addCell(new Paragraph(ip2[0], normalFont));
                                        iptable.addCell(new Paragraph(ip2[1], normalFont));
                                    }
                                    if (!ip3[0].equals("") && ip3[1] != null) {
                                        iptable.addCell(new Paragraph(ip3[0], normalFont));
                                        iptable.addCell(new Paragraph(ip3[1], normalFont));
                                    }
                                    if (!ip4[0].equals("") && ip4[1] != null) {
                                        iptable.addCell(new Paragraph(ip4[0], normalFont));
                                        iptable.addCell(new Paragraph(ip4[1], normalFont));
                                    }
                                }
                                document.add(iptable);
                                document.add(emptypara);
                                // above code commented below added by pr on 12thjan19
                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.setAlignment(footer.ALIGN_JUSTIFIED);
                                document.add(footer);
                                Paragraph footer1 = new Paragraph();
                                footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer1.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer1);
                                document.add(emptypara);
                                document.newPage();
                                Paragraph tnc = new Paragraph();
                                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                                tnc.setAlignment(header.ALIGN_CENTER);
                                document.add(tnc);
                                document.add(emptypara);
                                Paragraph tncpoints = new Paragraph();
                                tncpoints.add(new Paragraph("1. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                                tncpoints.add(new Paragraph("2. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                                tncpoints.add(new Paragraph("3. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                                tncpoints.add(new Paragraph("4. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                                tncpoints.add(new Paragraph("5. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                                tncpoints.add(new Paragraph("6. NIC does not capture any aadhaar related information.", normalFont));
                                tncpoints.add(new Paragraph("7. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont));
                                tncpoints.setAlignment(header.ALIGN_LEFT);
                                document.add(tncpoints);
                                document.add(emptypara);
                                // below function call added by pr on 3rdjan19, table created with status flow
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "IP PDF: " + e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase(
                        "mobile") || whichform.equalsIgnoreCase("profile")) {
                    String sql = "select * from mobile_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            try {
                                String final_dept;
                                /*switch (rs.getString("employment")) {
                                case "Central":
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }*/

                                // above code modified by pr on 10thjul19
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                    case "Nkn":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                        }
                                        break;
                                    default:
                                        /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }

                                        break;
                                }

                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                header.add(new Paragraph("Mobile Update Request Form", boldFont));
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont));
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email"), normalFont));
                                details.add(new Paragraph("4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                                if (rs.getString("country_code") != null) {
                                    details.add(new Paragraph("8) New Mobile Number* : " + rs.getString("country_code") + rs.getString("new_mobile"), normalFont));
                                } else {
                                    details.add(new Paragraph("8) New Mobile Number* : " + rs.getString("new_mobile"), normalFont));
                                }
                                details.add(new Paragraph("8) Nic Date of Birth* : " + rs.getString("nic_dateofbirth"), normalFont));
                                details.add(new Paragraph("9) Nic Date of Retirement* : " + rs.getString("nic_dateofretirement"), normalFont));
                                details.add(new Paragraph("10) Designation* : " + rs.getString("nic_designation"), normalFont));
                                details.add(new Paragraph("11) Display Name* : " + rs.getString("nic_displayname"), normalFont));
                                document.add(details);
                                document.add(emptypara);
                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("  Signature of the Reporting/Nodal/Forwarding Officer with date and seal", normalFont));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", normalFont));
                                footer.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer);
                                document.newPage();
                                Paragraph tnc = new Paragraph();
                                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                                tnc.setAlignment(header.ALIGN_CENTER);
                                document.add(tnc);
                                document.add(emptypara);
                                Paragraph tncpoints = new Paragraph();
                                tncpoints.add(new Paragraph("1. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                                tncpoints.add(new Paragraph("2. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                                tncpoints.add(new Paragraph("3. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                                tncpoints.add(new Paragraph("4. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                                tncpoints.add(new Paragraph("5. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                                tncpoints.add(new Paragraph("6. NIC does not capture any aadhaar related information.", normalFont));
                                tncpoints.add(new Paragraph("7. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont));
                                tncpoints.setAlignment(header.ALIGN_LEFT);
                                document.add(tncpoints);
                                document.add(emptypara);
                                // below function call added by pr on 3rdjan19, table created with status flow
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF MOBILE exception: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else if (whichform.equalsIgnoreCase(
                        "imappop")) {
                    String sql = "select * from imappop_registration where registration_no=?";
                    pst = null;
                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "Generating PDF for imappop: ");
                            String final_dept;

                            /*switch (rs.getString("employment")) {
                            case "Central":
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                if (rs.getString("department").equalsIgnoreCase("other")) {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                }
                                break;
                            case "Others":
                            case "Psu":
                            case "Const":
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                } else {
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                }
                                break;
                            default:
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                }
                                break;
                        }*/
                            // above code modified by pr on 10thjul19
                            switch (rs.getString("employment")) {
                                case "Central":
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                case "Nkn":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                    }
                                    break;
                                default:
                                    /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }

                                    break;
                            }

                            FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                            Document document = new Document();
                            PdfWriter writer = PdfWriter.getInstance(document, file);
                            document.open();
                            Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                            Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                            Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                            Paragraph emptypara = new Paragraph("\n");
                            Paragraph header = new Paragraph();
                            header.add(new Paragraph("Government of India", HeaderFont));
                            header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                            header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                            header.add(new Paragraph("Imap POP Update Request Form", boldFont));
                            /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                         + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                            header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                    + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont));
                            header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                            header.setAlignment(header.ALIGN_CENTER);
                            document.add(header);
                            document.add(emptypara);
                            Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                            reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                            document.add(reg_num);
                            document.add(emptypara);
                            Paragraph details = new Paragraph();
                            details.add(new Paragraph(final_dept, normalFont));
                            details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                            details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email"), normalFont));
                            details.add(new Paragraph("4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                            details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                            details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                            details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                            details.add(new Paragraph("8) Protocol selected to be enabled* : " + rs.getString("protocol").toUpperCase(), normalFont));
                            document.add(details);
                            document.add(emptypara);
                            Paragraph footer = new Paragraph();
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("  Signature of the Reporting/Nodal/Forwarding Officer with date and seal", normalFont));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", normalFont));
                            footer.setAlignment(footer.ALIGN_RIGHT);
                            document.add(footer);
                            document.newPage();
                            Paragraph tnc = new Paragraph();
                            tnc.add(new Paragraph("Terms And Conditions", boldFont));
                            tnc.setAlignment(header.ALIGN_CENTER);
                            document.add(tnc);
                            document.add(emptypara);
                            Paragraph tncpoints = new Paragraph();
                            tncpoints.add(new Paragraph("1. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                            tncpoints.add(new Paragraph("2. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                            tncpoints.add(new Paragraph("3. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                            tncpoints.add(new Paragraph("4. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                            tncpoints.add(new Paragraph("5. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                            tncpoints.add(new Paragraph("6. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it. Individuals are responsible for saving email messages as they deem appropriate. Messages will be automatically purged from folders as follows:  ", normalFont));
                            tncpoints.add(new Paragraph("    Trash - 7 days ", normalFont));
                            tncpoints.add(new Paragraph("    ProbablySpam ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œ 7 days", normalFont));
                            tncpoints.add(new Paragraph("7. NIC account will be deactivated, if not used for 90 days.", normalFont));
                            tncpoints.add(new Paragraph("8. Email id will be deleted after a period of 9 months from the date of deactivation if no request for activation is received.", normalFont));
                            tncpoints.add(new Paragraph("9. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont));
                            tncpoints.add(new Paragraph("10. Please note that advance payment is a must for paid users.", normalFont));
                            tncpoints.add(new Paragraph("11. NIC coordinator reserves the right to ask for supporting documents like copy of identify card or any other document deemed appropriate to confirm the credentials of the applicant.", normalFont));
                            tncpoints.add(new Paragraph("12. NIC will not share the details of Email Accounts and Email Addresses with anyone unless authorized by Reporting/Nodal/Forwarding Officer of the Department.", normalFont));
                            tncpoints.add(new Paragraph("13. NIC does not capture any aadhaar related information.", normalFont));
                            tncpoints.setAlignment(header.ALIGN_LEFT);
                            document.add(tncpoints);
                            document.add(emptypara);
                            // below function call added by pr on 3rdjan19, table created with status flow
                            createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                            document.close();
                            try {
                                genfileDownload = refno + ".pdf";
                                fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                            } catch (Exception e) {
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "IMAP POP PDF: " + e.getMessage());
                    }
                } else if (whichform.contains("VPN")) {
                    String sql = "select * from vpn_registration where registration_no=?";
                    pst = null;
                    try {
//                        conSlave = DbConnection.getConnection();
                        conSlave = DbConnection.getSlaveConnection(); //29dec2021
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();

                        while (rs.next()) {

                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "Generating PDF for imappop: ");
                            String final_dept;
                            switch (rs.getString("employment")) {
                                case "Central":
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }

                            FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");

                            Document document = new Document();
                            PdfWriter writer = PdfWriter.getInstance(document, file);
                            document.open();

                            Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                            Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                            Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);

                            Paragraph emptypara = new Paragraph("\n");

                            Paragraph header = new Paragraph();

                            header.add(new Paragraph("Government of India", HeaderFont));
                            header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                            header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                            if (rs.getString("user_type").equals("vpn_renew")) {
                                header.add(new Paragraph("VPN Renewal Request Form", boldFont));
                            } else if (rs.getString("user_type").equals("vpn_surrender")) {
                                header.add(new Paragraph("VPN Surrender Request Form", boldFont));
                            } else if (rs.getString("user_type").equals("vpn_delete")) {
                                header.add(new Paragraph("VPN Delete Request Form", boldFont));
                            } else {
                                header.add(new Paragraph("VPN Subscription Form", boldFont));
                            }
                            /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                         + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                            header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                    + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont));
                            header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                            header.setAlignment(header.ALIGN_CENTER);
                            document.add(header);
                            document.add(emptypara);

                            Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                            reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                            document.add(reg_num);
                            document.add(emptypara);

                            if (rs.getString("user_type").equals("vpn_renew") || rs.getString("user_type").equals("change_add") || rs.getString("user_type").equals("vpn_surrender") || rs.getString("user_type").equals("vpn_delete")) {
                                Paragraph vpn_num = new Paragraph("VPN number :" + rs.getString("vpn_reg_no").trim(), boldFont);
                                reg_num.setAlignment(vpn_num.ALIGN_RIGHT);
                                document.add(vpn_num);
                                document.add(emptypara);
                            }

                            Paragraph details = new Paragraph();
                            details.add(new Paragraph(final_dept, normalFont));
                            Vpn_registration reg_obj = new Vpn_registration();
                            details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                            details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email"), normalFont));
                            details.add(new Paragraph("4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));

                            // start, code added by pr on 27thaug19
                            details.add(new Paragraph("5) Applicant Designation* : " + rs.getString("designation"), normalFont));

                            details.add(new Paragraph("6) Applicant Employee Code : " + (rs.getString("emp_code") != null ? rs.getString("emp_code") : "-"), normalFont));

                            details.add(new Paragraph("7) Applicant Postal Address* : " + rs.getString("address"), normalFont));
                            details.add(new Paragraph("8) Applicant State Of Posting* : " + rs.getString("add_state"), normalFont));
                            details.add(new Paragraph("9) Applicant District* : " + rs.getString("city"), normalFont));
                            details.add(new Paragraph("10) Applicant Pincode* : " + rs.getString("pin"), normalFont));

                            // end, code added by pr on 27thaug19
                            details.add(new Paragraph("11) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                            details.add(new Paragraph("12) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                            details.add(new Paragraph("13) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                            //if (!rs.getString("coordinator_email").equals("")) {
                            if (rs.getString("coordinator_email") != null && !rs.getString("coordinator_email").equals("")) { // not null added by pr on 24thoct19
                                details.add(new Paragraph("14) Co-ordinator Email* : " + rs.getString("coordinator_email"), normalFont));
                            }
                            document.add(details);
                            document.add(emptypara);
                            if (rs.getString("user_type").equals("vpn_renew") || rs.getString("user_type").equals("change_add") || rs.getString("user_type").equals("vpn_surrender") || rs.getString("user_type").equals("vpn_delete")) {
                                Paragraph details2 = new Paragraph();
                                details2.add(new Paragraph("NOTE: Details of already allowed ips* : ", normalFont));
                                document.add(details2);
                                document.add(emptypara);
                                //UserData userdata = (UserData) session.get("uservalues");
                                //String all_aliases = userdata.getAliasesInString().replaceAll("'", "\"");

                                /**
                                 * ***********************************************
                                 */
                                ArrayList aliases = entities.LdapQuery.GetMailEqui(rs.getString("auth_email").toString());
                                int sizeOfAliases = aliases.size();
                                String commaSeparatedAliases = "";

                                if (sizeOfAliases > 1) {
                                    for (Object email : aliases) {
                                        commaSeparatedAliases += "\"" + email + "\",";
                                    }
                                    commaSeparatedAliases = commaSeparatedAliases.replaceAll(",$", "");

                                } else if (sizeOfAliases == 1) {
                                    commaSeparatedAliases = "\"" + aliases.iterator().next() + "\"";
                                } else if (sizeOfAliases == 0) {
                                    commaSeparatedAliases = "\"" + rs.getString("auth_email").toString() + "\"";
                                }

                                /**
                                 * ***********************************************
                                 */
                                String api_resp = reg_obj.post_api2(rs.getString("vpn_reg_no").trim(), rs.getString("auth_email"), rs.getString("mobile"), commaSeparatedAliases);

                                PdfPTable iptable = null;
                                iptable = new PdfPTable(4); // 2 columns.
                                PdfPCell cell1 = new PdfPCell(new Paragraph("Server IP", boldFont));
                                PdfPCell cell2 = new PdfPCell(new Paragraph("Server Location", boldFont));
                                PdfPCell cell3 = new PdfPCell(new Paragraph("Destination Port", boldFont));
                                PdfPCell cell4 = new PdfPCell(new Paragraph("Application URL", boldFont));

                                cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
                                iptable.addCell(cell1);
                                iptable.addCell(cell2);
                                iptable.addCell(cell3);
                                iptable.addCell(cell4);

                                JSONObject json = new JSONObject(api_resp);
                                JSONArray access = json.getJSONArray("access_details");
                                for (int i = 0; i < access.length(); i++) {
                                    JSONObject detail = access.getJSONObject(i);
                                    String serip = detail.getString("serip");
                                    String serloc = detail.getString("serloc");
                                    String destport = detail.getString("destport");
                                    String desc_service = detail.getString("desc_service");

                                    iptable.addCell(new Paragraph(serip, normalFont));
                                    iptable.addCell(new Paragraph(serloc, normalFont));
                                    iptable.addCell(new Paragraph(destport, normalFont));
                                    iptable.addCell(new Paragraph(desc_service, normalFont));

                                }
                                document.add(iptable);
                                document.add(emptypara);
                            }

                            if (!rs.getString("user_type").equals("vpn_renew") && !rs.getString("user_type").equals("vpn_delete") && !rs.getString("user_type").equals("vpn_surrender")) {
                                Paragraph details1 = new Paragraph();
                                details1.add(new Paragraph("NOTE: Details of applied ips* : ", normalFont));
                                document.add(details1);
                                document.add(emptypara);
                                PdfPTable iptable1 = null;
                                iptable1 = new PdfPTable(5); // 2 columns.
                                PdfPCell cell11 = new PdfPCell(new Paragraph("Server IP", boldFont));
                                PdfPCell cell12 = new PdfPCell(new Paragraph("Server Location", boldFont));
                                PdfPCell cell13 = new PdfPCell(new Paragraph("Destination Port", boldFont));
                                PdfPCell cell14 = new PdfPCell(new Paragraph("Application URL", boldFont));
                                PdfPCell cell15 = new PdfPCell(new Paragraph("Action Type", boldFont));

                                cell11.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell12.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell13.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell14.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell15.setHorizontalAlignment(Element.ALIGN_CENTER);
                                iptable1.addCell(cell11);
                                iptable1.addCell(cell12);
                                iptable1.addCell(cell13);
                                iptable1.addCell(cell14);
                                iptable1.addCell(cell15);

                                sql = "select * from vpn_entries where registration_no=?";
                                pst = null;
                                pst = conSlave.prepareStatement(sql);
                                pst.setString(1, refno);
                                ResultSet res = pst.executeQuery();
                                while (res.next()) {
                                    if (res.getString("ip_type").equalsIgnoreCase("single")) {
                                        iptable1.addCell(new Paragraph(res.getString("ip1"), normalFont));
                                    } else {
                                        iptable1.addCell(new Paragraph(res.getString("ip1") + " - " + res.getString("ip2"), normalFont));
                                    }
                                    if (res.getString("server_location").equalsIgnoreCase("other")) {
                                        iptable1.addCell(new Paragraph(res.getString("server_loc_other"), normalFont));
                                    } else {
                                        iptable1.addCell(new Paragraph(res.getString("server_location"), normalFont));
                                    }
                                    iptable1.addCell(new Paragraph(res.getString("dest_port"), normalFont));
                                    iptable1.addCell(new Paragraph(res.getString("app_url"), normalFont));
                                    iptable1.addCell(new Paragraph(res.getString("action_type"), normalFont));
                                }
                                res.close();
                                document.add(iptable1);
                            }

                            if (rs.getString("user_type").equals("vpn_delete")) {
                                Paragraph details1 = new Paragraph();
                                details1.add(new Paragraph("NOTE: Details of Deleted ips* : ", normalFont));
                                document.add(details1);
                                document.add(emptypara);
                                PdfPTable iptable1 = null;
                                iptable1 = new PdfPTable(4); // 2 columns.
                                PdfPCell cell11 = new PdfPCell(new Paragraph("Server IP", boldFont));
                                PdfPCell cell12 = new PdfPCell(new Paragraph("Server Location", boldFont));
                                PdfPCell cell13 = new PdfPCell(new Paragraph("Destination Port", boldFont));
                                PdfPCell cell14 = new PdfPCell(new Paragraph("Application URL", boldFont));
                                cell11.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell12.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell13.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell14.setHorizontalAlignment(Element.ALIGN_CENTER);
                                iptable1.addCell(cell11);
                                iptable1.addCell(cell12);
                                iptable1.addCell(cell13);
                                iptable1.addCell(cell14);
                                sql = "select * from vpn_registration_delete where registration_no=?";
                                pst = null;
                                pst = conSlave.prepareStatement(sql);
                                pst.setString(1, refno);
                                ResultSet res = pst.executeQuery();
                                while (res.next()) {
                                    iptable1.addCell(new Paragraph(res.getString("server_ip"), normalFont));
                                    iptable1.addCell(new Paragraph(res.getString("location"), normalFont));
                                    iptable1.addCell(new Paragraph(res.getString("port"), normalFont));
                                    iptable1.addCell(new Paragraph(res.getString("service"), normalFont));
                                }
                                res.close();
                                document.add(iptable1);
                            }

                            Paragraph footer = new Paragraph();
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.setAlignment(footer.ALIGN_JUSTIFIED);
                            document.add(footer);
                            Paragraph footer1 = new Paragraph();
                            footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                            footer1.setAlignment(footer.ALIGN_RIGHT);
                            document.add(footer1);

                            document.newPage();
                            Paragraph tnc = new Paragraph();
                            tnc.add(new Paragraph("Terms And Conditions", boldFont));
                            tnc.setAlignment(header.ALIGN_CENTER);
                            document.add(tnc);
                            document.add(emptypara);
                            Paragraph tncpoints = new Paragraph();
                            tncpoints.add(new Paragraph("1. Fill one form for one IP only.", normalFont));
                            tncpoints.add(new Paragraph("2. If administrator is from outside NIC, please get the form approved by NIC coordinator.", normalFont));
                            tncpoints.add(new Paragraph("3. NIC does not capture any aadhaar related information.", normalFont));
                            tncpoints.setAlignment(header.ALIGN_LEFT);
                            document.add(tncpoints);
                            document.add(emptypara);

                            // below function call added by pr on 3rdjan19, table created with status flow
                            createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));

                            document.close();
                            try {
                                genfileDownload = refno + ".pdf";
                                fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                            } catch (Exception e) {
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "IMAP POP PDF: " + e.getMessage());
                    }

                } else if (whichform.equalsIgnoreCase("centralutm")) {

                    String sql = "select * from centralutm_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();
                    try {
                        con = DbConnection.getConnection();
                        conSlave = DbConnection.getSlaveConnection(); //29dec2021
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();

                        while (rs.next()) {

                            try {
                                String final_dept;
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");
                                        }
                                        break;
                                    default:
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }
                                        break;
                                }

                                FileOutputStream file = new FileOutputStream("/tmp/" + refno + ".pdf");

                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();

                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);

                                Paragraph emptypara = new Paragraph("\n");

                                Paragraph header = new Paragraph();

                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));

                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly signed by the concerned Project Coordinator"
                                        + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);

                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);

                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email") + "        7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile"), normalFont));
                                details.add(new Paragraph("8) Firewall Entry Details : ", normalFont));
                                pst = conSlave.prepareStatement("select sourceIP,destinationIP,service,ports,action,timeperiod from firewall_entries where registration_no=?");
                                pst.setString(1, refno);
                                rs1 = pst.executeQuery();
                                String sourceIP = "";
                                String destinationIP = "";
                                String service = "";
                                String ports = "";
                                String action = "";
                                String timePeriod = "";
                                while (rs1.next()) {
                                    sourceIP += rs1.getString("sourceIP").concat(";");
                                    destinationIP += rs1.getString("destinationIP").concat(";");
                                    service += rs1.getString("service").concat(";");
                                    ports += rs1.getString("ports").concat(";");
                                    action += rs1.getString("action").concat(";");
                                    timePeriod += rs1.getString("timePeriod").concat(";");
                                }
                                if (sourceIP.length() > 0) {
                                    sourceIP = sourceIP.substring(0, sourceIP.length() - 1);

                                    if (sourceIP.contains(";")) {
                                        details.add(new Paragraph("sourceIP* : " + sourceIP.replaceAll(";", " , "), normalFont));
                                    } else {
                                        details.add(new Paragraph("sourceIP* : " + sourceIP, normalFont));

                                    }

                                }
                                if (destinationIP.length() > 0) {
                                    destinationIP = destinationIP.substring(0, destinationIP.length() - 1);

                                    if (destinationIP.contains(";")) {
                                        details.add(new Paragraph("destinationIP* : " + destinationIP.replaceAll(";", " , "), normalFont));
                                    } else {
                                        details.add(new Paragraph("destinationIP* : " + destinationIP, normalFont));

                                    }

                                }
                                if (service.length() > 0) {
                                    service = service.substring(0, service.length() - 1);

                                    if (service.contains(";")) {
                                        details.add(new Paragraph("service* : " + service.replaceAll(";", " , "), normalFont));
                                    } else {
                                        details.add(new Paragraph("service* : " + service, normalFont));

                                    }

                                }
                                if (ports.length() > 0) {
                                    ports = ports.substring(0, ports.length() - 1);

                                    if (ports.contains(";")) {
                                        details.add(new Paragraph("ports* : " + ports.replaceAll(";", " , "), normalFont));
                                    } else {
                                        details.add(new Paragraph("ports* : " + ports, normalFont));

                                    }

                                }
                                if (action.length() > 0) {
                                    action = action.substring(0, action.length() - 1);

                                    if (action.contains(";")) {
                                        details.add(new Paragraph("action* : " + action.replaceAll(";", " , "), normalFont));
                                    } else {
                                        details.add(new Paragraph("action* : " + action, normalFont));

                                    }

                                }
                                if (timePeriod.length() > 0) {
                                    timePeriod = timePeriod.substring(0, timePeriod.length() - 1);

                                    if (timePeriod.contains(";")) {
                                        details.add(new Paragraph("timePeriod* : " + timePeriod.replaceAll(";", " , "), normalFont));
                                    } else {
                                        details.add(new Paragraph("timePeriod* : " + timePeriod, normalFont));

                                    }

                                }
                                details.add(new Paragraph("9) Purpose : " + rs.getString("purpose"), normalFont));

                                pst.close();
                                rs1.close();

                                document.add(details);
                                document.add(emptypara);

                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Approved by Reporting/Nodal/Forwarding Officer", normalFont));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", normalFont));
                                footer.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer);

                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File("/tmp/" + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }

                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF DNS exception: " + e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                    }

                } else if (whichform.equalsIgnoreCase("webcast")) {

                    String sql = "select * from webcast_registration where registration_no=?";
                    pst = null;
                    try {
                        con = DbConnection.getConnection();
                        conSlave = DbConnection.getSlaveConnection(); //29dec2021
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();

                        while (rs.next()) {
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "Generating PDF for webcast: ");
                            String final_dept;
                            switch (rs.getString("employment")) {
                                case "Central":
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }

                            FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");

                            Document document = new Document();
                            PdfWriter writer = PdfWriter.getInstance(document, file);
                            document.open();

                            Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                            Font hindiFont = FontFactory.getFont("/eForms/FreeSans.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                            Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                            Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);

                            Paragraph emptypara = new Paragraph("\n");

                            Paragraph header = new Paragraph();

                            header.add(new Paragraph("Government of India", HeaderFont));
                            header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                            header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                            header.add(new Paragraph("Webcast Service Request Form", boldFont));
                            header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                    + "to eForms portal by the applicant and his/her Forwarding Officer)", normalFont));
                            header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                            header.setAlignment(header.ALIGN_CENTER);
                            document.add(header);
                            document.add(emptypara);

                            Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                            reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                            document.add(reg_num);
                            document.add(emptypara);

                            Paragraph details = new Paragraph();
                            details.add(new Paragraph(final_dept, normalFont));

                            details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                            details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email"), normalFont));
                            details.add(new Paragraph("4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                            details.add(new Paragraph("5) Forwarding Officer Name* : " + rs.getString("fwd_ofc_name") + "   Email* : " + rs.getString("fwd_ofc_email"), normalFont));
                            details.add(new Paragraph("6) Forwarding Officer Mobile* : " + rs.getString("fwd_ofc_mobile") + "   Designation* : " + rs.getString("fwd_ofc_desig"), normalFont));
                            details.add(new Paragraph("7) Forwarding Officer Address* : " + rs.getString("fwd_ofc_add") + "   Telephone* : " + rs.getString("fwd_ofc_tel"), normalFont));

                            details.add(new Paragraph("8) Type of Request:* : " + rs.getString("request_type").toUpperCase(), normalFont));
                            if (rs.getString("request_type").equals("live")) {
                                details.add(new Paragraph("9) Event Name/Description (English)* : " + rs.getString("event_name_eng"), normalFont));
                                details.add(new Paragraph("10) Event Name/Description (Hindi)* : " + rs.getString("event_name_hindi"), hindiFont));
                                details.add(new Paragraph("11) Date and timings of Event* : " + rs.getString("event_start") + " to " + rs.getString("event_end") + "   Type of Event* : " + rs.getString("event_type"), normalFont));
                                details.add(new Paragraph("12) Event Coordinator Name* : " + rs.getString("event_coo_name") + "   Email* : " + rs.getString("event_coo_email"), normalFont));
                                details.add(new Paragraph("13) Event Coordinator Mobile* : " + rs.getString("event_coo_mobile") + "   Designation* : " + rs.getString("event_coo_design"), normalFont));
                                details.add(new Paragraph("14) Event Coordinator Address* : " + rs.getString("event_coo_address"), normalFont));
                                details.add(new Paragraph("15) Is live telecast will be available on DD* : " + rs.getString("event_telecast"), normalFont));
                                if (rs.getString("event_telecast").equals("yes")) {
                                    details.add(new Paragraph("16) Channel Name* : " + rs.getString("channel_name"), normalFont));
                                } else if (rs.getString("event_telecast").equals("no")) {
                                    if (rs.getString("live_feed").equalsIgnoreCase("Through VC")) {
                                        details.add(new Paragraph("16) How Are you planning to get live audio/video feed ?* : " + rs.getString("live_feed") + "   VC ID* : " + rs.getString("vc_id"), normalFont));
                                    } else {
                                        details.add(new Paragraph("16) How Are you planning to get live audio/video feed ?* : " + rs.getString("live_feed"), normalFont));
                                    }
                                }
                                details.add(new Paragraph("17) Is it a Conference/Workshop?* : " + rs.getString("conf_radio"), normalFont));
                                details.add(new Paragraph("18) Name of Conference/Workshop* : " + rs.getString("conf_name"), normalFont));
                                details.add(new Paragraph("19) Type of Conference/Workshop* : " + rs.getString("conf_type") + "   City and Venue of Conference/Workshop* : " + rs.getString("conf_city"), normalFont));
                                details.add(new Paragraph("20) Conference/Workshop schedule /Program details with no. of days* : " + rs.getString("conf_schedule"), normalFont));
                                if (rs.getString("hall_type").equalsIgnoreCase("multiple")) {
                                    details.add(new Paragraph("21) Number of parallel sessions* : " + rs.getString("conf_session") + "   Number Of Halls* : " + rs.getString("hall_type") + "(" + rs.getString("hall_number") + ")", normalFont));
                                } else {
                                    details.add(new Paragraph("21) Number of parallel sessions* : " + rs.getString("conf_session") + "   Number Of Halls* : " + rs.getString("hall_type"), normalFont));
                                }
                                details.add(new Paragraph("22) Internet Connectivity /Leased line* : " + rs.getString("conf_bw") + "   Internet/Leased line Service provider Name* : " + rs.getString("conf_provider"), normalFont));
                                if (rs.getString("conf_flash").equals("yes")) {
                                    details.add(new Paragraph("23) Event Management company hired ?* : " + rs.getString("conf_event_hired") + "   Do this agency able to stream live using Flash Live Media Encoder* : " + rs.getString("conf_flash"), normalFont));
                                } else {
                                    details.add(new Paragraph("23) Event Management company hired ?* : " + rs.getString("conf_event_hired") + "   Do this agency able to stream live using Flash Live Media Encoder* : " + rs.getString("conf_flash") + " (" + rs.getString("local_setup") + ")", normalFont));
                                }
                                if (rs.getString("conf_video").equals("yes")) {
                                    details.add(new Paragraph("24) Video coverage agency hired or not?* : " + rs.getString("conf_video") + "   Contact details of video agency* : " + rs.getString("conf_contact"), normalFont));
                                } else {
                                    details.add(new Paragraph("24) Video coverage agency hired or not?* : " + rs.getString("conf_video"), normalFont));
                                }
                                details.add(new Paragraph("25) Payment details applicable or not?* : " + rs.getString("payment"), normalFont));
                                if (rs.getString("payment").equals("yes")) {
                                    details.add(new Paragraph("26) Cheque/DD No/NEFT No/RTGS No : " + rs.getString("cheque_no") + "   Amount : " + rs.getString("cheque_amount") + "   Date : " + rs.getString("cheque_date"), normalFont));
                                    details.add(new Paragraph("27) Bank & Branch : " + rs.getString("bank_name"), normalFont));
                                    if (rs.getString("remarks") == null || rs.getString("remarks").equals("")) {

                                    } else {
                                        details.add(new Paragraph("28) Remarks : " + rs.getString("remarks"), normalFont));
                                    }
                                } else if (rs.getString("remarks") == null || rs.getString("remarks").equals("")) {

                                } else {
                                    details.add(new Paragraph("26) Remarks : " + rs.getString("remarks"), normalFont));
                                }

                            } else if (rs.getString("request_type").equals("demand")) {
                                details.add(new Paragraph("9) Total number of video clips* : " + rs.getString("event_no"), normalFont));
                                details.add(new Paragraph("10) Total size in GB* : " + rs.getString("event_size"), normalFont));
                                details.add(new Paragraph("11) Media Format provided* : " + rs.getString("media_format"), normalFont));
                                details.add(new Paragraph("12) Payment details applicable or not?* : " + rs.getString("payment"), normalFont));
                                if (rs.getString("payment").equals("yes")) {
                                    details.add(new Paragraph("13) Cheque/DD No/NEFT No/RTGS No : " + rs.getString("cheque_no") + "   Amount : " + rs.getString("cheque_amount") + "   Date : " + rs.getString("cheque_date"), normalFont));
                                    details.add(new Paragraph("14) Bank & Branch : " + rs.getString("bank_name"), normalFont));
                                    if (rs.getString("remarks") == null || rs.getString("remarks").equals("")) {

                                    } else {
                                        details.add(new Paragraph("15) Remarks : " + rs.getString("remarks"), normalFont));
                                    }
                                } else if (rs.getString("remarks") == null || rs.getString("remarks").equals("")) {

                                } else {
                                    details.add(new Paragraph("13) Remarks : " + rs.getString("remarks"), normalFont));
                                }
                            }

                            document.add(details);
                            document.add(emptypara);

                            Paragraph footer = new Paragraph();
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("  Signature of the Forwarding Officer with date and seal", normalFont));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph(""));
                            footer.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", normalFont));
                            footer.setAlignment(footer.ALIGN_RIGHT);

                            document.add(footer);

//                        document.newPage();
//                        Paragraph tnc = new Paragraph();
//                        tnc.add(new Paragraph("Terms And Conditions", boldFont));
//                        tnc.setAlignment(header.ALIGN_CENTER);
//                        document.add(tnc);
//                        document.add(emptypara);
//                        Paragraph tncpoints = new Paragraph();
//                        tncpoints.add(new Paragraph("1. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
//                        tncpoints.add(new Paragraph("2. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
//                        tncpoints.add(new Paragraph("3. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
//                        tncpoints.add(new Paragraph("4. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
//                        tncpoints.add(new Paragraph("5. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
//                        tncpoints.add(new Paragraph("6. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it. Individuals are responsible for saving email messages as they deem appropriate. Messages will be automatically purged from folders as follows:  ", normalFont));
//                        tncpoints.add(new Paragraph("    Trash - 7 days ", normalFont));
//                        tncpoints.add(new Paragraph("    ProbablySpam ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œ 7 days", normalFont));
//                        tncpoints.add(new Paragraph("7. NIC account will be deactivated, if not used for 90 days.", normalFont));
//                        tncpoints.add(new Paragraph("8. Email id will be deleted after a period of 9 months from the date of deactivation if no request for activation is received.", normalFont));
//                        tncpoints.add(new Paragraph("9. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to <b>servicedesk@nic.in</b>", normalFont));
//                        tncpoints.add(new Paragraph("10. Please note that advance payment is a must for paid users.", normalFont));
//                        tncpoints.add(new Paragraph("11. NIC coordinator reserves the right to ask for supporting documents like copy of identify card or any other document deemed appropriate to confirm the credentials of the applicant.", normalFont));
//                        tncpoints.add(new Paragraph("12. NIC will not share the details of Email Accounts and Email Addresses with anyone unless authorized by Reporting/Nodal/Forwarding Officer of the Department.", normalFont));
//                        tncpoints.add(new Paragraph("13. NIC does not capture any aadhaar related information.", normalFont));
//                        tncpoints.setAlignment(header.ALIGN_LEFT);
//                        document.add(tncpoints);
//                        document.add(emptypara);
                            // below function call added by pr on 3rdjan19, table created with status flow
                            createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));

                            document.close();

                            try {
                                genfileDownload = refno + ".pdf";
                                fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                            } catch (Exception e) {
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "IMAP POP PDF: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase("emailactivate")) {
                    String sql = "select * from email_act_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();

                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            try {
                                String final_dept;
                                /*switch (rs.getString("employment")) {
                                case "Central":
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        System.out.println("here1");
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        System.out.println("here2");
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }*/

                                // above code modified by pr on 10thjul19
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                    case "Nkn":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                        }
                                        break;
                                    default:
                                        /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }

                                        break;
                                }

                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font smallFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                header.add(new Paragraph("Single User Subscription Form", boldFont));
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", smallFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", smallFont));// line modified by pr on 18thjan19
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                                if (rs.getString("emp_code") == null || rs.getString("emp_code").equals("")) {
                                    details.add(new Paragraph("8) Designation* : " + rs.getString("designation"), normalFont));
                                } else {
                                    details.add(new Paragraph("8) Designation* : " + rs.getString("designation") + "               Employee Code : " + rs.getString("emp_code"), normalFont));
                                }
                                if (rs.getString("rphone") == null || rs.getString("rphone").equals("")) {
                                    details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone"), normalFont));
                                } else {
                                    details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone") + "               Telephone Number(R) : " + rs.getString("rphone"), normalFont));
                                }
                                details.add(new Paragraph("10) Official Address* : " + rs.getString("address"), normalFont));
                                details.add(new Paragraph("11) City* : " + rs.getString("city") + "           State* : " + rs.getString("add_state") + "           Pin Code* : " + rs.getString("pin"), normalFont));

                                details.add(new Paragraph("12) Preferred Email Address 1* : " + rs.getString("preferred_email1"), normalFont));
                                details.add(new Paragraph("13) Date of Retirement/Expiry* : " + rs.getString("dor"), normalFont));
                                // end, code added by pr on 8thjan19
                                document.add(details);
                                // above code commented below added by pr on 12thjan19
                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.setAlignment(footer.ALIGN_JUSTIFIED);
                                document.add(footer);
                                Paragraph footer1 = new Paragraph();
                                footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer1.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer1);
                                document.add(emptypara);
                                Paragraph billing = new Paragraph();
                                PdfPTable table_user = new PdfPTable(1);
                                PdfPCell cell1 = new PdfPCell(new Paragraph("FOR OFFICE USE", boldFont));
                                cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell1.setBackgroundColor(Color.GRAY);
                                table_user.addCell(cell1);
                                billing.add(table_user);
                                billing.add(new Paragraph("Billing Division(RR Section):", boldFont));
                                billing.add(new Paragraph("Payment Processed: Yes/ No:", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("User ID Creation:", boldFont));
                                billing.add(new Paragraph("Assigned login ID:________________________________Domain:_______________________________", normalFont));
                                billing.add(new Paragraph("Remarks(BO/PO):______________________________________________", normalFont));
                                document.add(billing);
                                document.add(emptypara);
                                Paragraph inoc = new Paragraph();
                                inoc.add(new Paragraph("Signature of iNOC incharge                                                                        Signature of the Operator"));
                                inoc.add(new Paragraph(""));
                                inoc.add(new Paragraph("Name & Designation:__________________________"));
                                inoc.setAlignment(inoc.ALIGN_RIGHT);
                                document.add(inoc);
                                document.newPage();
                                Paragraph tnc = new Paragraph();
                                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                                tnc.setAlignment(header.ALIGN_CENTER);
                                document.add(tnc);
                                //document.add(emptypara);
                                Paragraph tncpoints = new Paragraph();
                                tncpoints.add(new Paragraph("1. Users are requested to keep the given userid and password a secret.", normalFont));
                                tncpoints.add(new Paragraph("2. Please change your password at least once in every three months.", normalFont));
                                tncpoints.add(new Paragraph("3. By not doing so (point no. 1 & 2 above) the account may be compromised by hackers and the hacker can use the same account for sending spurious mails on the accounts behalf. NIC is neither responsible nor accountable for this type of misuse of the compromised mail accounts. Gross misuse might be detected by automated monitoring tools, which in turn will automatically deactivate the account.", normalFont));
                                tncpoints.add(new Paragraph("4. Do not use the Save password option on the browser when you are prompted for it .", normalFont));
                                tncpoints.add(new Paragraph("5.  Do not use your Government email address to register on public sites.", normalFont));
                                tncpoints.add(new Paragraph("6. Do not open any attachments unless, it has come from a known source. In fact delete those mails which are not relevant to you and still you have received them. They might contain a virus that will corrupt your computer.", normalFont));
                                tncpoints.add(new Paragraph("7. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                                tncpoints.add(new Paragraph("8. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                                tncpoints.add(new Paragraph("9. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                                tncpoints.add(new Paragraph("10. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                                tncpoints.add(new Paragraph("11. NIC e-Mail Service is provided over secure channels only. WEB interface can be accessed over HTTPs(port 443), POP service is over POP3s(port 995),IMAP service is over IMAPs(port 993) and SMTP service is over SMTPs(port 465). Users are required to suitably modify the client software settings to use the services.Please check the FAQ at: https://msgapp.emailgov.in/docs/assets/download/POP.pdf", normalFont));
                                tncpoints.add(new Paragraph("12. By default accounts will be given access over WEB only (https://mail.gov.in). If user wants to access over POP/IMAP,please generate a request through eForms (https://eforms.nic.in). For security reasons either POP or IMAP will be allowed. NIC recommends use of IMAP.", normalFont));
                                tncpoints.add(new Paragraph("13. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                                tncpoints.add(new Paragraph("14. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                                tncpoints.add(new Paragraph("15. Individuals are responsible for saving email messages as they deem appropriate. Messages will be automatically purged from folders as: Trash - 7 days, ProbablySpam - 7 days", normalFont));
                                tncpoints.add(new Paragraph("16. NIC account will be deactivated, if not used for 90 days.", normalFont));
                                tncpoints.add(new Paragraph("17. Email id will be deleted after a period of 9 months from the date of deactivation if no request for activation is received.", normalFont));
                                tncpoints.add(new Paragraph("18. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont));
                                tncpoints.add(new Paragraph("19. Please note that advance payment is a must for paid users.", normalFont));
                                tncpoints.add(new Paragraph("20. NIC coordinator reserves the right to ask for supporting documents like copy of identify card or any other document deemed appropriate to confirm the credentials of the applicant.", normalFont));
                                tncpoints.add(new Paragraph("21. NIC will not share the details of Email Accounts and Email Addresses with anyone unless authorized by Reporting/Nodal/Forwarding Officer of the Department.", normalFont));
                                tncpoints.add(new Paragraph("22. NIC does not capture any aadhaar related information.", normalFont));
                                tncpoints.add(new Paragraph("23. Government officers who resign or superannuate after rendering at least 20 years of service shall be allowed to retain the name based e-mail address. However, they need to intimate to NIC about their willingness to retain the id through NIC coordinator prior to retirement.", normalFont));
                                tncpoints.setAlignment(header.ALIGN_LEFT);
                                document.add(tncpoints);
                                //document.add(emptypara);
                                // below function call added by pr on 3rdjan19, table created with status flow
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF SINGLE exception: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF SINGLE exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase("emaildeactivate")) {
                    String sql = "select * from email_deact_registration where registration_no=?";
                    pst = null;
                    String json = null;
                    Map<String, Object> prvwdetails = new HashMap<String, Object>();

                    try {
//                    con = getConnection();
                        conSlave = DbConnection.getSlaveConnection();
                        pst = conSlave.prepareStatement(sql);
                        pst.setString(1, refno);
                        rs = pst.executeQuery();
                        while (rs.next()) {
                            try {
                                String final_dept;
                                /*switch (rs.getString("employment")) {
                                case "Central":
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                    if (rs.getString("department").equalsIgnoreCase("other")) {
                                        System.out.println("here1");
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                    } else {
                                        System.out.println("here2");
                                        final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                    }
                                    break;
                                case "Others":
                                case "Psu":
                                case "Const":
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    } else {
                                        final_dept = "1) Organization Name* : " + rs.getString("organization");
                                    }
                                    break;
                                default:
                                    if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }
                                    break;
                            }*/

                                // above code modified by pr on 10thjul19
                                switch (rs.getString("employment")) {
                                    case "Central":
                                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                        }
                                        break;
                                    case "Others":
                                    case "Psu":
                                    case "Const":
                                    case "Nkn":
                                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                                        } else {
                                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                                        }
                                        break;
                                    default:
                                        /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                                        if (rs.getString("department").equalsIgnoreCase("other")) {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                        } else {
                                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                        }

                                        break;
                                }

                                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                                Document document = new Document();
                                PdfWriter writer = PdfWriter.getInstance(document, file);
                                document.open();
                                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                                Font smallFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL);
                                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                                Paragraph emptypara = new Paragraph("\n");
                                Paragraph header = new Paragraph();
                                header.add(new Paragraph("Government of India", HeaderFont));
                                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                                header.add(new Paragraph("Single User Subscription Form", boldFont));
                                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                             + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", smallFont));*/
                                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", smallFont));// line modified by pr on 18thjan19
                                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                                header.setAlignment(header.ALIGN_CENTER);
                                document.add(header);
                                document.add(emptypara);
                                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                                document.add(reg_num);
                                document.add(emptypara);
                                Paragraph details = new Paragraph();
                                details.add(new Paragraph(final_dept, normalFont));
                                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                                if (rs.getString("emp_code") == null || rs.getString("emp_code").equals("")) {
                                    details.add(new Paragraph("8) Designation* : " + rs.getString("designation"), normalFont));
                                } else {
                                    details.add(new Paragraph("8) Designation* : " + rs.getString("designation") + "               Employee Code : " + rs.getString("emp_code"), normalFont));
                                }
                                if (rs.getString("rphone") == null || rs.getString("rphone").equals("")) {
                                    details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone"), normalFont));
                                } else {
                                    details.add(new Paragraph("9) Telephone Number(O)* : " + rs.getString("ophone") + "               Telephone Number(R) : " + rs.getString("rphone"), normalFont));
                                }
                                details.add(new Paragraph("10) Official Address* : " + rs.getString("address"), normalFont));
                                details.add(new Paragraph("11) City* : " + rs.getString("city") + "           State* : " + rs.getString("add_state") + "           Pin Code* : " + rs.getString("pin"), normalFont));

                                details.add(new Paragraph("12) Preferred Email Address 1* : " + rs.getString("preferred_email1"), normalFont));

                                // end, code added by pr on 8thjan19
                                document.add(details);
                                // above code commented below added by pr on 12thjan19
                                Paragraph footer = new Paragraph();
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer.add(new Paragraph(""));
                                footer.add(new Paragraph(""));
                                footer.setAlignment(footer.ALIGN_JUSTIFIED);
                                document.add(footer);
                                Paragraph footer1 = new Paragraph();
                                footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                                footer1.setAlignment(footer.ALIGN_RIGHT);
                                document.add(footer1);
                                document.add(emptypara);
                                Paragraph billing = new Paragraph();
                                PdfPTable table_user = new PdfPTable(1);
                                PdfPCell cell1 = new PdfPCell(new Paragraph("FOR OFFICE USE", boldFont));
                                cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell1.setBackgroundColor(Color.GRAY);
                                table_user.addCell(cell1);
                                billing.add(table_user);
                                billing.add(new Paragraph("Billing Division(RR Section):", boldFont));
                                billing.add(new Paragraph("Payment Processed: Yes/ No:", normalFont));
                                billing.add(new Paragraph(""));
                                billing.add(new Paragraph("User ID Creation:", boldFont));
                                billing.add(new Paragraph("Assigned login ID:________________________________Domain:_______________________________", normalFont));
                                billing.add(new Paragraph("Remarks(BO/PO):______________________________________________", normalFont));
                                document.add(billing);
                                document.add(emptypara);
                                Paragraph inoc = new Paragraph();
                                inoc.add(new Paragraph("Signature of iNOC incharge                                                                        Signature of the Operator"));
                                inoc.add(new Paragraph(""));
                                inoc.add(new Paragraph("Name & Designation:__________________________"));
                                inoc.setAlignment(inoc.ALIGN_RIGHT);
                                document.add(inoc);
                                document.newPage();
                                Paragraph tnc = new Paragraph();
                                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                                tnc.setAlignment(header.ALIGN_CENTER);
                                document.add(tnc);
                                //document.add(emptypara);
                                Paragraph tncpoints = new Paragraph();
                                tncpoints.add(new Paragraph("1. Users are requested to keep the given userid and password a secret.", normalFont));
                                tncpoints.add(new Paragraph("2. Please change your password at least once in every three months.", normalFont));
                                tncpoints.add(new Paragraph("3. By not doing so (point no. 1 & 2 above) the account may be compromised by hackers and the hacker can use the same account for sending spurious mails on the accounts behalf. NIC is neither responsible nor accountable for this type of misuse of the compromised mail accounts. Gross misuse might be detected by automated monitoring tools, which in turn will automatically deactivate the account.", normalFont));
                                tncpoints.add(new Paragraph("4. Do not use the Save password option on the browser when you are prompted for it .", normalFont));
                                tncpoints.add(new Paragraph("5.  Do not use your Government email address to register on public sites.", normalFont));
                                tncpoints.add(new Paragraph("6. Do not open any attachments unless, it has come from a known source. In fact delete those mails which are not relevant to you and still you have received them. They might contain a virus that will corrupt your computer.", normalFont));
                                tncpoints.add(new Paragraph("7. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                                tncpoints.add(new Paragraph("8. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                                tncpoints.add(new Paragraph("9. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                                tncpoints.add(new Paragraph("10. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                                tncpoints.add(new Paragraph("11. NIC e-Mail Service is provided over secure channels only. WEB interface can be accessed over HTTPs(port 443), POP service is over POP3s(port 995),IMAP service is over IMAPs(port 993) and SMTP service is over SMTPs(port 465). Users are required to suitably modify the client software settings to use the services.Please check the FAQ at: https://msgapp.emailgov.in/docs/assets/download/POP.pdf", normalFont));
                                tncpoints.add(new Paragraph("12. By default accounts will be given access over WEB only (https://mail.gov.in). If user wants to access over POP/IMAP,please generate a request through eForms (https://eforms.nic.in). For security reasons either POP or IMAP will be allowed. NIC recommends use of IMAP.", normalFont));
                                tncpoints.add(new Paragraph("13. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                                tncpoints.add(new Paragraph("14. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                                tncpoints.add(new Paragraph("15. Individuals are responsible for saving email messages as they deem appropriate. Messages will be automatically purged from folders as: Trash - 7 days, ProbablySpam - 7 days", normalFont));
                                tncpoints.add(new Paragraph("16. NIC account will be deactivated, if not used for 90 days.", normalFont));
                                tncpoints.add(new Paragraph("17. Email id will be deleted after a period of 9 months from the date of deactivation if no request for activation is received.", normalFont));
                                tncpoints.add(new Paragraph("18. Contact our 24x7 support if you have any problems. Phone <b>1800-111-555</b> or you can send mail to servicedesk.nic.in", normalFont));
                                tncpoints.add(new Paragraph("19. Please note that advance payment is a must for paid users.", normalFont));
                                tncpoints.add(new Paragraph("20. NIC coordinator reserves the right to ask for supporting documents like copy of identify card or any other document deemed appropriate to confirm the credentials of the applicant.", normalFont));
                                tncpoints.add(new Paragraph("21. NIC will not share the details of Email Accounts and Email Addresses with anyone unless authorized by Reporting/Nodal/Forwarding Officer of the Department.", normalFont));
                                tncpoints.add(new Paragraph("22. NIC does not capture any aadhaar related information.", normalFont));
                                tncpoints.add(new Paragraph("23. Government officers who resign or superannuate after rendering at least 20 years of service shall be allowed to retain the name based e-mail address. However, they need to intimate to NIC about their willingness to retain the id through NIC coordinator prior to retirement.", normalFont));
                                tncpoints.setAlignment(header.ALIGN_LEFT);
                                document.add(tncpoints);
                                //document.add(emptypara);
                                // below function call added by pr on 3rdjan19, table created with status flow
                                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                                document.close();
                                try {
                                    genfileDownload = refno + ".pdf";
                                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                                } catch (Exception e) {
                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF SINGLE exception: " + e.getMessage());
                            }
                            return SUCCESS;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF SINGLE exception: " + e.getMessage());
                    }
                } else if (whichform.equalsIgnoreCase("wifiport")) {
                    callwifiport(pst, refno, rs, rs1);
                } else if (whichform.equalsIgnoreCase("bulkdlist")) {
                    callBulkDlist(pst, refno, rs, rs1);
                } else if (whichform.equalsIgnoreCase("dorext")) {
                    callDor(pst, refno, rs, rs1);
                } else if (whichform.equalsIgnoreCase("DAONBOARDING")) {
                    callDaOnbodard(pst, refno, rs, rs1);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (rs1 != null) {
                    try {
                        rs1.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (rs2 != null) {
                    try {
                        rs2.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (rs3 != null) {
                    try {
                        rs3.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (rs4 != null) {
                    try {
                        rs4.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (pst != null) {
                    try {
                        pst.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (con != null) {
                    try {
                        // con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        } else {
            data = "You are not authorized to generate the PDF for this request as this request is still pending with RO/FO/Nodal Officer";
            return "failed";
//            data = "";
//            System.out.println("you are not allowed to generate this form");
//            return "sahil";
        }

        return SUCCESS;
    }

    public String callBulkDlist(PreparedStatement pst, String refno, ResultSet rs, ResultSet rs1) {
        String sql = "select * from bulk_distribution_registration where registration_no=?";
        pst = null;
        String json = null;
        Map<String, Object> prvwdetails = new HashMap<String, Object>();
        try {
//                    con = getConnection();
            conSlave = DbConnection.getSlaveConnection();
            pst = conSlave.prepareStatement(sql);
            pst.setString(1, refno);
            rs = pst.executeQuery();
            while (rs.next()) {
                String final_dept;

                /*switch (rs.getString("employment")) {
                            case "Central":
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "DEPT TAARARRRR " + rs.getString("department"));
                                if (rs.getString("department").equalsIgnoreCase("other")) {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                                }
                                break;
                            case "Others":
                            case "Psu":
                            case "Const":
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                } else {
                                    final_dept = "1) Organization Name* : " + rs.getString("organization");
                                }
                                break;
                            default:
                                if (rs.getString("organization").equalsIgnoreCase("other")) {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                } else {
                                    final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                }
                                break;
                        }*/
                // above code modified by pr on 10thjul19
                switch (rs.getString("employment")) {
                    case "Central":
                        if (rs.getString("department").equalsIgnoreCase("other")) {
                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                        } else {
                            final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                        }
                        break;
                    case "Others":
                    case "Psu":
                    case "Const":
                    case "Nkn":
                        if (rs.getString("organization").equalsIgnoreCase("other")) {
                            final_dept = "1) Organization Name* : " + rs.getString("organization") + " / " + rs.getString("other_dept");  // other dept added by pr on 10thjul19
                        } else {
                            final_dept = "1) Organization Name* : " + rs.getString("organization");  // other department added by pr on 10thjul19
                        }
                        break;
                    default:
                        /*if (rs.getString("organization").equalsIgnoreCase("other")) {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                                    } else {
                                        final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                                    }*/

                        if (rs.getString("department").equalsIgnoreCase("other")) {
                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                        } else {
                            final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                        }

                        break;
                }

                FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");
                Document document = new Document();
                PdfWriter writer = PdfWriter.getInstance(document, file);
                document.open();
                Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);
                Paragraph emptypara = new Paragraph("\n");
                Paragraph header = new Paragraph();
                header.add(new Paragraph("Government of India", HeaderFont));
                header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                header.add(new Paragraph("Distribution List Request Form", boldFont));
                /*header.add(new Paragraph("(In case of MANUAL submission, the COMPLETED application form, duly signed by the concerned Project Coordinator"
                         + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));*/
                header.add(new Paragraph("(In case of manual submission, the completed application form, duly sealed and signed, must be uploaded back "
                        + "to eForms portal by the applicant and his/her Reporting/Nodal/Forwarding Officer)", normalFont));// line modified by pr on 18thjan19
                header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                header.setAlignment(header.ALIGN_CENTER);
                document.add(header);
                document.add(emptypara);
                Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                reg_num.setAlignment(reg_num.ALIGN_RIGHT);
                document.add(reg_num);
                document.add(emptypara);
                Paragraph details = new Paragraph();
                details.add(new Paragraph(final_dept, normalFont));
                details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile") + "     Designation* : " + rs.getString("ca_desig"), normalFont));
                details.add(new Paragraph("8) Name of List* : " + rs.getString("list_name"), normalFont));
                details.add(new Paragraph("9) Description of List* : " + rs.getString("list_description"), normalFont));
                details.add(new Paragraph("10) Moderator Name* : " + rs.getString("moderator_name"), normalFont));
                details.add(new Paragraph("11) Moderator Email* : " + rs.getString("moderator_email"), normalFont));
                details.add(new Paragraph("12) Moderator Mobile* : " + rs.getString("moderator_mobile"), normalFont));
                details.add(new Paragraph("13) Will the List be moderated* : " + rs.getString("list_moderated"), normalFont));
                details.add(new Paragraph("14) Are only members allowed to send mails to the list* : " + rs.getString("allowed_member_mail"), normalFont));
                if (rs.getString("list_temp").equals("yes")) {
                    details.add(new Paragraph("15) Is list temporary* : " + rs.getString("list_temp") + "   Validity Date* : " + rs.getString("valid_date"), normalFont));
                } else {
                    details.add(new Paragraph("15) Is list temporary* : " + rs.getString("list_temp"), normalFont));
                }
                details.add(new Paragraph("16) Will list accept mail from a non-NICNET email address (from internet like gmail, yahoo etc)* : " + rs.getString("other_member_mail"), normalFont));
                document.add(details);
                document.add(emptypara);

                Paragraph footer = new Paragraph();
                footer.add(new Paragraph(""));
                footer.add(new Paragraph(""));
                footer.add(new Paragraph("Signature of the Applicant with date and seal     Signature of Reporting/Nodal/Forwarding Officer with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                footer.add(new Paragraph(""));
                footer.add(new Paragraph(""));
                footer.setAlignment(footer.ALIGN_JUSTIFIED);
                document.add(footer);
                Paragraph footer1 = new Paragraph();
                footer1.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", FontFactory.getFont(FontFactory.TIMES_ROMAN, 11, Font.NORMAL)));
                footer1.setAlignment(footer.ALIGN_RIGHT);
                document.add(footer1);
                document.add(emptypara);
                document.newPage();
                Paragraph tnc = new Paragraph();
                tnc.add(new Paragraph("Terms And Conditions", boldFont));
                tnc.setAlignment(header.ALIGN_CENTER);
                document.add(tnc);
                document.add(emptypara);
                Paragraph tncpoints = new Paragraph();
                tncpoints.add(new Paragraph("1. Entries marked with asterisk  (*) are mandatory", normalFont));
                tncpoints.add(new Paragraph("2. Users are requested to install the personal firewall software to secure their machine and e-mail traffic.", normalFont));
                tncpoints.add(new Paragraph("3. Users are requested to install the Antivirus software with latest pattern update periodically and OS patches in their system.", normalFont));
                tncpoints.add(new Paragraph("4. If using Outlook, Outlook Express, Mozilla Firefox on Microsoft WINDOWS, please apply the appropriate patches announced by the Microsoft/ Mozilla from time to time.", normalFont));
                tncpoints.add(new Paragraph("5. NIC is not responsible for the contents that are being sent as part of the mail. The views expressed are solely that of the originator.", normalFont));
                tncpoints.add(new Paragraph("6. NIC will take all possible measures to prevent data loss, however, due to unforeseen technical issues, if the same happens, NIC cannot be held responsible.", normalFont));
                tncpoints.add(new Paragraph("7. NIC does not capture any aadhaar related information.", normalFont));
                tncpoints.add(new Paragraph("8. User is responsible for his/her data. In case he/she accidentally deletes data, he/she will not ask NIC to restore it.", normalFont));
                tncpoints.setAlignment(header.ALIGN_LEFT);
                document.add(tncpoints);
                document.add(emptypara);
                // below function call added by pr on 3rdjan19, table created with status flow
                createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));
                document.close();
                try {
                    genfileDownload = refno + ".pdf";
                    fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                } catch (Exception e) {
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                }
                return SUCCESS;
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF DLIST exception: " + e.getMessage());
        }

        return SUCCESS;
    }

    public String callDaOnbodard(PreparedStatement pst, String refno, ResultSet rs, ResultSet rs1) {
        String sql = "select * from daonboarding_registration where registration_no=?";
        pst = null;
        String json = null;
        Map<String, Object> prvwdetails = new HashMap<String, Object>();
        try {
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection(); //29dec2021
            pst = conSlave.prepareStatement(sql);
            pst.setString(1, refno);
            rs = pst.executeQuery();

            while (rs.next()) {

                try {
                    String final_dept;
                    switch (rs.getString("employment")) {
                        case "Central":
                            if (rs.getString("department").equalsIgnoreCase("other")) {
                                final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                            } else {
                                final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                            }
                            break;
                        case "Others":
                        case "Psu":
                        case "Const":
                            if (rs.getString("organization").equalsIgnoreCase("other")) {
                                final_dept = "1) Organization Name* : " + rs.getString("organization");
                            } else {
                                final_dept = "1) Organization Name* : " + rs.getString("organization");
                            }
                            break;
                        default:
                            if (rs.getString("organization").equalsIgnoreCase("other")) {
                                final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                            } else {
                                final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                            }
                            break;
                    }
                    FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");

                    Document document = new Document();
                    PdfWriter writer = PdfWriter.getInstance(document, file);
                    document.open();

                    Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                    Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                    Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);

                    Paragraph emptypara = new Paragraph("\n");

                    Paragraph header = new Paragraph();

                    //header.add(new Paragraph("Government of India", HeaderFont));
                    //header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                    //header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));
                    //header.add(new Paragraph("(In case of manual submission, the completed application form, duly signed by the concerned Project Coordinator"
                    //        + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));
//                    header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
//                    header.setAlignment(header.ALIGN_CENTER);
//                    document.add(header);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    document.add(emptypara);
                    //document.add(emptypara);

                    Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                    reg_num.setAlignment(reg_num.ALIGN_RIGHT);

                    document.add(reg_num);
                    //document.add(emptypara);
                    /*
                    Paragraph details = new Paragraph();
                    details.add(new Paragraph(final_dept, normalFont));
                    details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                    details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email"), normalFont));
                    details.add(new Paragraph("4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                    details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                    details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                    details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile"), normalFont));
                    details.add(new Paragraph("8) VPN IP* : " + rs.getString("vpn_reg_no"), normalFont));
                    details.add(new Paragraph("9) BO Name* : " + rs.getString("bo_name"), normalFont));

                    document.add(details);
                    document.add(emptypara);

                    Paragraph footer = new Paragraph();
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Approved by Reporting/Nodal/Forwarding Officer", normalFont));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", normalFont));
                    footer.setAlignment(footer.ALIGN_RIGHT);
                    document.add(footer);
                     */
                    //document.newPage();
                    Paragraph auth_page = new Paragraph();
//                    auth_page.add(new Paragraph(""));
                    auth_page.add(new Paragraph("Authorization for Admin console for email accounts", boldFont));
                    auth_page.add(new Paragraph("[To be taken on organization Letter head]", boldFont));
                    auth_page.setAlignment(header.ALIGN_CENTER);
                    document.add(auth_page);

                    Paragraph auth_page_2 = new Paragraph();

                    auth_page_2.add(new Paragraph("1.Following officer is nominated as delegated administration for the Organization ", normalFont));
//                    auth_page_2.add(new Paragraph("  \"@......................................\"", normalFont));
                    if (rs.getString("employment") != null && !rs.getString("employment").isEmpty()) {
                        auth_page_2.add(new Paragraph("    Category           :  " + rs.getString("employment"), normalFont));
                    }
                    if (rs.getString("ministry") != null && !rs.getString("ministry").isEmpty()) {
                        auth_page_2.add(new Paragraph("    Ministry            :  " + rs.getString("ministry"), normalFont));
                    }
                    if (rs.getString("department") != null && !rs.getString("department").isEmpty()) {
                        auth_page_2.add(new Paragraph("    Department       :  " + rs.getString("department"), normalFont));
                    }
                    if (rs.getString("other_dept") != null && !rs.getString("other_dept").isEmpty()) {
                        auth_page_2.add(new Paragraph("    Department       :  " + rs.getString("other_dept"), normalFont));
                    }
                    if (rs.getString("state") != null && !rs.getString("state").isEmpty()) {
                        auth_page_2.add(new Paragraph("    State      :  " + rs.getString("state"), normalFont));
                    }
                    if (rs.getString("organization") != null && !rs.getString("organization").isEmpty()) {
                        auth_page_2.add(new Paragraph("    Organization      :  " + rs.getString("organization"), normalFont));
                    }
                    auth_page_2.add(new Paragraph("    Name                 :    " + rs.getString("auth_off_name"), normalFont));
                    auth_page_2.add(new Paragraph("    Designation*     :    " + rs.getString("designation"), normalFont));
                    //auth_page_2.add(new Paragraph("Email: (Name based email account on NIC mail server)", normalFont));
                    auth_page_2.add(new Paragraph("    Email                 :    " + rs.getString("auth_email"), normalFont));
                    auth_page_2.add(new Paragraph("    Mobile               :    " + rs.getString("mobile"), normalFont));
                    auth_page_2.add(new Paragraph("    Phone No           :    " + rs.getString("ophone"), normalFont));
                    auth_page_2.add(new Paragraph("    Postal Address   :    " + rs.getString("address"), normalFont));
                    //auth_page_2.add(new Paragraph("(NIC VPN for MAILADMIN has to be taken by the same person to access this admin console.)", boldFont));
                    auth_page_2.add(new Paragraph("2.  I  have  read  the  NIC  email  policy  https://eforms.nic.in/docs/policy.html  carefully ", normalFont));
                    auth_page_2.add(new Paragraph("    and  will strictly adhere to the same. ", normalFont));
                    auth_page_2.add(new Paragraph("3. Admin console will be used to manage", normalFont));
                    auth_page_2.add(new Paragraph("    No. of accounts  =  (Existing:                        Projected:                              )", normalFont));
                    float f = (float) 27.0;
                    auth_page_2.setIndentationLeft(f);
                    auth_page_2.setIndentationRight(f);
//                    auth_page_2.setLeading(f);
                    /*
                    auth_page_2.add(new Paragraph("4. It will be ensured that consultants and support staff ids arecreatedwith the following domains respectively.", normalFont));
                    auth_page_2.add(new Paragraph(""));
                    auth_page_2.add(new Paragraph(""));
                    auth_page_2.add(new Paragraph("a) @govcontractor.in", boldFont));
                    auth_page_2.add(new Paragraph("b) @supportgov.in", boldFont));
                    auth_page_2.add(new Paragraph("This is to declare that I have read the terms and conditions given above and agree to abide by them. I shall be single point of contact in case required. I will be responsible for any misuse of the service/ violation of the clauses. ", boldFont));
                     */
                    document.add(auth_page_2);
                    Paragraph footer2 = new Paragraph();
                    footer2.add(new Paragraph(""));
                    footer2.add(new Paragraph(""));
                    footer2.add(new Paragraph("Signature of the Applicant with date and seal", boldFont));
                    footer2.setAlignment(footer2.ALIGN_RIGHT);
                    footer2.setIndentationLeft(f);
                    footer2.setIndentationRight(f);
                    document.add(footer2);

                    Paragraph footer_2 = new Paragraph();
                    footer_2.add(new Paragraph(""));
                    footer_2.add(new Paragraph(""));
                    footer_2.add(new Paragraph("Approved by competent authority** with date and seal", boldFont));
                    footer_2.add(new Paragraph("Name:", boldFont));
                    footer_2.add(new Paragraph("Designation:", boldFont));
                    footer_2.add(new Paragraph("Email:", boldFont));
                    footer_2.add(new Paragraph(""));
                    footer_2.add(new Paragraph("Signature of NIC Coordinator with date and seal", boldFont));
                    footer_2.add(new Paragraph("Name:", boldFont));
                    footer_2.add(new Paragraph("Designation:", boldFont));
                    footer_2.add(new Paragraph("Email:", boldFont));
                    footer_2.setAlignment(footer_2.ALIGN_LEFT);
                    footer_2.setIndentationLeft(f);
                    footer_2.setIndentationRight(f);
                    document.add(footer_2);

                    Paragraph footer3 = new Paragraph();
                    footer3.add(new Paragraph(""));
                    footer3.add(new Paragraph("* Rank of Under Secretary/Equivalent or above.", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL)));
                    //footer3.add(new Paragraph("*Competent Authority: AS(IT)/ JS(IT) / Head of the Organization."));
                    footer3.add(new Paragraph(" ** Head of the organization/department/institute OR the officer of the rank of Joint Secretary/Equivalent or above", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL)));
                    footer3.setAlignment(footer3.ALIGN_LEFT);
                    document.add(footer3);

                    document.newPage();
                    Paragraph tnc = new Paragraph();
                    tnc.add(new Paragraph("Terms & Conditions", boldFont));
                    tnc.setAlignment(header.ALIGN_CENTER);
                    document.add(tnc);
                    //document.add(emptypara);
                    Paragraph tncpoints = new Paragraph();
                    tncpoints.add(new Paragraph("# I hereby take full responsibility and accountability for DA console and for all email accounts created under this domain and respond to any queries by LEAs if any.", normalFont));
//                    tncpoints.add(new Paragraph(""));
                    tncpoints.add(new Paragraph("# I will inform NIC in case of any change in delegated administrator.", normalFont));
//                    tncpoints.add(new Paragraph(""));
                    tncpoints.add(new Paragraph("# I will ensure the authenticity of the applicant.", normalFont));
//                    tncpoints.add(new Paragraph(""));
                    if (rs.getString("eligibility").equalsIgnoreCase("department")) {
                        tncpoints.add(new Paragraph("# I will create Consultants and support staff ids with the following domains respectively.", normalFont));
                        tncpoints.add(new Paragraph("a) @govcontractor.in", boldFont));
                        tncpoints.add(new Paragraph("b) @supportgov.in", boldFont));
//                    tncpoints.add(new Paragraph(""));
                    }
                    tncpoints.add(new Paragraph("# I will ensure that all the ids have correct date of expiry set as per the user profile and needful action will be taken on time. e.g. If the Govt officer wants to retain the name based email-id post superannuation, needful action will be taken by move the email-id to retire officers container. Similarly, contractual/support staff email ids will be deactivated/deleted at the end of the tenure.", normalFont));
//                    tncpoints.add(new Paragraph(""));
                    tncpoints.add(new Paragraph("# For organizations under paid accounts category, Delegated Administrator has to provide the relevant documents to NIC regarding proof of payment made to NICSI.", normalFont));
//                    tncpoints.add(new Paragraph(""));
                    tncpoints.add(new Paragraph("# Admin ID will be renewed every year. If user fails to do so, ID will be deactivated automatically.", normalFont));
//                    tncpoints.add(new Paragraph(""));
                    tncpoints.add(new Paragraph("# I agree to maintain the confidentiality, safekeeping and protection of confidential information contained in all user list.", normalFont));
                    tncpoints.add(new Paragraph(""));
                    tncpoints.setAlignment(header.ALIGN_LEFT);
                    tncpoints.setIndentationLeft(f);
                    tncpoints.setIndentationRight(f);
                    document.add(tncpoints);

                    Paragraph tncpoints_2 = new Paragraph();
                    tncpoints_2.add(new Paragraph("This is to declare that I have read the terms and conditions given above and agree to abide by them. I shall be single point of contact in case required. I will be responsible for any misuse of the service/violation of the clauses.", boldFont));
                    tncpoints_2.add(new Paragraph(""));
                    tncpoints_2.setAlignment(header.ALIGN_LEFT);
                    tncpoints_2.setIndentationLeft(f);
                    tncpoints_2.setIndentationRight(f);
                    document.add(tncpoints_2);

                    document.add(footer2);
                    document.add(footer_2);
                    document.add(footer3);
                    document.close();
                    pst.close();
                    //rs1.close();
                    try {
                        genfileDownload = refno + ".pdf";
                        fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                    } catch (Exception e) {
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF DNS exception: " + e.getMessage());
                }
            }
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
        }

        return SUCCESS;
    }

    public String callwifiport(PreparedStatement pst, String refno, ResultSet rs, ResultSet rs1) {
        String sql = "select * from wifiport_registration where registration_no=?";
        pst = null;
        String json = null;
        Map<String, Object> prvwdetails = new HashMap<String, Object>();
        try {
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection(); //29dec2021
            pst = conSlave.prepareStatement(sql);
            pst.setString(1, refno);
            rs = pst.executeQuery();

            while (rs.next()) {

                try {
                    String final_dept;
                    switch (rs.getString("employment")) {
                        case "Central":
                            if (rs.getString("department").equalsIgnoreCase("other")) {
                                final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                            } else {
                                final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                            }
                            break;
                        case "Others":
                        case "Psu":
                        case "Const":
                            if (rs.getString("organization").equalsIgnoreCase("other")) {
                                final_dept = "1) Organization Name* : " + rs.getString("organization");
                            } else {
                                final_dept = "1) Organization Name* : " + rs.getString("organization");
                            }
                            break;
                        default:
                            if (rs.getString("organization").equalsIgnoreCase("other")) {
                                final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                            } else {
                                final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                            }
                            break;
                    }
                    FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");

                    Document document = new Document();
                    PdfWriter writer = PdfWriter.getInstance(document, file);
                    document.open();

                    Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                    Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                    Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);

                    Paragraph emptypara = new Paragraph("\n");

                    Paragraph header = new Paragraph();

                    header.add(new Paragraph("Government of India", HeaderFont));
                    header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                    header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));

                    header.add(new Paragraph("(In case of manual submission, the completed application form, duly signed by the concerned Project Coordinator"
                            + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));
                    header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                    header.setAlignment(header.ALIGN_CENTER);
                    document.add(header);
                    document.add(emptypara);

                    Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                    reg_num.setAlignment(reg_num.ALIGN_RIGHT);

                    document.add(reg_num);
                    document.add(emptypara);

                    Paragraph details = new Paragraph();
                    details.add(new Paragraph(final_dept, normalFont));
                    details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                    details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                    details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                    details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                    details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile"), normalFont));
                    details.add(new Paragraph("8) WiFiPort Entry Details : ", normalFont));
                    pst = conSlave.prepareStatement("select sourceIP,destinationIP,service,ports,action,timeperiod from wifiport_entries where registration_no=?");
                    pst.setString(1, refno);
                    rs1 = pst.executeQuery();
                    String sourceIP = "";
                    String destinationIP = "";
                    String service = "";
                    String ports = "";
                    String action = "";
                    String timePeriod = "";
                    while (rs1.next()) {
                        sourceIP += rs1.getString("sourceIP").concat(";");
                        destinationIP += rs1.getString("destinationIP").concat(";");
                        service += rs1.getString("service").concat(";");
                        ports += rs1.getString("ports").concat(";");
                        action += rs1.getString("action").concat(";");
                        timePeriod += rs1.getString("timePeriod").concat(";");
                    }
                    if (sourceIP.length() > 0) {
                        sourceIP = sourceIP.substring(0, sourceIP.length() - 1);

                        if (sourceIP.contains(";")) {
                            details.add(new Paragraph("sourceIP* : " + sourceIP.replaceAll(";", " , "), normalFont));
                        } else {
                            details.add(new Paragraph("sourceIP* : " + sourceIP, normalFont));

                        }

                    }
                    if (destinationIP.length() > 0) {
                        destinationIP = destinationIP.substring(0, destinationIP.length() - 1);

                        if (destinationIP.contains(";")) {
                            details.add(new Paragraph("destinationIP* : " + destinationIP.replaceAll(";", " , "), normalFont));
                        } else {
                            details.add(new Paragraph("destinationIP* : " + destinationIP, normalFont));

                        }

                    }
                    if (service.length() > 0) {
                        service = service.substring(0, service.length() - 1);

                        if (service.contains(";")) {
                            details.add(new Paragraph("service* : " + service.replaceAll(";", " , "), normalFont));
                        } else {
                            details.add(new Paragraph("service* : " + service, normalFont));

                        }

                    }
                    if (ports.length() > 0) {
                        ports = ports.substring(0, ports.length() - 1);

                        if (ports.contains(";")) {
                            details.add(new Paragraph("ports* : " + ports.replaceAll(";", " , "), normalFont));
                        } else {
                            details.add(new Paragraph("ports* : " + ports, normalFont));

                        }

                    }
                    if (action.length() > 0) {
                        action = action.substring(0, action.length() - 1);

                        if (action.contains(";")) {
                            details.add(new Paragraph("action* : " + action.replaceAll(";", " , "), normalFont));
                        } else {
                            details.add(new Paragraph("action* : " + action, normalFont));

                        }

                    }
                    if (timePeriod.length() > 0) {
                        timePeriod = timePeriod.substring(0, timePeriod.length() - 1);

                        if (timePeriod.contains(";")) {
                            details.add(new Paragraph("timePeriod* : " + timePeriod.replaceAll(";", " , "), normalFont));
                        } else {
                            details.add(new Paragraph("timePeriod* : " + timePeriod, normalFont));

                        }

                    }
                    details.add(new Paragraph("9) Purpose : " + rs.getString("purpose"), normalFont));

                    pst.close();
                    rs1.close();

                    document.add(details);
                    document.add(emptypara);

                    Paragraph footer = new Paragraph();
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Approved by Reporting/Nodal/Forwarding Officer", normalFont));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", normalFont));
                    footer.setAlignment(footer.ALIGN_RIGHT);
                    document.add(footer);

                    document.close();
                    try {
                        genfileDownload = refno + ".pdf";
                        fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                    } catch (Exception e) {
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF DNS exception: " + e.getMessage());
                }
            }
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
        }

        return SUCCESS;
    }

    public String callDor(PreparedStatement pst, String refno, ResultSet rs, ResultSet rs1) {
        String sql = "select * from dor_ext_registration where registration_no=?";
        pst = null;
        String json = null;
        Map<String, Object> prvwdetails = new HashMap<String, Object>();
        try {
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection(); //29dec2021
            pst = conSlave.prepareStatement(sql);
            pst.setString(1, refno);
            rs = pst.executeQuery();

            while (rs.next()) {

                try {
                    String final_dept;
                    switch (rs.getString("employment")) {
                        case "Central":
                            if (rs.getString("department").equalsIgnoreCase("other")) {
                                final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("other_dept");
                            } else {
                                final_dept = "1) Ministry/Department* : " + rs.getString("ministry") + " / " + rs.getString("department");
                            }
                            break;
                        case "Others":
                        case "Psu":
                        case "Const":
                            if (rs.getString("organization").equalsIgnoreCase("other")) {
                                final_dept = "1) Organization Name* : " + rs.getString("organization");
                            } else {
                                final_dept = "1) Organization Name* : " + rs.getString("organization");
                            }
                            break;
                        default:
                            if (rs.getString("organization").equalsIgnoreCase("other")) {
                                final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("other_dept");
                            } else {
                                final_dept = "1) State/Department* : " + rs.getString("state") + " / " + rs.getString("department");
                            }
                            break;
                    }
                    FileOutputStream file = new FileOutputStream(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf");

                    Document document = new Document();
                    PdfWriter writer = PdfWriter.getInstance(document, file);
                    document.open();

                    Font normalFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.NORMAL);
                    Font boldFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD);
                    Font HeaderFont = FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD);

                    Paragraph emptypara = new Paragraph("\n");

                    Paragraph header = new Paragraph();

                    header.add(new Paragraph("Government of India", HeaderFont));
                    header.add(new Paragraph("Ministry of Electronics & Information Technology", HeaderFont));
                    header.add(new Paragraph("NATIONAL INFORMATICS CENTRE", HeaderFont));

                    header.add(new Paragraph("(In case of manual submission, the completed application form, duly signed by the concerned Project Coordinator"
                            + " /Reporting/Nodal/Forwarding Officer of the concerned NIC Cell, should be submitted to Support Center at 'iNOC, A4B2 Bay, A-Block C.G.O. Complex')", normalFont));
                    header.add(new Paragraph("Please sign on each page. Entries marked asterisk(*) are mandatory", normalFont));
                    header.setAlignment(header.ALIGN_CENTER);
                    document.add(header);
                    document.add(emptypara);

                    Paragraph reg_num = new Paragraph("Registration number :" + refno, boldFont);
                    reg_num.setAlignment(reg_num.ALIGN_RIGHT);

                    document.add(reg_num);
                    document.add(emptypara);

                    Paragraph details = new Paragraph();
                    details.add(new Paragraph(final_dept, normalFont));
                    details.add(new Paragraph("2) Applicant Name* : " + rs.getString("auth_off_name"), normalFont));
                    details.add(new Paragraph("3) Applicant Email* : " + rs.getString("auth_email") + "       4) Applicant Mobile* : " + rs.getString("mobile"), normalFont));
                    details.add(new Paragraph("5) Reporting/Nodal/Forwarding Officer Name* : " + rs.getString("hod_name"), normalFont));
                    details.add(new Paragraph("6) Reporting/Nodal/Forwarding Officer Email* : " + rs.getString("hod_email"), normalFont));
                    details.add(new Paragraph("7) Reporting/Nodal/Forwarding Officer Mobile* : " + rs.getString("hod_mobile"), normalFont));
                    details.add(new Paragraph("8) Preferred Email Address * : " + rs.getString("dor_email"), normalFont));
                    details.add(new Paragraph("9) Previous Date Of Retirement * : " + rs.getString("pre_dor"), normalFont));
                    details.add(new Paragraph("10) Date Of Retirement * : " + rs.getString("dor"), normalFont));

                    document.add(details);
                    document.add(emptypara);

                    Paragraph footer = new Paragraph();
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Signature of the Applicant with date and seal", normalFont));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Approved by Reporting/Nodal/Forwarding Officer", normalFont));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph(""));
                    footer.add(new Paragraph("Signature of NIC COORDINATOR with date and seal", normalFont));
                    footer.setAlignment(footer.ALIGN_RIGHT);
                    document.add(footer);
                    createStatusTable(refno, document, header, emptypara, normalFont, boldFont, rs.getString("auth_email"), rs.getString("mobile"), rs.getString("userip"));

                    document.close();

                    try {
                        genfileDownload = refno + ".pdf";
                        fileInputStream = new FileInputStream(new File(ServletActionContext.getServletContext().getInitParameter("rawPdfLocation") + refno + ".pdf"));
                    } catch (Exception e) {
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "PDF DNS exception: " + e.getMessage());
                }
            }
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
        }

        return SUCCESS;
    }

    public void createStatusTable(String refno, Document document, Paragraph header, Paragraph emptypara, Font normalFont, Font boldFont, String auth_email, String mobile, String userip) {
        try {
            ArrayList tableArr = fetchStatusAdmins(refno);
            document.newPage();
            Paragraph statusHead = new Paragraph();
            statusHead.add(new Paragraph("Application Approval Details for Reg No - " + refno, boldFont));
            statusHead.setAlignment(header.ALIGN_CENTER);
            document.add(statusHead);
            document.add(emptypara);
            // start,  applicant details table
            PdfPTable table = new PdfPTable(5); // table with 4 columns
            //table.setTotalWidth(new float[]{240, 240}); // widths of columns
            table.setTotalWidth(new float[]{160, 100, 100, 120, 120}); // widths of columns
            //table.setLockedWidth(true);
            table.setWidthPercentage(100f);
            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            table.getDefaultCell().setPadding(9f);
            // first row          
            PdfPCell cell = new PdfPCell(new Phrase("Submitted By", boldFont)); // second row first column
            //cell.setFixedHeight(30);
            //cell.setVerticalAlignment(Element.ALIGN_CENTER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("IP Details", boldFont)); // second row second column
            //cell.setFixedHeight(30);
            //cell.setVerticalAlignment(Element.ALIGN_CENTER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            //cell.setColspan(3);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            // second row
            cell = new PdfPCell(new Phrase("Datetime", boldFont)); // second row first column
            //cell.setFixedHeight(30);
            //cell.setVerticalAlignment(Element.ALIGN_CENTER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Submitted To", boldFont)); // second row first column
            //cell.setFixedHeight(30);
            //cell.setVerticalAlignment(Element.ALIGN_CENTER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("Status", boldFont)); // line modified by pr on 29thnov18
            //cell.setFixedHeight(30);
            //cell.setVerticalAlignment(Element.ALIGN_CENTER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            //cell.setColspan(3);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            // iterate the arraylist for roles and details
            String submitted_by = "", detail = "", submitted_to = "", status = "", date = "", ip = "";
            HashMap hmNew = null;
            for (Object hm : tableArr) {
                role = "";
                ip = "";
                date = "";
                detail = "";
                hmNew = (HashMap) hm;
                if (hmNew != null && hmNew.size() > 0) {
                    if (hmNew.get("submitted_by") != null) {
                        submitted_by = hmNew.get("submitted_by").toString();
                    }
                    if (hmNew.get("submitted_to") != null) {
                        submitted_to = hmNew.get("submitted_to").toString();
                    }
                    if (hmNew.get("ip") != null) {
                        ip = hmNew.get("ip").toString();
                    }
                    if (hmNew.get("date") != null) {
                        date = hmNew.get("date").toString();
                    }
                    if (hmNew.get("detail") != null) {
                        detail = hmNew.get("detail").toString();
                    }
                    if (hmNew.get("status") != null) {
                        status = hmNew.get("status").toString();
                    }
                }
                if (submitted_by.equalsIgnoreCase("user")) {
                    detail = auth_email + ", " + mobile;
                }
                //if (ip.equals("")) {
                if (ip.equals("") && submitted_by.toLowerCase().contains("user")) { // submitted by condition added by pr on 25thoct19
                    ip = userip;
                }
                submitted_by = submitted_by + " (" + detail + ")";
                cell = new PdfPCell(new Phrase(submitted_by, normalFont)); // second row first column
                //cell.setFixedHeight(30);
                //cell.setVerticalAlignment(Element.ALIGN_CENTER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(ip, normalFont)); // second row second column
                //cell.setFixedHeight(30);
                //cell.setVerticalAlignment(Element.ALIGN_CENTER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                //cell.setColspan(3);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(date, normalFont)); // second row first column
                //cell.setFixedHeight(30);
                //cell.setVerticalAlignment(Element.ALIGN_CENTER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(submitted_to, normalFont)); // second row first column
                //cell.setFixedHeight(30);
                //cell.setVerticalAlignment(Element.ALIGN_CENTER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(status, normalFont)); // second row first column
                //cell.setFixedHeight(30);
                //cell.setVerticalAlignment(Element.ALIGN_CENTER);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
            }
            table.setHorizontalAlignment(Element.ALIGN_LEFT);
            document.add(table);
            document.add(emptypara);
            // end, code added by pr on 3rdjan19
        } catch (Exception e) {
            System.out.println(printlog + " inside create table exception " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void createDNSTable(String refno, Document document, Paragraph header, Paragraph emptypara, Font normalFont, Font boldFont, String req_other_add, String req_type) {
        try {
            ArrayList tableArr = fetchStatusAdmins(refno);
            document.newPage();
            Paragraph statusHead = new Paragraph();
            statusHead.add(new Paragraph("DNS Entry Details", boldFont));
            statusHead.setAlignment(header.ALIGN_CENTER);
            document.add(statusHead);
            document.add(emptypara);
            PdfPTable table = null;
            PdfPCell cell = null;
            List<DnsBean> listOfDnsBean = null;
            switch (req_type) {
                case "req_new":
                case "req_delete":
                    switch (req_other_add) {
                        case "":
                            table = new PdfPTable(5);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("CNAME", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("IP", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getCname(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getNew_ip(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "cname":
                            table = new PdfPTable(4);
                            table.setTotalWidth(new float[]{100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New CNAME", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getCname_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "txt":
                            table = new PdfPTable(4);
                            table.setTotalWidth(new float[]{100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New TXT", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getTxt_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "ptr":
                            table = new PdfPTable(4);
                            table.setTotalWidth(new float[]{100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New PTR", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getPtr_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "mx":
                            table = new PdfPTable(4);
                            table.setTotalWidth(new float[]{100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New MX", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMx_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "spf":
                            table = new PdfPTable(4);
                            table.setTotalWidth(new float[]{100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New SPF", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getSpf_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "srv":
                            table = new PdfPTable(4);
                            table.setTotalWidth(new float[]{100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New SRV", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getSrv_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "dmarc":
                            table = new PdfPTable(4);
                            table.setTotalWidth(new float[]{100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New DMARC", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDmarc_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                    }
                    break;
                case "req_modify":
                    switch (req_other_add) {
                        case "":
                            table = new PdfPTable(6);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("CNAME", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("OLD IP", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("IP", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getCname(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getOld_ip(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getNew_ip(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "cname":
                            table = new PdfPTable(5);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Old CNAME", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New CNAME", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getOld_cname_txt(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getCname_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "txt":
                            table = new PdfPTable(5);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Old TXT", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New TXT", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getOld_txt_txt(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getTxt_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "ptr":
                            table = new PdfPTable(5);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Old PTR", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New PTR", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getOld_ptr_txt(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getPtr_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "mx":
                            table = new PdfPTable(5);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Old MX", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New MX", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getOld_mx_txt(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMx_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "spf":
                            table = new PdfPTable(5);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Old SPF", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New SPF", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getOld_spf_txt(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getSpf_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "srv":
                            table = new PdfPTable(5);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Old SRV", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New SRV", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getOld_srv_txt(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getSrv_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                        case "dmarc":
                            table = new PdfPTable(5);
                            table.setTotalWidth(new float[]{100, 100, 100, 100, 100}); // widths of columns
                            table.setWidthPercentage(100f);
                            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                            table.getDefaultCell().setPadding(9f);
                            cell = new PdfPCell(new Phrase("Domain", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Old DMARC", boldFont)); // second row second column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("New DMARC", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Location", boldFont)); // second row first column
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);
                            cell = new PdfPCell(new Phrase("Migration Date", boldFont)); // line modified by pr on 29thnov18
                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                            cell.setPadding(9f);
                            cell.setBorder(Rectangle.BOX);
                            table.addCell(cell);

                            listOfDnsBean = dnsservice.fetchSuccessBulkData(refno, req_type, req_other_add);
                            for (DnsBean dnsData : listOfDnsBean) {
                                cell = new PdfPCell(new Phrase(dnsData.getDomain(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getOld_dmarc_txt(), normalFont)); // second row second column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDmarc_txt(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getDns_loc(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                                cell = new PdfPCell(new Phrase(dnsData.getMigration_date(), normalFont)); // second row first column
                                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                                cell.setPadding(9f);
                                cell.setBorder(Rectangle.BOX);
                                table.addCell(cell);
                            }
                            table.setHorizontalAlignment(Element.ALIGN_LEFT);
                            document.add(table);
                            document.add(emptypara);
                            break;
                    }
                    break;
            }

            // end, code added by pr on 3rdjan19
        } catch (Exception e) {
            System.out.println(printlog + " inside create table exception " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void docUploader() {
        String SessionCSRFRandom = session.get("CSRFRandom").toString();
        if (!CSRFRandom.equals(SessionCSRFRandom)) {
            hmTrack.put("csrf_error", "CSRF Token is invalid.");
            return;
        }
        // start, code added by pr on 25thapr19
        String role = fetch_role();
        System.out.println("admin.UserTrack.docUploader():::: " + upload_file);
        panel = role.toUpperCase();

        System.out.println(printlog + " panel value is " + panel);

        ref_no = ref_no.trim();

        panel = panel.trim();

        // end, code added by pr on 25thapr19
        ResultSet rs1 = null;
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            int i = 0;
            for (File uploadfile : upload_file) {
                Date date = new Date();
                DateFormat dt = new SimpleDateFormat("ddMMyyyyHHmmss");
                String pdate = dt.format(date);
                //File destFile = new File("/eForms/DocPDF/", upload_file_ids[i] + pdate + ".pdf");
                File destFile = new File(ServletActionContext.getServletContext().getInitParameter("multipleUploadPdfLocation"), upload_file_ids[i] + pdate + ".pdf");
                FileUtils.copyFile(uploadfile, destFile);
                Boolean fileError = fileservice.checkPDF(destFile);
                if (!fileError) {
                    String sql = "";
                    con = DbConnection.getConnection();
                    conSlave = DbConnection.getSlaveConnection();
                    String search_regnum = "select count(*) from doc_upload where registration_no = ? and role = ?";
                    pst = conSlave.prepareStatement(search_regnum);
                    pst.setString(1, ref_no);
                    pst.setString(2, panel);
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde docUploader query1: " + pst);

                    rs1 = pst.executeQuery();
                    if (rs1.next()) {
                        System.out.println("admin.UserTrack.docUploader(): rs1.getInt(1)::::: " + rs1.getInt(1));
                        if (rs1.getInt(1) < 5) {
                            sql = "insert into doc_upload(registration_no,doc,doc_path,role)"
                                    + "values (?,?,?,?)";
                            try {
                                pst = con.prepareStatement(sql);
                                pst.setString(1, ref_no);
                                pst.setString(2, destFile.getName());
                                pst.setString(3, destFile.getAbsolutePath());
                                pst.setString(4, panel);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde docUploader query2: " + pst);
                                int inserted = pst.executeUpdate();
                                if (inserted > 0) {
                                    FileUtils.copyFile(uploadfile, destFile);
                                    ServletActionContext.getResponse().getOutputStream().print("file_uploaded=>" + upload_file_ids[i] + ";");
                                }

                                // start, code added by pr on 2ndmay19
                                // send intimation mail to all the heirarchy for file upload
                                Inform obj = new Inform();

                                String email = "";

                                if (session.get("uservalues") != null) {
                                    UserData userdata = (UserData) session.get("uservalues");

                                    email = userdata.getEmail();
                                }

                                obj.sendUploadNotification(ref_no, panel, email); // line added by pr on 2ndmay19

                                // end, code added by pr on 2ndmay19
                            } catch (SQLException ex) {
                                Logger.getLogger(UserTrack.class
                                        .getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            try {
                                destFile.delete();
                                ServletActionContext.getResponse().getOutputStream().print("exceed_limit=>" + upload_file_ids[i] + ";");
                                //return upload_file_ids;

                            } catch (IOException ex) {
                                Logger.getLogger(UserTrack.class
                                        .getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                } else {
                    try {
                        destFile.delete();
                        ServletActionContext.getResponse().getOutputStream().print("syserr=>" + upload_file_ids[i] + ";");

                    } catch (IOException ex) {
                        Logger.getLogger(UserTrack.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
                i++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IOException ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public String fetchDocUploaderCount() {
        ResultSet rs1 = null;
        PreparedStatement pst = null;
        //int count = 0;
        try {
            ref_no = ref_no.trim();
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection();
            String search_regnum = "select count(*) from doc_upload where registration_no = ? ";
            pst = conSlave.prepareStatement(search_regnum);
            pst.setString(1, ref_no);
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde fetchdocUploaderCount query1: " + pst);
            rs1 = pst.executeQuery();
            while (rs1.next()) {
                count = rs1.getInt("count(*)");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserTrack.class.getName()).log(Level.SEVERE, null, ex);
        }
        return SUCCESS;
    }

    public void docUploader_bulk_tab3(String ref_num) { //29-apr-2022
        session = ActionContext.getContext().getSession();
        String role = "USER";//fetch_role();      
        String path = session.get("renamed_filepath").toString();
        String filename = path.substring(path.lastIndexOf('/') + 1);
        System.out.println("admin.UserTrack.docUploader_bulk_tab3 filename:::: " + filename);
        System.out.println("admin.UserTrack.docUploader_bulk_tab3 path:::: " + path);
        panel = role.toUpperCase();

        System.out.println(printlog + " panel value is " + panel);

        ref_num = ref_num.trim();

        panel = panel.trim();

        // end, code added by pr on 25thapr19
        ResultSet rs1 = null;
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            con = DbConnection.getConnection();
            String sql = "insert into doc_upload(registration_no,doc,doc_path,role)"
                    + "values (?,?,?,?)";

            pst = con.prepareStatement(sql);
            pst.setString(1, ref_num);
            pst.setString(2, filename);
            pst.setString(3, path);
            pst.setString(4, panel);
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde docUploader query2: " + pst);

            int inserted = pst.executeUpdate();
            System.out.println("inserted " + inserted);
        } catch (SQLException ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void fetchCert() {
        String json = null;
        Map<String, Object> certdetails = new HashMap<String, Object>();
        ResultSet rs = null;
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection();
            String table = "";
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde getCert whichform: " + whichform);

            if (whichform.contains("SINGLE")) {
                table = "single_registration";
            }
            if (whichform.contains("BULK")) {
                table = "bulk_registration";
            }
            if (whichform.contains("NKN")) {
                table = "nkn_registration";
            }
            if (whichform.contains("GEM")) {
                table = "gem_registration";
            }
            if (whichform.contains("DLIST")) {
                table = "distribution_registration";
            }
            if (whichform.contains("BULKDLIST")) {
                table = "bulk_distribution_registration";
            }
            if (whichform.contains("DNS")) {
                table = "dns_registration";
            }
            if (whichform.contains("FIREWALL")) {
                table = "firewall_registration";
            }
            if (whichform.contains("IMAP")) {
                table = "imappop_registration";
            }
            if (whichform.contains("IP")) {
                table = "ip_registration";
            }
            if (whichform.contains("SMS")) {
                table = "sms_registration";
            }
            if (whichform.contains("RELAY")) {
                table = "relay_registration";
            }
            if (whichform.contains("MOBILE")) {
                table = "mobile_registration";
            }
            if (whichform.contains("WIFI")) {
                table = "wifi_registration";
            }
            if (whichform.contains("WIFIPORT")) {
                table = "wifiport_registration";
            }
            if (whichform.contains("LDAP")) {
                table = "ldap_registration";
            }
            if (whichform.contains("WEBCAST")) {
                table = "webcast_registration";
            }
            if (whichform.contains("DAONBOARDING")) {
                table = "daonboarding_registration";
            }
            String sql = "select sign_cert,rename_sign_cert,registration_no from " + table + " where registration_no =?";
            pst = conSlave.prepareStatement(sql);
            pst.setString(1, ref_no.trim());
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde getCert query is: " + pst);

            rs = pst.executeQuery();
            while (rs.next()) {
                if (rs.getString("sign_cert") != null) {
                    if (!rs.getString("sign_cert").equals("") || rs.getString("sign_cert") != null) {
                        certdetails.put("sign_cert", rs.getString("sign_cert"));
                        certdetails.put("rename_sign_cert", rs.getString("rename_sign_cert"));
                        certdetails.put("registration_no", rs.getString("registration_no"));
                        session.put("renamed_filepath_cert", rs.getString("rename_sign_cert"));
                    } else {
                        certdetails.put("sign_cert", "");
                    }
                } else {
                    certdetails.put("sign_cert", "");
                }
                //count++;
            }

            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde getCert query certdetails: " + certdetails);

            json = new Gson().toJson(certdetails);
            ServletActionContext.getResponse().setContentType("application/json");
            ServletActionContext.getResponse().getWriter().write(json);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        //return certificate;
    }

    public String fileDelete() {
        String json = null;
        Map<String, Object> certdetails = new HashMap<String, Object>();
        ResultSet rs = null;
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection();
            String table = "";
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde delete : " + whichform + "regno" + data);

            if (whichform.contains("SINGLE")) {
                table = "single_registration";
            }
            if (whichform.contains("BULK")) {
                table = "bulk_registration";
            }
            if (whichform.contains("NKN")) {
                table = "nkn_registration";
            }
            if (whichform.contains("GEM")) {
                table = "gem_registration";
            }
            if (whichform.contains("DLIST")) {
                table = "distribution_registration";
            }
            if (whichform.contains("BULKDLIST")) {
                table = "bulk_distribution_registration";     // Added by Rahul jan 2021
            }
            if (whichform.contains("DNS")) {
                table = "dns_registration";
            }
            if (whichform.contains("FIREWALL")) {
                table = "firewall_registration";
            }
            if (whichform.contains("IMAP")) {
                table = "imappop_registration";
            }
            if (whichform.contains("IP")) {
                table = "ip_registration";
            }
            if (whichform.contains("SMS")) {
                table = "sms_registration";
            }
            if (whichform.contains("RELAY")) {
                table = "relay_registration";
            }
            if (whichform.contains("MOBILE")) {
                table = "mobile_registration";
            }
            if (whichform.contains("WIFI")) {
                table = "wifi_registration";
            }
            if (whichform.contains("WIFIPORT")) {
                table = "wifiport_registration";
            }
            if (whichform.contains("LDAP")) {
                table = "ldap_registration";
            }
            if (whichform.contains("WEBCAST")) {
                table = "webcast_registration";
            }
            String sql = "delete from doc_upload where registration_no =? and doc=? and role=?";
//            pst = conSlave.prepareStatement(sql);
            pst = con.prepareStatement(sql); //29dec2021
            pst.setString(1, data.trim());
            pst.setString(2, filetoDelete.trim());
            pst.setString(3, panel);
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde delete file query is: " + pst);
            int i = pst.executeUpdate();
            if (i > 0) {
                returnString = "success";
            } else {
                returnString = "unsuccess";
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return SUCCESS;
    }

    public void updatecert() {
        String json = null;
        Map<String, Object> certdetails = new HashMap<String, Object>();
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            String table = "";
            if (whichform.contains("SINGLE")) {
                table = "single_registration";
            }
            if (whichform.contains("bulk")) {
                table = "bulk_registration";
            }
            if (whichform.contains("NKN")) {
                table = "nkn_registration";
            }
            if (whichform.contains("GEM")) {
                table = "gem_registration";
            }
            if (whichform.contains("DLIST")) {
                table = "distribution_registration";
            }
            if (whichform.contains("BULKDLIST")) {
                table = "bulk_distribution_registration";
            }
            if (whichform.contains("DNS")) {
                table = "dns_registration";
            }
            if (whichform.contains("FIREWALL")) {
                table = "firewall_registration";
            }
            if (whichform.contains("IMAP")) {
                table = "imappop_registration";
            }
            if (whichform.contains("IP")) {
                table = "ip_registration";
            }
            if (whichform.contains("SMS")) {
                table = "sms_registration";
            }
            if (whichform.contains("RELAY")) {
                table = "relay_registration";
            }
            if (whichform.contains("MOBILE")) {
                table = "mobile_registration";
            }
            if (whichform.contains("WIFI")) {
                table = "wifi_registration";
            }
            if (whichform.contains("WIFIPORT")) {
                table = "wifiport_registration";
            }
            if (whichform.contains("WEBCAST")) {
                table = "webcast_registration";
            }
            if (whichform.contains("DAONBOARDING")) {
                table = "daonboarding_registration";
            }
            con = DbConnection.getConnection();
            whichform = ref_no.substring(0, ref_no.indexOf('-'));
            String sql = "update " + table + " set sign_cert= ?,rename_sign_cert=? where registration_no =?";
            pst = con.prepareStatement(sql);
            pst.setString(1, session.get("uploaded_filename_cert").toString());
            pst.setString(2, session.get("renamed_filepath_cert").toString());
            pst.setString(3, ref_no.trim());

            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde updateCert query is: " + pst);
            int i = pst.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        //return certificate;
    }

    public void docDownloader() {

        // start, code added by pr on 25thapr19
//         String SessionCSRFRandom = session.get("CSRFRandom").toString();
//    if(!CSRFRandom.equals(SessionCSRFRandom)) {
//            hmTrack.put("csrf_error", "CSRF Token is invalid.");
//            return;
//        }  
        boolean isUser = true;

        if (!panel.trim().equalsIgnoreCase("user")) {
            isUser = false;
        }

        System.out.println(printlog + " inside docdownloader function panel value is " + panel);

        // end, code added by pr on 25thapr19
        ResultSet rs1 = null;
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            String sql = "";
            String hod_email = "";
            String hod_mobile = "";
            String ca_id = "";
            try {
                con = DbConnection.getConnection();

                conSlave = DbConnection.getSlaveConnection(); // line added by pr on 24thapr19

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UserTrack.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            //String search_regnum = "select doc from doc_upload where registration_no = ? and role = ?";
            //String search_regnum = "select doc from doc_upload where registration_no = ? and role = ?";
            //String search_regnum = "select doc from doc_upload where registration_no = ? and role = ?";
            //String search_regnum = "select doc from doc_upload where registration_no = ? and role = ?";

            String search_regnum = "select doc, role from doc_upload where registration_no = ? "; // line modified by pr on 25thapr19 and role added

            if (isUser) // if else added by pr on 25thapr19
            {
                search_regnum += " and role = 'USER' ";
            } else {
                search_regnum += " and role != 'USER' ";
            }

            pst = conSlave.prepareStatement(search_regnum);
            pst.setString(1, ref_no);
            //pst.setString(2, panel); // line commented by pr on 25thapr19

            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde docDownloader query is: " + pst);

            rs1 = pst.executeQuery();
            //while (rs1.next()) {
            //int count = 1;
            /*while (rs1.next()) {
                fileList.put(rs1.getString("doc"), rs1.getString("doc"));
                //count++;
            }*/

            String ro = ""; // line added by pr on 25thapr19

            // while modified by pr on 25thapr19 
            while (rs1.next()) {

                //fileList.put(rs1.getString("doc"), rs1.getString("doc")); // line commented and below lines added  by pr on 25thapr19
                ro = rs1.getString("role");

                if (rs1.getString("role").equalsIgnoreCase("ca")) {
                    ro = "Reporting Officer";
                } else if (rs1.getString("role").equalsIgnoreCase("co")) {
                    ro = "Coordinator";
                } else if (rs1.getString("role").equalsIgnoreCase("sup")) {
                    ro = "Support";
                }

                String docPlusRole = rs1.getString("doc") + "|" + ro;

                System.out.println(printlog + " inside usertrack docdownloader function  docPlusRole value is " + docPlusRole);

                fileList.put(docPlusRole, docPlusRole);

                //count++;
            }

            //fileList.put(rs1.getString("doc"), rs1.getString("doc_path"));
            // } 
            try {
                ServletActionContext.getResponse().setContentType("application/json");

                ServletActionContext.getResponse().getWriter().write(new Gson().toJson(fileList));
                //return upload_file_ids;

            } catch (IOException ex) {
                Logger.getLogger(UserTrack.class
                        .getName()).log(Level.SEVERE, null, ex);

            }
        } catch (SQLException ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public String DownloadMultiplePDF() {
        String regex = "^(?!.*\\\\..*\\\\..*)[A-Za-z]([A-Za-z0-9-_.]*[A-Za-z0-9-_])?$";
        //String regex_1 = "^[0-9]{14}\\.csv$";
        boolean flag = false;
        //if (doc_name.matches(regex) || doc_name.matches(regex_1)) {
        if (doc_name.matches(regex)) {
            String docname_arr[] = doc_name.split("\\.");
            String ext = docname_arr[docname_arr.length - 1];
            if (ext.equals("pdf")) { //29-apr-2022
                System.out.println("flag is true");
                flag = true;
            }
        }

        if (flag) {
            String filename = "";

            filename = ServletActionContext.getServletContext().getInitParameter("multipleUploadPdfLocation") + doc_name;// For Live 
            //filename = "E:\\DocPDF\\" + doc_name; //for local
            uploaded_filename = doc_name;
//            try {
//                fileInputStream = new FileInputStream(new File(filename));
//            } catch (Exception e) {
//                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
//            } finally {
//            }

            try {
                File file = new File(filename);
                if (!file.exists()) {
                    System.out.println("FILE DID NOT EXIST AT SERVER ::: " + filename);
                    return "filenotfound";
                }
                fileInputStream = new FileInputStream(new File(filename));
            } catch (Exception e) {
                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == " + "e: " + e.getMessage());
            }
        }

        return SUCCESS;
    }

    public String DownloadCsv() {
        String filename = "";
        filename = ServletActionContext.getServletContext().getInitParameter("excelLocation") + doc_name;
        uploaded_filename = doc_name;
        System.out.println("filename" + filename);
        System.out.println("uploaded_filename" + uploaded_filename);
        try {
            fileInputStream = new FileInputStream(new File(filename));
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
            return "filenotfound";
        }
        return SUCCESS;
    }

    public String DownloadWebcast() {
        String filename = "";
        filename = ServletActionContext.getServletContext().getInitParameter("signedPdfLocation") + doc_name;
        uploaded_filename = doc_name;
        System.out.println("filename" + filename);
        System.out.println("uploaded_filename" + uploaded_filename);
        try {
            fileInputStream = new FileInputStream(new File(filename));
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
            return "filenotfound";
        }
        return SUCCESS;
    }

    public String DownloadDOC() {
        String filename = "";
        filename = "/eForms/MainPDF/Buyer_Registration_V1.2.pdf";
        uploaded_filename = filename;
        try {
            fileInputStream = new FileInputStream(new File(filename));
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
            return "filenotfound";
        }
        return SUCCESS;
    }

    public String DownloadManual() {
        String filename = "";
        filename = "/eForms/MainPDF/User_Manual-Online_Forms_ver-4.1.pdf";
        uploaded_filename = filename;
        try {
            fileInputStream = new FileInputStream(new File(filename));
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());
            return "filenotfound";
        }
        return SUCCESS;
    }

    public void SignCert() {
        UserData userdata = (UserData) session.get("uservalues");
        boolean ldap_employee = userdata.isIsEmailValidated();
        boolean nic_employee = userdata.isIsNICEmployee();
        int updatedCount = -1;
        ResultSet res1 = null, res = null;
        //Connection con = null;
        PreparedStatement pst = null, ps = null;
        String formtype = "";
        String refno = getData();
        setData(refno);
        session.put("ref", refno);
        String sql = "";
        String hod_email = "";
        String hod_mobile = "";
        String hod_desig = "", hod_name = "", user_mobile;
        String ca_id = "";
        String sign_cert = "";
        String rename_sign_cert = "";
        String pdf_path = "";
        String UserEmail = "", user_name = "", designation = "", ophone = "", min = "";
        String req_for = "", employment = "", state = "", department = "";
        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert whichform is: " + whichform);

        //String user_bo = session.get("user_bo").toString();
        admin.ForwardAction ad = new admin.ForwardAction();
        ArrayList<String> coorddata = new ArrayList<String>();
        String coordinators = "";
        if (whichform.equalsIgnoreCase("SINGLEUSER")) {
            coorddata = ad.fetchMailAdmins("single");
            coordinators = String.join(", ", coorddata);
        } else if (whichform.equalsIgnoreCase("BULKUSER")) {
            coorddata = ad.fetchMailAdmins("bulk");
            coordinators = String.join(", ", coorddata);
        } else if (whichform.equalsIgnoreCase("WEBCAST")) {
            coorddata = ad.fetchMailAdmins("webcast");
            coordinators = String.join(", ", coorddata);
        } else {
            coorddata = ad.fetchMailAdmins(whichform);
            coordinators = String.join(", ", coorddata);
        }
        try {
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection();
            if (whichform.equalsIgnoreCase("IMAPPOP")) {
                try {
                    formtype = "imappop";
                    if (panel.equals("USER")) {
                        String qry = "SELECT employment,state,auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM imappop_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            employment = res.getString("employment");
                            state = res.getString("state");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            //if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update imappop_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query2: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            qry = "";
                            qry = "SELECT ca_id FROM comp_auth WHERE ca_email = ? and ca_mobile = ?";
                            //con = DbConnection.getConnection();
                            ps = conSlave.prepareStatement(qry);
                            ps.setString(1, hod_email);
                            ps.setString(2, hod_mobile);

                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside signcert query3: " + ps);

                            res1 = ps.executeQuery();
                            while (res1.next()) {
                                ca_id = res1.getString("ca_id");
                            }
                            qry = "";

                            if (nic_employee) {
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert ");

                                if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {

                                    qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?,?)";
                                    ps = con.prepareStatement(qry);
                                    ps.setString(1, refno);
                                    ps.setString(2, "imappop");
                                    ps.setString(3, "mail-admin_pending");
                                    ps.setString(4, "m");
                                    ps.setString(5, coordinators);
                                    ps.setString(6, UserEmail);
                                    ps.setString(7, user_mobile);
                                    ps.setString(8, user_name);
                                    ps.setString(9, ip);
                                    ps.setString(10, pdate);
                                    ps.setString(11, "a");
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert manual " + ps);

                                    int j = ps.executeUpdate();
                                    SendMailCO(whichform, refno, coorddata, UserEmail, user_name, designation, user_mobile, hod_name, hod_email, hod_mobile, hod_desig, min);
                                    if (j > 0) {

                                        String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                        ps = con.prepareStatement(sql_final_track);
                                        ps.setString(1, UserEmail);
                                        ps.setString(2, user_mobile);
                                        ps.setString(3, user_name);
                                        ps.setString(4, ip);
                                        ps.setString(5, pdate);
                                        ps.setString(6, "mail-admin_pending");
                                        ps.setString(7, "imappop");
                                        ps.setString(8, coordinators);
                                        ps.setString(9, "");
                                        ps.setString(10, "");
                                        ps.setString(11, pdate);
                                        ps.setString(12, refno);

                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert manual final audit track" + ps);

                                        int k = ps.executeUpdate();
                                    }
                                }
                            } else {

                                if (employment.toString().toLowerCase().equalsIgnoreCase("state") && state.toLowerCase().equals("himachal pradesh")) {
                                    ArrayList<String> Cadata = new ArrayList<String>();
                                    Cadata = esignDao.fetchHimachalCoord(state);
                                    if (Cadata.size() > 0) {
                                        if (Cadata.get(0).toString().equals("nodata")) {

                                        } else {
                                            hod_mobile = LdapQuery.GetMobile(Cadata.get(0));
                                            if (hod_mobile.contains("error")) {
                                                hod_mobile = "";
                                            }
                                            hod_email = Cadata.get(0).toString();
                                            hod_name = Cadata.get(1).toString();

                                        }
                                    }
                                }
                                if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                    qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                    ps = con.prepareStatement(qry);
                                    ps.setString(1, refno);
                                    ps.setString(2, "imappop");
                                    ps.setString(3, "ca");
                                    ps.setString(4, hod_email);
                                    ps.setString(5, UserEmail);
                                    ps.setString(6, user_mobile);
                                    ps.setString(7, user_name);
                                    ps.setString(8, ip);
                                    ps.setString(9, pdate);
                                    ps.setString(10, "a");

                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside non nic employee sign cert manual status query" + ps);

                                    // ps.executeUpdate();
                                    int j = ps.executeUpdate();
                                    System.out.println(printlog + "RESULTTTTTTTTTTTTTTTTTTTTTTTTTTTTT : " + j);
                                    if (j > 0) {

                                        String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                        ps = con.prepareStatement(sql_final_track);
                                        ps.setString(1, UserEmail);
                                        ps.setString(2, user_mobile);
                                        ps.setString(3, user_name);
                                        ps.setString(4, ip);
                                        ps.setString(5, pdate);
                                        ps.setString(6, "ca_pending");
                                        ps.setString(7, "imappop");
                                        ps.setString(8, hod_email);
                                        ps.setString(9, hod_mobile);
                                        ps.setString(10, hod_name);
                                        ps.setString(11, pdate);
                                        ps.setString(12, refno);

                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside non nic employee sign cert manual final audit track query" + ps);
                                        int k = ps.executeUpdate();
                                    }
                                    SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                                }
                            }
                            // }
                        }
                        // get hod_email hod_mobile from particualr table
                        // get ca_id from comp_auth for hod_email and hod_mobile 
                        // update status table with CA_PENDING and ca_id
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update imappop_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("SMS")) {
                try {
                    //con = getConnection();
                    sql = "";
                    formtype = "sms";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM sms_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            //if (sign_cert == null || sign_cert.equals("")) {
                            qry = "";
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update sms_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query2: " + pst);
                                updatedCount = pst.executeUpdate();
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {

                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "sms");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);
                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "sms");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);
                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update sms_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("LDAP")) {
                try {
                    //con = getConnection();
                    sql = "";
                    formtype = "ldap";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM ldap_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + "PSSSS: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            //if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update ldap_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);
                                updatedCount = pst.executeUpdate();
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "ldap");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "ldap");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);
                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update ldap_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);
                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("DLIST")) {
                try {
                    //con = getConnection();
                    sql = "";
                    formtype = "distributionlist";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM distribution_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }

                            // if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update distribution_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "dlist");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "dlist");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update distribution_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (whichform.equalsIgnoreCase("BULKDLIST")) {
                try {
                    //con = getConnection();
                    sql = "";
                    formtype = "bulkdistributionlist";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM bulk_distribution_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }

                            // if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update bulk_distribution_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "bulkdlist");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "bulkdlist");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update bulk_distribution_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (whichform.equalsIgnoreCase("DNS")) {
                try {
                    // con = getConnection();
                    sql = "";
                    formtype = "dns";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM dns_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            user_mobile = res.getString("mobile");
                            //if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update dns_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "dns");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "dns");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update dns_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("SINGLEUSER")) {
                try {
                    // con = getConnection();
                    sql = "";
                    formtype = "single";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept,type FROM single_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            req_for = res.getString("type");
                            //if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update single_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            if (employment.toString().toLowerCase().equalsIgnoreCase("state") && state.toLowerCase().equals("himachal pradesh")) {
                                ArrayList<String> Cadata = new ArrayList<String>();
                                Cadata = esignDao.fetchHimachalCoord(state);
                                if (Cadata.size() > 0) {
                                    if (Cadata.get(0).toString().equals("nodata")) {

                                    } else {
                                        hod_mobile = LdapQuery.GetMobile(Cadata.get(0));
                                        if (hod_mobile.contains("error")) {
                                            hod_mobile = "";
                                        }
                                        hod_email = Cadata.get(0).toString();
                                        hod_name = Cadata.get(1).toString();

                                    }
                                }
                            }
                            if (req_for.equals("eoffice")) {

                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query if request type is eoffice: " + ps);

                                coordinators = "rachna_sri@nic.in";
                                coorddata.add(coordinators);
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by) values (?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "single");
                                ps.setString(3, "coordinator_pending");
                                ps.setString(4, "c");
                                ps.setString(5, coordinators);
                                ps.setString(6, "a");
                                System.out.println(printlog + " == " + "3rd query of status " + ps);
                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "single");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    int k = ps.executeUpdate();
                                }
                                SendMailCO(whichform, refno, coorddata, UserEmail, user_name, designation, user_mobile, hod_name, hod_email, hod_mobile, hod_desig, min);
                                // SendMailCO(whichform, refno, coorddata, UserEmail);
                            } else if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {

                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "single");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();

                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "single");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);

                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            } //}
                            // }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update single_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("NKN")) {
                try {
                    //con = getConnection();
                    sql = "";
                    String req_type = "";
                    formtype = "nkn_single";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept,request_type FROM nkn_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            req_type = res.getString("request_type");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            // if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update nkn_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            qry = "";
                            if (employment.toString().toLowerCase().equalsIgnoreCase("state") && state.toLowerCase().equals("himachal pradesh")) {
                                ArrayList<String> Cadata = new ArrayList<String>();
                                Cadata = esignDao.fetchHimachalCoord(state);
                                if (Cadata.size() > 0) {
                                    if (Cadata.get(0).toString().equals("nodata")) {

                                    } else {
                                        hod_mobile = LdapQuery.GetMobile(Cadata.get(0));
                                        if (hod_mobile.contains("error")) {
                                            hod_mobile = "";
                                        }
                                        hod_email = Cadata.get(0).toString();
                                        hod_name = Cadata.get(1).toString();

                                    }
                                }
                            }
                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, req_type);
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, req_type);
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update nkn_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("GEM")) {
                try {
                    //con = getConnection();
                    sql = "";
                    formtype = "gem";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM gem_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + "PSSSS: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            // if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update gem_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "gem");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "gem");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update gem_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("BULKUSER")) {
                try {
                    // con = getConnection();
                    sql = "";
                    formtype = "bulk";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept,type FROM bulk_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + "PSSSS: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            req_for = res.getString("type");
                            //if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update bulk_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            qry = "";
                            qry = "SELECT ca_id FROM comp_auth WHERE ca_email = ? and ca_mobile = ?";
                            // con = DbConnection.getConnection();
                            ps = conSlave.prepareStatement(qry);
                            ps.setString(1, hod_email);
                            ps.setString(2, hod_mobile);
                            System.out.println(printlog + "PSSSS: " + ps);
                            res1 = ps.executeQuery();
                            while (res1.next()) {
                                ca_id = res1.getString("ca_id");
                            }

                            if (employment.toString().toLowerCase().equalsIgnoreCase("state") && state.toLowerCase().equals("himachal pradesh")) {
                                ArrayList<String> Cadata = new ArrayList<String>();
                                Cadata = esignDao.fetchHimachalCoord(state);
                                if (Cadata.size() > 0) {
                                    if (Cadata.get(0).toString().equals("nodata")) {

                                    } else {
                                        hod_mobile = LdapQuery.GetMobile(Cadata.get(0));
                                        if (hod_mobile.contains("error")) {
                                            hod_mobile = "";
                                        }
                                        hod_email = Cadata.get(0).toString();
                                        hod_name = Cadata.get(1).toString();

                                    }
                                }
                            }
                            if (req_for.equals("eoffice")) {
                                coordinators = "rachna_sri@nic.in";
                                coorddata.add(coordinators);
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "bulk");
                                ps.setString(3, "coordinator_pending");
                                ps.setString(4, "c");
                                ps.setString(5, coordinators);
                                ps.setString(6, UserEmail);
                                ps.setString(7, user_mobile);
                                ps.setString(8, user_name);
                                ps.setString(9, ip);
                                ps.setString(10, pdate);
                                ps.setString(11, "a");
                                System.out.println(printlog + " == " + "3rd query of status " + ps);
                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "bulk");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    int k = ps.executeUpdate();
                                }
                                SendMailCO(whichform, refno, coorddata, UserEmail, user_name, designation, user_mobile, hod_name, hod_email, hod_mobile, hod_desig, min);
                                //SendMailCO(whichform, refno, coorddata, UserEmail);
                            } else if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user ) values (?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "bulk");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                System.out.println(printlog + "PSSSS: " + ps);
                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "bulk");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update bulk_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("IP")) {
                try {
                    // con = getConnection();
                    sql = "";
                    formtype = "ip";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM ip_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            // if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update ip_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                pst.setString(3, refno);
                                updatedCount = pst.executeUpdate();
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "ip");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "ip");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);

                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update ip_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);
                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("RELAY")) {
                try {
                    // con = getConnection();
                    sql = "";
                    formtype = "relay";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM relay_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            //if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update relay_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }

                            if (nic_employee) {
                                if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                    qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?,?)";
                                    ps = con.prepareStatement(qry);
                                    ps.setString(1, refno);
                                    ps.setString(2, "relay");
                                    ps.setString(3, "mail-admin_pending");
                                    ps.setString(4, "m");
                                    ps.setString(5, coordinators);
                                    ps.setString(6, UserEmail);
                                    ps.setString(7, user_mobile);
                                    ps.setString(8, user_name);
                                    ps.setString(9, ip);
                                    ps.setString(10, pdate);
                                    ps.setString(11, "a");
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert manual status query" + ps);

                                    int j = ps.executeUpdate();
                                    if (j > 0) {
                                        String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                        ps = con.prepareStatement(sql_final_track);
                                        ps.setString(1, UserEmail);
                                        ps.setString(2, user_mobile);
                                        ps.setString(3, user_name);
                                        ps.setString(4, ip);
                                        ps.setString(5, pdate);
                                        ps.setString(6, "mail-admin_pending");
                                        ps.setString(7, "relay");
                                        ps.setString(8, coordinators);
                                        ps.setString(9, "");
                                        ps.setString(10, "");
                                        ps.setString(11, pdate);
                                        ps.setString(12, refno);
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert manual final audit track query" + ps);

                                        int k = ps.executeUpdate();
                                    }
                                    SendMailCO(whichform, refno, coorddata, UserEmail, user_name, designation, user_mobile, hod_name, hod_email, hod_mobile, hod_desig, min);
                                    // SendMailCO(whichform, refno, coorddata, UserEmail);
                                }
                            } else if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "relay");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside non nic employee sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "relay");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside non nic employee sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                            //}
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update relay_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("MOBILE")) {
                try {
                    //con = getConnection();
                    sql = "";
                    formtype = "mobile";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM mobile_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            // if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update mobile_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            qry = "";
                            qry = "SELECT ca_id FROM comp_auth WHERE ca_email = ? and ca_mobile = ?";
                            // con = DbConnection.getConnection();
                            ps = conSlave.prepareStatement(qry);
                            ps.setString(1, hod_email);
                            ps.setString(2, hod_mobile);
                            System.out.println(printlog + "PSSSS: " + ps);
                            res1 = ps.executeQuery();
                            while (res1.next()) {
                                ca_id = res1.getString("ca_id");
                            }

                            if (nic_employee) {
                                if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                    qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?,?)";
                                    ps = con.prepareStatement(qry);
                                    ps.setString(1, refno);
                                    ps.setString(2, "mobile");
                                    ps.setString(3, "mail-admin_pending");
                                    ps.setString(4, "m");
                                    ps.setString(5, coordinators);
                                    ps.setString(6, UserEmail);
                                    ps.setString(7, user_mobile);
                                    ps.setString(8, user_name);
                                    ps.setString(9, ip);
                                    ps.setString(10, pdate);
                                    ps.setString(11, "a");
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert manual status query" + ps);

                                    int j = ps.executeUpdate();
                                    if (j > 0) {
                                        String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                        ps = con.prepareStatement(sql_final_track);
                                        ps.setString(1, UserEmail);
                                        ps.setString(2, user_mobile);
                                        ps.setString(3, user_name);
                                        ps.setString(4, ip);
                                        ps.setString(5, pdate);
                                        ps.setString(6, "mail-admin_pending");
                                        ps.setString(7, "mobile");
                                        ps.setString(8, coordinators);
                                        ps.setString(9, "");
                                        ps.setString(10, "");
                                        ps.setString(11, pdate);
                                        ps.setString(12, refno);

                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert manual final audit track query" + ps);

                                        int k = ps.executeUpdate();
                                    }
                                    SendMailCO(whichform, refno, coorddata, UserEmail, user_name, designation, user_mobile, hod_name, hod_email, hod_mobile, hod_desig, min);
                                    //SendMailCO(whichform, refno, coorddata, UserEmail);
                                }
                            } else {
                                if (employment.toString().toLowerCase().equalsIgnoreCase("state") && state.toLowerCase().equals("himachal pradesh")) {
                                    ArrayList<String> Cadata = new ArrayList<String>();
                                    Cadata = esignDao.fetchHimachalCoord(state);
                                    if (Cadata.size() > 0) {
                                        if (Cadata.get(0).toString().equals("nodata")) {

                                        } else {
                                            hod_mobile = LdapQuery.GetMobile(Cadata.get(0));
                                            if (hod_mobile.contains("error")) {
                                                hod_mobile = "";
                                            }
                                            hod_email = Cadata.get(0).toString();
                                            hod_name = Cadata.get(1).toString();

                                        }
                                    }
                                }
                                if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                    qry = "";
                                    qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                    ps = con.prepareStatement(qry);
                                    ps.setString(1, refno);
                                    ps.setString(2, "mobile");
                                    ps.setString(3, "ca");
                                    ps.setString(4, hod_email);
                                    ps.setString(5, UserEmail);
                                    ps.setString(6, user_mobile);
                                    ps.setString(7, user_name);
                                    ps.setString(8, ip);
                                    ps.setString(9, pdate);
                                    ps.setString(10, "a");
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside non nic employee sign cert manual status query" + ps);

                                    int j = ps.executeUpdate();

                                    if (j > 0) {
                                        String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                        ps = con.prepareStatement(sql_final_track);
                                        ps.setString(1, UserEmail);
                                        ps.setString(2, user_mobile);
                                        ps.setString(3, user_name);
                                        ps.setString(4, ip);
                                        ps.setString(5, pdate);
                                        ps.setString(6, "ca_pending");
                                        ps.setString(7, "mobile");
                                        ps.setString(8, hod_email);
                                        ps.setString(9, hod_mobile);
                                        ps.setString(10, hod_name);
                                        ps.setString(11, pdate);
                                        ps.setString(12, refno);
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside non nic employee sign cert manual final audit track query" + ps);

                                        int k = ps.executeUpdate();
                                    }
                                    SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                                }
                            }
                            //}
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update mobile_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);
                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("WIFI")) {
                try {
                    // con = getConnection();
                    sql = "";
                    formtype = "wifi";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM wifi_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + "PSSSS: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            //if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update wifi_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            qry = "";
                            qry = "SELECT ca_id FROM comp_auth WHERE ca_email = ? and ca_mobile = ?";
                            //con = DbConnection.getConnection();
                            ps = conSlave.prepareStatement(qry);
                            ps.setString(1, hod_email);
                            ps.setString(2, hod_mobile);
                            System.out.println(printlog + "PSSSS: " + ps);
                            res1 = ps.executeQuery();
                            while (res1.next()) {
                                ca_id = res1.getString("ca_id");
                            }
                            if (nic_employee) {
                                if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                    qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?,?)";
                                    ps = con.prepareStatement(qry);
                                    ps.setString(1, refno);
                                    ps.setString(2, "wifi");
                                    ps.setString(3, "mail-admin_pending");
                                    ps.setString(4, "m");
                                    ps.setString(5, coordinators);
                                    ps.setString(6, UserEmail);
                                    ps.setString(7, user_mobile);
                                    ps.setString(8, user_name);
                                    ps.setString(9, ip);
                                    ps.setString(10, pdate);
                                    ps.setString(11, "a");
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside  nic employee sign cert manual status query" + ps);

                                    int j = ps.executeUpdate();
                                    if (j > 0) {
                                        String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                        ps = con.prepareStatement(sql_final_track);
                                        ps.setString(1, UserEmail);
                                        ps.setString(2, user_mobile);
                                        ps.setString(3, user_name);
                                        ps.setString(4, ip);
                                        ps.setString(5, pdate);
                                        ps.setString(6, "mail-admin_pending");
                                        ps.setString(7, "wifi");
                                        ps.setString(8, coordinators);
                                        ps.setString(9, "");
                                        ps.setString(10, "");
                                        ps.setString(11, pdate);
                                        ps.setString(12, refno);
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside  nic employee sign cert manual status query" + ps);

                                        int k = ps.executeUpdate();
                                    }
                                    SendMailCO(whichform, refno, coorddata, UserEmail, user_name, designation, user_mobile, hod_name, hod_email, hod_mobile, hod_desig, min);
                                    //SendMailCO(whichform, refno, coorddata, UserEmail);
                                }
                            } else if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "wifi");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside non nic employee sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "wifi");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside non nic employee sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update wifi_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);
                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.contains("VPN")) {
                try {
                    //con = getConnection();
                    sql = "";

                    if (whichform.equalsIgnoreCase("vpn")) {
                        formtype = "vpn_single";
                    } else if (whichform.equalsIgnoreCase("vpnrenew")) {
                        formtype = "vpn_renew";
                    } else if (whichform.equalsIgnoreCase("vpnadd") || whichform.equalsIgnoreCase("vpnmod")) {
                        formtype = "change_add";
                    } else if (whichform.equalsIgnoreCase("vpnsurrender")) {
                        formtype = "vpn_surrender";
                    } else if (whichform.equalsIgnoreCase("vpndelete")) {
                        formtype = "vpn_delete";
                    }

                    if (panel.equals("USER")) {

                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM vpn_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + "PSSSS: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {

                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }

                            // if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update vpn_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);

                                updatedCount = pst.executeUpdate();
                            }
                            qry = "";
                            qry = "SELECT ca_id FROM comp_auth WHERE ca_email = ? and ca_mobile = ?";

                            // con = DbConnection.getConnection();
                            ps = conSlave.prepareStatement(qry);
                            ps.setString(1, hod_email);
                            ps.setString(2, hod_mobile);
                            System.out.println(printlog + "PSSSS: " + ps);
                            res1 = ps.executeQuery();
                            while (res1.next()) {
                                ca_id = res1.getString("ca_id");

                            }
                            // UserData userdata = (UserData) sessionMap.get("uservalues");
                            if (userdata.isIsHOG() || userdata.isIsHOD()) {
                                //if (nic_employee) {
                                if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                    qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?,?)";

                                    ps = con.prepareStatement(qry);
                                    ps.setString(1, refno);
                                    ps.setString(2, formtype);
                                    ps.setString(3, "mail-admin_pending");
                                    ps.setString(4, "m");
                                    ps.setString(5, coordinators);
                                    ps.setString(6, UserEmail);
                                    ps.setString(7, user_mobile);
                                    ps.setString(8, user_name);
                                    ps.setString(9, ip);
                                    ps.setString(10, pdate);
                                    ps.setString(11, "a");
                                    System.out.println(printlog + " == " + "3rd query of status " + ps);
                                    int j = ps.executeUpdate();

                                    if (j > 0) {
                                        String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                        ps = con.prepareStatement(sql_final_track);

                                        ps.setString(1, UserEmail);
                                        ps.setString(2, user_mobile);
                                        ps.setString(3, user_name);
                                        ps.setString(4, ip);
                                        ps.setString(5, pdate);
                                        ps.setString(6, "mail-admin_pending");
                                        ps.setString(7, formtype);
                                        ps.setString(8, coordinators);
                                        ps.setString(9, "");
                                        ps.setString(10, "");
                                        ps.setString(11, pdate);
                                        ps.setString(12, refno);
                                        int k = ps.executeUpdate();

                                    }
                                    VpnPushApi vpnapi = new VpnPushApi();
                                    vpnapi.callVpnWebService(refno);
                                    SendMailCO(whichform, refno, coorddata, UserEmail, user_name, designation, user_mobile, hod_name, hod_email, hod_mobile, hod_desig, min);
                                    //SendMailCO(whichform, refno, coorddata, UserEmail);
                                }

                            } else if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "";
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, formtype);
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(printlog + "PSSSS: " + ps);
                                int j = ps.executeUpdate();

                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, formtype);
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);
                                    int k = ps.executeUpdate();

                                }

                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }

                            //}
                        }

                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update vpn_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }

                } catch (Exception e) {
                    e.printStackTrace();

                }

            }
            if (whichform.equalsIgnoreCase("WEBCAST")) {
                try {
                    //con = getConnection();
                    sql = "";
                    formtype = "webcast";
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM webcast_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            // if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update webcast_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            qry = "";
                            qry = "SELECT ca_id FROM comp_auth WHERE ca_email = ? and ca_mobile = ?";
                            // con = DbConnection.getConnection();
                            ps = conSlave.prepareStatement(qry);
                            ps.setString(1, hod_email);
                            ps.setString(2, hod_mobile);
                            System.out.println(printlog + "PSSSS: " + ps);
                            res1 = ps.executeQuery();
                            while (res1.next()) {
                                ca_id = res1.getString("ca_id");
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "mobile");
                                ps.setString(3, "mail-admin_pending");
                                ps.setString(4, "m");
                                ps.setString(5, coordinators);
                                ps.setString(6, UserEmail);
                                ps.setString(7, user_mobile);
                                ps.setString(8, user_name);
                                ps.setString(9, ip);
                                ps.setString(10, pdate);
                                ps.setString(11, "a");
                                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "mail-admin_pending");
                                    ps.setString(7, "webcast");
                                    ps.setString(8, coordinators);
                                    ps.setString(9, "");
                                    ps.setString(10, "");
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);

                                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside nic employee sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCO(whichform, refno, coorddata, UserEmail, user_name, designation, user_mobile, hod_name, hod_email, hod_mobile, hod_desig, min);
                                //SendMailCO(whichform, refno, coorddata, UserEmail);
                            }
                        }
                        //}

                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update webcast_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);
                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (whichform.equalsIgnoreCase("EMAILACTIVATE")) {
                try {
                    // con = getConnection();
                    sql = "";
                    formtype = "email_act";
                    System.out.println("inside single panel value:::" + panel);
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM email_act_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            //req_for = res.getString("type");
                            //if (sign_cert == null || sign_cert.equals("")) {

                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update email_act_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            if (employment.toString().toLowerCase().equalsIgnoreCase("state") && state.toLowerCase().equals("himachal pradesh")) {
                                ArrayList<String> Cadata = new ArrayList<String>();
                                Cadata = esignDao.fetchHimachalCoord(state);
                                if (Cadata.size() > 0) {
                                    if (Cadata.get(0).toString().equals("nodata")) {

                                    } else {
                                        hod_mobile = LdapQuery.GetMobile(Cadata.get(0));
                                        if (hod_mobile.contains("error")) {
                                            hod_mobile = "";
                                        }
                                        hod_email = Cadata.get(0).toString();
                                        hod_name = Cadata.get(1).toString();

                                    }
                                }
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {

                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "email_act");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();

                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "email_act");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);

                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                            //}

                            // }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update email_act_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
            if (whichform.equalsIgnoreCase("EMAILDEACTIVATE")) {
                try {
                    // con = getConnection();
                    sql = "";
                    formtype = "email_deact";
                    System.out.println("inside single panel value:::" + panel);
                    if (panel.equals("USER")) {
                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept,type FROM email_deact_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);

                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            hod_desig = res.getString("ca_desig");
                            hod_name = res.getString("hod_name");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            req_for = res.getString("type");
                            //if (sign_cert == null || sign_cert.equals("")) {
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update email_act_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query in sign cert: " + pst);
                                updatedCount = pst.executeUpdate();
                            }
                            if (employment.toString().toLowerCase().equalsIgnoreCase("state") && state.toLowerCase().equals("himachal pradesh")) {
                                ArrayList<String> Cadata = new ArrayList<String>();
                                Cadata = esignDao.fetchHimachalCoord(state);
                                if (Cadata.size() > 0) {
                                    if (Cadata.get(0).toString().equals("nodata")) {

                                    } else {
                                        hod_mobile = LdapQuery.GetMobile(Cadata.get(0));
                                        if (hod_mobile.contains("error")) {
                                            hod_mobile = "";
                                        }
                                        hod_email = Cadata.get(0).toString();
                                        hod_name = Cadata.get(1).toString();

                                    }
                                }
                            }

                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {

                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "email_act");
                                ps.setString(3, "ca");
                                ps.setString(4, hod_email);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();

                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "ca_pending");
                                    ps.setString(7, "email_act");
                                    ps.setString(8, hod_email);
                                    ps.setString(9, hod_mobile);
                                    ps.setString(10, hod_name);
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);

                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                            //}

                            // }
                        }
                    } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                        sql = "update email_act_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, session.get("uploaded_filename_cert").toString());
                        pst.setString(2, session.get("renamed_filepath_cert").toString());
                        pst.setString(3, refno);
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);

                        pst.executeUpdate();
                    } else {
                        ServletActionContext.getResponse().setStatus(204);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
            if (whichform.equalsIgnoreCase("centralutm")) {

                if (panel.equals("USER")) {
                    try {

                        formtype = "centralutm";

                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM centralutm_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");

                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update centralutm_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                updatedCount = pst.executeUpdate();
                                pst.close();
                            }
                            coordinators = "hasan@gov.in,ashish@nic.in,sseca2.sp-dl@nkn.in";
                            coorddata.add(coordinators);
                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "centralutm");
                                ps.setString(3, "c");
                                ps.setString(4, coordinators);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "coordinator_pending");
                                    ps.setString(7, "centralutm");
                                    ps.setString(8, coordinators);
                                    ps.setString(9, "");
                                    ps.setString(10, "");
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);

                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }

                            }
                            res.close();
                            ps.close();
                        }

                        // get hod_email hod_mobile from particualr table
                        // get ca_id from comp_auth for hod_email and hod_mobile
                        // update status table with ca_pending and ca_id
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                    sql = "update centralutm_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                    pst = con.prepareStatement(sql);
                    pst.setString(1, session.get("uploaded_filename_cert").toString());
                    pst.setString(2, session.get("renamed_filepath_cert").toString());
                    pst.setString(3, refno);
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);
                    pst.executeUpdate();
                } else {
                    ServletActionContext.getResponse().setStatus(204);
                }
            }
            if (whichform.equalsIgnoreCase("wifiport")) {

                if (panel.equals("USER")) {
                    try {

                        formtype = "wifiport";

                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM wifiport_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);
                        res = ps.executeQuery();
                        while (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");

                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                min = res.getString("department");
                            }
                            if (res.getString("other_dept") != "") {
                                min = res.getString("other_dept");
                            }
                            if (res.getString("organization") != "") {
                                min = res.getString("organization");
                            }
                            if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                                sql = "update wifiport_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, session.get("uploaded_filename_cert").toString());
                                pst.setString(2, session.get("renamed_filepath_cert").toString());
                                pst.setString(3, refno);
                                updatedCount = pst.executeUpdate();
                                pst.close();
                            }
                            //coordinators = "hasan@gov.in,ashish@nic.in,sseca2.sp-dl@nkn.in";
                            coorddata.add(coordinators);
                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by ) values (?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                ps.setString(1, refno);
                                ps.setString(2, "wifiport");
                                ps.setString(3, "c");
                                ps.setString(4, coordinators);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    ps.setString(6, "coordinator_pending");
                                    ps.setString(7, "wifiport");
                                    ps.setString(8, coordinators);
                                    ps.setString(9, "");
                                    ps.setString(10, "");
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);

                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                }
                                SendMailCA(whichform, refno, hod_email, hod_mobile, UserEmail, user_name, designation, user_mobile, min);
                            }
                            res.close();
                            ps.close();
                        }

                        // get hod_email hod_mobile from particualr table
                        // get ca_id from comp_auth for hod_email and hod_mobile
                        // update status table with ca_pending and ca_id
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                    sql = "update wifiport_registration set ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                    pst = con.prepareStatement(sql);
                    pst.setString(1, session.get("uploaded_filename_cert").toString());
                    pst.setString(2, session.get("renamed_filepath_cert").toString());
                    pst.setString(3, refno);
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);
                    pst.executeUpdate();
                } else {
                    ServletActionContext.getResponse().setStatus(204);
                }
            }

            if (whichform.equalsIgnoreCase("daonboarding")) {

                if (panel.equals("USER")) {
                    try {

                        formtype = "daonboarding";

                        String qry = "SELECT auth_off_name,mobile,auth_email,hod_email,hod_mobile,ca_desig,hod_name,designation,sign_cert,pdf_path,ministry,department,organization,other_dept FROM daonboarding_registration WHERE registration_no = ?";
                        ps = conSlave.prepareStatement(qry);
                        ps.setString(1, refno.trim());
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);
                        res = ps.executeQuery();
                        System.out.println("res :::::::::::::::::::::::::::::::");
                        System.out.print(res);
                        if (res.next()) {
                            hod_email = res.getString("hod_email");
                            hod_mobile = res.getString("hod_mobile");
                            sign_cert = res.getString("sign_cert");
                            pdf_path = res.getString("pdf_path");
                            UserEmail = res.getString("auth_email");
                            user_name = res.getString("auth_off_name");
                            designation = res.getString("designation");
                            user_mobile = res.getString("mobile");
                            //sign_cert = res.getString("sign_cert");
                            //pdf_path = res.getString("pdf_path");
                            //UserEmail = res.getString("auth_email");

                            if (res.getString("ministry") != "") {
                                min = res.getString("ministry");
                            }
                            if (res.getString("department") != "") {
                                department = res.getString("department");
                            }
//                            if (res.getString("other_dept") != "") {
//                                min = res.getString("other_dept");
//                            }
//                            if (res.getString("organization") != "") {
//                                org = res.getString("organization");
//                            }
                            //String coordEmail = daonboard.fetchCoordinatorEmail(res.getString("department"));
                            HashMap profile_values = (HashMap) session.get("profile-values");
                            //Iterator iterator = daonboard.getCoordEmail((HashMap) profile_values).iterator();

                            ForwardAction forwardAction = new ForwardAction();
                            HashMap<String, String> coords = forwardAction.fetchEmpCoordsAtCA(refno.trim(), formtype);
                            System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " Fetched Coordinators :: " + coords.toString());
                            String coordEmail = "";
                            if (coords == null || coords.isEmpty()) {
                                coordEmail = "support@gov.in";
                            } else {
                                if (coords.get("sendtocoord") != null && coords.get("sendtocoord").equalsIgnoreCase("true")) {
                                    if (coords.get("co") != null && !coords.get("co").isEmpty()) {
                                        coordEmail = coords.get("co");
                                    } else {
                                        coordEmail = "support@gov.in";
                                    }
                                } else {
                                    coordEmail = "support@gov.in";
                                }
                            }

                            //String coordEmail = (String) iterator.next();
                            if (session.get("uploaded_filename") != null && !session.get("uploaded_filename").toString().isEmpty() && session.get("renamed_filepath") != null && !session.get("renamed_filepath").toString().isEmpty()) {
                                sql = "update daonboarding_registration set sign_cert=?,rename_sign_cert=? where registration_no=? ";
                                pst = con.prepareStatement(sql);

//                            pst.setString(1, session.get("uploaded_filename_cert").toString());
//                            pst.setString(2, session.get("renamed_filepath_cert").toString());
                                System.out.println("session ::::::::::::::::::::::::::::::::::");
                                System.out.println(session);
                                pst.setString(1, session.get("uploaded_filename").toString());
                                pst.setString(2, session.get("renamed_filepath").toString());
                                pst.setString(3, refno);
                                updatedCount = pst.executeUpdate();
                                pst.close();
                            }

                            //code add on 24-06-2022  By Prabhat 
//                            String qry1 = "SELECT sign_cert, rename_sign_cert FROM daonboarding_registration WHERE registration_no = ?";
//                            ps = conSlave.prepareStatement(qry1);
//                            ps.setString(1, refno.trim());
//                            System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inisde signcert query1: " + ps);
//                            res = ps.executeQuery();
//                            if (res.next()) {
//                                if (res.getString("sign_cert") != null) {
//                                    sign_cert = res.getString("sign_cert");
//                                }
//                                if (res.getString("rename_sign_cert") != null) {
//                                    rename_sign_cert = res.getString("rename_sign_cert");
//                                }
//                            }
                            //coordinators = "hasan@gov.in,ashish@nic.in,sseca2.sp-dl@nkn.in";
                            //coorddata.add(coordinators);
                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && updatedCount > 0) {
//                            if (!pdf_path.contains("eSigned_") && !pdf_path.contains("online processing") && (sign_cert != null || (!sign_cert.isEmpty()) && rename_sign_cert != null ||(!rename_sign_cert.isEmpty()) ) ) {
                                qry = "INSERT INTO status (stat_reg_no,stat_form_type,stat_forwarded_to,stat_forwarded_to_user,stat_forwarded_by_email,stat_forwarded_by_mobile,stat_forwarded_by_name,stat_forwarded_by_ip,stat_forwarded_by_datetime,stat_forwarded_by,stat_type ) values (?,?,?,?,?,?,?,?,?,?,?)";
                                ps = con.prepareStatement(qry);
                                System.out.println("DAONBO manual uploading ");
                                ps.setString(1, refno);
                                ps.setString(2, "daonboarding");
                                if (!coordEmail.isEmpty() && !isSupportEmail(coordEmail)) {
                                    ps.setString(3, "c");

                                    ps.setString(11, "coordinator_pending");
                                } else {
                                    coordEmail = "support@gov.in";
                                    ps.setString(3, "s");
                                    ps.setString(11, "support_pending");
                                }
//                                if (coordEmail.equalsIgnoreCase("support@nic.in")) {
//                                    ps.setString(3, "s");
//                                } else {
//                                    ps.setString(3, "c");
//                                }
                                //ps.setString(3, "c");
                                ps.setString(4, coordEmail);
                                ps.setString(5, UserEmail);
                                ps.setString(6, user_mobile);
                                ps.setString(7, user_name);
                                ps.setString(8, ip);
                                ps.setString(9, pdate);
                                ps.setString(10, "a");

//                                if (coordEmail.equalsIgnoreCase("support@nic.in")) {
//                                    ps.setString(11, "support_pending");
//                                } else {
//                                    ps.setString(11, "coordinator_pending");
//                                }
                                System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual status query" + ps);

                                int j = ps.executeUpdate();
                                if (j > 0) {
                                    String sql_final_track = "update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?,to_datetime=? where registration_no=?";
                                    ps = con.prepareStatement(sql_final_track);
                                    ps.setString(1, UserEmail);
                                    ps.setString(2, user_mobile);
                                    ps.setString(3, user_name);
                                    ps.setString(4, ip);
                                    ps.setString(5, pdate);
                                    if (!coordEmail.isEmpty() && !isSupportEmail(coordEmail)) {
                                        ps.setString(6, "coordinator_pending");
                                    } else {
                                        coordEmail = "support@gov.in";
                                        ps.setString(6, "support_pending");
                                    }
//                                    if (coordEmail.equalsIgnoreCase("support@nic.in")) {
//                                        ps.setString(6, "support_pending");
//                                    } else {
//                                        ps.setString(6, "coordinator_pending");
//                                    }
                                    ps.setString(7, "daonboarding");
                                    ps.setString(8, coordEmail);
                                    ps.setString(9, "");
                                    ps.setString(10, "");
                                    ps.setString(11, pdate);
                                    ps.setString(12, refno);

                                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual final audit track query" + ps);

                                    int k = ps.executeUpdate();
                                    if (k > 0) {
                                        ForwardAction fwd = new ForwardAction();
                                        fwd.updateOrInsertCoordinatorOrDaIds(coordEmail, stat_type, refno.trim());

                                    }
                                }

                            } else {
                                ServletActionContext.getResponse().setStatus(204);
                            }
                            res.close();
                            ps.close();
                        }

//                        if (sign_cert == null) {
//                            ServletActionContext.getResponse().setStatus(204);
//                        }
                        // get hod_email hod_mobile from particualr table
                        // get ca_id from comp_auth for hod_email and hod_mobile
                        // update status table with ca_pending and ca_id
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else if (session.get("uploaded_filename_cert") != null && !session.get("uploaded_filename_cert").toString().isEmpty() && session.get("renamed_filepath_cert") != null && !session.get("renamed_filepath_cert").toString().isEmpty()) {
                    sql = "update daonboarding_registration set rename_sign_cert=?,sign_cert=?, ca_sign_cert=?,ca_rename_sign_cert=? where registration_no=? ";
                    pst = con.prepareStatement(sql);
                    pst.setString(1, session.get("renamed_filepath_cert").toString());
                    pst.setString(2, session.get("uploaded_filename_cert").toString());
                    pst.setString(3, session.get("uploaded_filename_cert").toString());
                    pst.setString(4, session.get("renamed_filepath_cert").toString());
                    pst.setString(5, refno);
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "inside sign cert manual CA module query" + pst);
                    pst.executeUpdate();
                } else {
                    ServletActionContext.getResponse().setStatus(204);
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (Exception ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (res != null) {
                try {
                    res.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res1 != null) {
                try {
                    res1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
    //SendMailCO(whichform, refno, coorddata, UserEmail,user_name,designation,user_mobile,hod_name,hod_email,hod_mobile,hod_desig);

    private boolean isSupportEmail(String email) {
        if (email.equalsIgnoreCase("support@nic.in") || email.equalsIgnoreCase("support@gov.in") || email.equalsIgnoreCase("support@nkn.in") || email.equalsIgnoreCase("vpnsupport@nic.in") || email.equalsIgnoreCase("smssupport@nic.in") || email.equalsIgnoreCase("smssupport@gov.in") || email.equalsIgnoreCase("vpnsupport@gov.in")) {
            return true;
        }
        return false;
    }

    public void SendMailCO(String formtype, String ref_num, ArrayList coordinators, String UserEmail, String user_name, String designation, String user_mobile, String hod_name, String hod_email, String hod_mobile, String hod_desig, String min) {
        String form_name = "";
        if (formtype.equals("imappop")) {
            form_name = "IMAP/POP";
        } else if (formtype.equals("bulk")) {
            form_name = "Bulk User Email";
        } else if (formtype.equals("ip")) {
            form_name = "Change/Add IP";
        } else if (formtype.equals("distributionlist")) {
            form_name = "Distribution List";
        } else if (formtype.equals("bulkdistributionlist")) {
            form_name = "Distribution List";
        } else if (formtype.equals("ldap")) {
            form_name = "LDAP Authentication";
        } else if (formtype.equals("nkn_single")) {
            form_name = "NKN User Email";
        } else if (formtype.equals("nkn_bulk")) {
            form_name = "NKN Bulk User Email";
        } else if (formtype.equals("relay")) {
            form_name = "Smtp/Relay";
        } else if (formtype.equals("sms")) {
            form_name = "NIC-SMS Gateway";
        } else if (formtype.equals("single")) {
            form_name = "Single User Email";
        } else if (formtype.equals("gem")) {
            form_name = "Gem User";
        } else if (formtype.equals("mobile")) {
            form_name = "Mobile Update";
        } else if (formtype.equals("wifi")) {
            form_name = "WIFI";
        } else if (formtype.equals("wifiport")) {
            form_name = "WIFIPORT";
        } else if (formtype.equals("dns")) {
            form_name = "DNS";
        } else if (formtype.equals("vpn_single")) {
            form_name = "VPN Single User";
        } else if (formtype.equals("vpn_bulk")) {
            form_name = "VPN Bulk User";
        } else if (formtype.equals("webcast")) {
            form_name = "Webcast Service";
        }
        HashMap<String, Object> map = new HashMap<>();
        StringBuilder sb = new StringBuilder();
        sb.append("<p>Dear Sir/Madam,</p>");
        sb.append(UserEmail).append(" has submitted the ").append(form_name).append(" request form. Please verify the details mentioned in the form by using the link https://eforms.nic.in and approve the same for further process. You can login using your email address.");
        sb.append("For any assistance, please contact on <b>1800-111-555</b> or mail us to servicedesk.nic.in. NICSI</br>");
        sb.append("<p>The Applicant and Reporting Officer Details are shown below:</p>");
        sb.append("<h3>Applicant Details</h3><table border='0'>"
                + "<tr><td>Name</td><td>" + user_name + "</td></tr>"
                + "<tr><td>Email</td><td>" + UserEmail + "</td></tr>"
                + "<tr><td>Mobile</td><td>" + user_mobile + "</td></tr>"
                + "<tr><td>Designation</td><td>" + designation + "</td></tr>"
                + "<tr><td>Organization</td><td>" + "  " + min + "</td></tr>"
                + "</table>");
        sb.append("<h3>Reporting Officer Details</h3><table border='0'>"
                + "<tr><td>Name</td><td>" + hod_name + "</td></tr>"
                + "<tr><td>Email</td><td>" + hod_email + "</td></tr>"
                + "<tr><td>Mobile</td><td>" + hod_mobile + "</td></tr>"
                + "<tr><td>Designation</td><td>" + hod_desig + "</td></tr>"
                + "</table>");
        sb.append("<p>Regards,</p>");
        sb.append("eForms Team NIC");
        sb.append("<p>Regards,</p>");
        sb.append("eForms Team NIC");
        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "mail body for CO in user track" + sb);

        map.put("from", "");
        map.put("subject", ref_num + " Submitted");
        map.put("mailbody", sb.toString());
        map.put("attachmentpath", "");
        map.put("to", coordinators);

        sb.setLength(0);
        String mobileNumbers = "";
        ArrayList<String> mobile = new ArrayList<>();
        for (Object to : coordinators) {
            mobileNumbers = LdapQuery.GetMobile((String) to);
            mobile.add(mobileNumbers);
        }
        String smsbody = UserEmail + " has submitted the " + form_name + " request form. Please verify the details mentioned in the form by using the link https://eforms.nic.in and approve the same for further process. You can login using your email address. For any assistance, please contact on <b>1800-111-555</b> or mail us to servicedesk.nic.in. NICSI";
        map.put("mobile", mobile);
        map.put("smsbody", smsbody);
        map.put("templateId", "1107160811952715495");
        NotifyThrouhRabbitMQ object = new NotifyThrouhRabbitMQ();
        object.notify(map);
        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "mail added in queue for CO in user track");

    }

    public void SendMailCA(String formtype, String ref_num, String CaEmail, String CaMobile, String UserEmail, String username, String designation, String mobile, String min) {
        String form_name = "";
        if (formtype.equals("imappop")) {
            form_name = "IMAP/POP";
        } else if (formtype.equals("bulk")) {
            form_name = "Bulk User Email";
        } else if (formtype.equals("ip")) {
            form_name = "Change/Add IP";
        } else if (formtype.equals("distributionlist")) {
            form_name = "Distribution List";
        } else if (formtype.equals("bulkdistributionlist")) {
            form_name = "Distribution List";
        } else if (formtype.equals("ldap")) {
            form_name = "LDAP Authentication";
        } else if (formtype.equals("nkn_single")) {
            form_name = "NKN User Email";
        } else if (formtype.equals("nkn_bulk")) {
            form_name = "NKN Bulk User Email";
        } else if (formtype.equals("relay")) {
            form_name = "Smtp/Relay";
        } else if (formtype.equals("sms")) {
            form_name = "NIC-SMS Gateway";
        } else if (formtype.equals("single")) {
            form_name = "Single User Email";
        } else if (formtype.equals("gem")) {
            form_name = "Gem User";
        } else if (formtype.equals("mobile")) {
            form_name = "Mobile Update";
        } else if (formtype.equals("wifi")) {
            form_name = "WIFI";
        } else if (formtype.equals("wifiport")) {
            form_name = "WIFIPORT";
        } else if (formtype.equals("dns")) {
            form_name = "DNS";
        } else if (formtype.equals("vpn_single")) {
            form_name = "VPN Single User";
        } else if (formtype.equals("vpn_bulk")) {
            form_name = "VPN Bulk User";
        } else if (formtype.equals("webcast")) {
            form_name = "Webcast Service";
        }
        StringBuilder sb = new StringBuilder();
        sb.append("<p>Dear Sir/Madam,</p>");
        sb.append(UserEmail).append(" has submitted the ").append(form_name).append(" request form and he/she has selected you as his/her Reporting/Nodal/Forwarding Officer. Please verify the details mentioned in the form by using the link https://eforms.nic.in and approve the same for further process.");
        sb.append("You can login using ").append(CaEmail).append(" and ").append(CaMobile).append(".").append("NICSI");
        sb.append("<p>The Applicant Details are shown below:</p>");
        sb.append("<h3>Applicant Details</h3><table border='0'>"
                + "<tr><td>Name</td><td>" + username + "</td></tr>"
                + "<tr><td>Email</td><td>" + UserEmail + "</td></tr>"
                + "<tr><td>Mobile</td><td>" + mobile + "</td></tr>"
                + "<tr><td>Designation</td><td>" + designation + "</td></tr>"
                + "<tr><td>Organization</td><td>" + "  " + min + "</td></tr>"
                + "</table>");
        sb.append("<p>Regards,</p>");
        sb.append("eForms Team NIC");
        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "mail body for CA in user track" + sb);

        HashMap<String, Object> map = new HashMap<>();
        map.put("from", "");
        map.put("subject", ref_num + " Submitted");
        map.put("mailbody", sb.toString());
        map.put("attachmentpath", "");
        map.put("to", CaEmail);
        String smsbody = UserEmail + " has submitted the " + form_name + " request form and he/she has selected you as his/her Reporting/Nodal/Forwarding Officer. Please verify the details mentioned in the form by using the link https://eforms.nic.in and approve the same for further process. You can login using " + CaEmail + ". NICSI";
        map.put("mobile", CaMobile);
        map.put("smsbody", smsbody);
        map.put("templateId", "1107160811967453428");
        NotifyThrouhRabbitMQ object = new NotifyThrouhRabbitMQ();
        object.notify(map);
        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "mail added in queue for CA in user track");

    }

    // below function added by pr on 12thapr18
    public FormBean fetchFormData(String refno, String whichform) throws UnknownHostException, IOException, UnsupportedOperationException, ClassNotFoundException {
        //System.out.println("im in Details of 857604 USer REgistration number  :" + getData());
        FormBean form_details = new FormBean();
        Map<String, String> map = new HashMap<>();
        //UserData userdata = (UserData) session.get("userValues");
        //map = ldap.isUserNICEmployee(userdata.getEmail());
        //form_details.setNic_employee(map.get("isNICEmployee"));
        Map<String, Object> prvwdetails = new HashMap<>();
        System.out.println(printlog + "whichform in preview function: " + whichform);
        ResultSet rs = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;
        ResultSet rs3 = null;
        ResultSet rs4 = null;
        //Connection con = null;
        PreparedStatement pst = null;

        try {
            //con = getConnection();
            conSlave = DbConnection.getSlaveConnection();
            if (whichform.equalsIgnoreCase("sms")) {
                String sql = "select * from sms_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setSmsservice1(rs.getString("sms_service"));
                    form_details.setPull_url(rs.getString("pull_url"));
                    form_details.setPull_keyword(rs.getString("pull_keyword"));
                    //form_details.setHod_tel(rs.getString("short_flag"));
                    //form_details.setHod_tel(rs.getString("short_note"));
                    form_details.setApp_name(rs.getString("app_name"));
                    form_details.setApp_url(rs.getString("app_url"));
                    form_details.setSms_usage(rs.getString("sms_usage"));
                    form_details.setServer_loc(rs.getString("server_loc"));
                    form_details.setServer_loc_txt(rs.getString("server_loc_other"));
                    form_details.setBase_ip(rs.getString("base_ip"));
                    form_details.setService_ip(rs.getString("service_ip"));
                    form_details.setT_off_name(rs.getString("tech_name"));
                    form_details.setTdesignation(rs.getString("tech_desig"));
                    form_details.setTemp_code(rs.getString("tech_emp_code"));
                    form_details.setTaddrs(rs.getString("tech_address"));
                    form_details.setTcity(rs.getString("tech_city"));
                    form_details.setTstate(rs.getString("tech_state"));
                    form_details.setTpin(rs.getString("tech_pin"));
                    form_details.setTtel_ofc(rs.getString("tech_ophone"));
                    form_details.setTtel_res(rs.getString("tech_rphone"));
                    form_details.setTmobile(rs.getString("tech_mobile"));
                    form_details.setTauth_email(rs.getString("tech_email"));
                    form_details.setBauth_off_name(rs.getString("bowner_name"));
                    form_details.setBdesignation(rs.getString("bowner_desig"));
                    form_details.setBemp_code(rs.getString("bowner_emp_code"));
                    form_details.setBaddrs(rs.getString("bowner_address"));
                    form_details.setBstate(rs.getString("bowner_state"));
                    form_details.setBcity(rs.getString("bowner_city"));
                    form_details.setBpin(rs.getString("bowner_pin"));
                    form_details.setBtel_ofc(rs.getString("bowner_ophone"));
                    form_details.setBtel_res(rs.getString("bowner_rphone"));
                    form_details.setBmobile(rs.getString("bowner_mobile"));
                    form_details.setBauth_email(rs.getString("bowner_email"));
                    form_details.setAudit(rs.getString("audit"));
                    form_details.setDatepicker1(rs.getString("audit_date"));
                    form_details.setStaging_ip(rs.getString("staging_ip"));
                    form_details.setSender(rs.getString("flag_sender"));
                    form_details.setSender_id(rs.getString("sender_id"));
                    form_details.setDomestic_traf(rs.getString("domestic_traffic"));
                    form_details.setInter_traf(rs.getString("inter_traffic"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18

                }
            } else if (whichform.equalsIgnoreCase("dns")) {
                String sql = "select * from dns_registration where registration_no=?";
                String json = null;
                String req_for = ""; // line added by pr on 18thmay18
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    req_for = rs.getString("req_for");
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    //form_details.set("dns_type", rs.getString("dns_type"));
                    form_details.setRequest_aaaa(rs.getString("record_aaaa"));
                    form_details.setRequest_mx(rs.getString("record_mx"));
                    form_details.setRequest_ptr(rs.getString("record_ptr"));
                    form_details.setRequest_srv(rs.getString("record_srv"));
                    form_details.setRequest_spf(rs.getString("record_spf"));
                    form_details.setRequest_txt(rs.getString("record_txt"));
                    form_details.setRequest_dmarc(rs.getString("record_dmarc"));
                    form_details.setReq_(req_for); // line added by pr on 18thmay18
                    //form_details.put("form_type", rs.getString("form_type"));
                    form_details.setUploaded_filename(rs.getString("uploaded_filename"));
                    form_details.setRenamed_filepath(rs.getString("renamed_filepath"));
                    form_details.setDns_loc(rs.getString("server_location"));
                    form_details.setRequest_ptr1(rs.getString("record_ptr1"));
                    form_details.setRequest_mx1(rs.getString("record_mx1"));
                    //session.put("request_type", rs.getString("form_type")); // line added by pr on 1stfeb18 , line commented by pr on 18thmay18
                    form_details.setRequest_type(rs.getString("form_type")); // line added by pr on 18thmay18
                    //session.put("req_for", rs.getString("req_for")); // line added by pr on 1stfeb18 , line commented by pr on 18thmay18
                    // end, code added by pr on 12thapr18
                    //form_details.setOrg(rs.getString("record_cname"));
                    //form_details.setOrg(rs.getString("record_dmarc"));
                }
                pst = conSlave.prepareStatement("select dns_url from dns_registration_url where registration_no=?");
                pst.setString(1, refno);
                rs1 = pst.executeQuery();
                String url = "";
                while (rs1.next()) {
                    url += rs1.getString("dns_url").concat(";");
                }
                String domain_url = url.substring(0, url.length() - 1);
                if (req_for.equals("req_modify")) // line modified by pr on 18thmay18
                {
                    pst = conSlave.prepareStatement("select oldip from dns_registration_oldip where registration_no=?");
                    pst.setString(1, refno);
                    rs2 = pst.executeQuery();
                    String ip = "";
                    while (rs2.next()) {
                        ip += rs2.getString("oldip").concat(";");
                    }
                    String domain_old_ip = ip.substring(0, ip.length() - 1);
                    prvwdetails.put("domain_old_ip", domain_old_ip);
                }
                pst = conSlave.prepareStatement("select cname from dns_registration_cname where registration_no=?");
                pst.setString(1, refno);
                System.out.println(printlog + "psttttttttttttttt of cname" + pst);
                rs3 = pst.executeQuery();
                String loc = "";
                while (rs3.next()) {
                    loc += rs3.getString("cname").concat(";");
                }
                String domain_cname = "";
                String domain_new_ip = "";
                if (loc.length() > 0) {
                    domain_cname = loc.substring(0, loc.length() - 1);
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "domain_loc: " + domain_cname);
                } else {
                    //System.out.println("inside else");
                }
                pst = conSlave.prepareStatement("select newip from dns_registration_newip where registration_no=?");
                pst.setString(1, refno);
                rs4 = pst.executeQuery();
                String ip = "";
                while (rs4.next()) {
                    ip += rs4.getString("newip").concat(";");
                }
                if (ip.length() > 0) {
                    domain_new_ip = ip.substring(0, ip.length() - 1);
                }
                form_details.setDns_url(domain_url);
                form_details.setDns_newip(domain_new_ip);
                form_details.setDns_cname(domain_cname);
            } else if (whichform.equalsIgnoreCase("wifi")) {
                String sql = "select * from wifi_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setWifi_type(rs.getString("wifi_type"));
                    form_details.setWifi_mac1(rs.getString("wifi_mac1"));
                    form_details.setWifi_mac2(rs.getString("wifi_mac2"));
                    form_details.setWifi_mac3(rs.getString("wifi_mac3"));
                    //form_details.setWifi_mac4(rs.getString("wifi_mac4"));
                    form_details.setWifi_os1(rs.getString("wifi_os1"));
                    form_details.setWifi_os2(rs.getString("wifi_os2"));
                    form_details.setWifi_os3(rs.getString("wifi_os3"));
                    //form_details.setWifi_os4(rs.getString("wifi_os4"));
                    form_details.setWifi_process(rs.getString("wifi_process"));
                    form_details.setWifi_request(rs.getString("wifi_request"));
                    form_details.setWifi_time(rs.getString("wifi_time"));
                    form_details.setWifi_duration(rs.getString("wifi_duration"));
                }
            } else if (whichform.equalsIgnoreCase("singleuser") || whichform.equalsIgnoreCase("single")) // updated by pr on 22ndmar18
            {
                String sql = "select * from single_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setSingle_dob(rs.getString("dob"));
                    form_details.setSingle_dor(rs.getString("dor"));
                    form_details.setSingle_id_type(rs.getString("id_type"));
                    form_details.setSingle_email1(rs.getString("preferred_email1"));
                    form_details.setSingle_email2(rs.getString("preferred_email2"));
                    form_details.setSingle_emp_type(rs.getString("emp_type"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "ldap")) {
                String sql = "select * from ldap_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setApp_name(rs.getString("app_name"));
                    form_details.setApp_url(rs.getString("app_url"));
                    form_details.setDomain(rs.getString("domain"));
                    form_details.setBase_ip(rs.getString("base_ip"));
                    form_details.setService_ip(rs.getString("service_ip"));
                    form_details.setServer_loc(rs.getString("server_loc"));
                    form_details.setServer_loc_txt(rs.getString("server_loc_other"));
                    form_details.setHttps(rs.getString("https"));
                    form_details.setAudit(rs.getString("audit"));
                    form_details.setLdap_id1(rs.getString("ldap_id1"));
                    form_details.setLdap_id2(rs.getString("ldap_id2"));
                    //form_details.setOrg(rs.getString("uploaded_filename"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "imappop")) {
                String sql = "select * from imappop_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setProtocol(rs.getString("protocol"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "mobile")) {
                String sql = "select * from mobile_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setCountry_code(rs.getString("country_code"));
                    form_details.setNew_mobile(rs.getString("new_mobile"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "nkn_single") || whichform.equalsIgnoreCase("nkn_bulk")) // line modified by pr on 12thapr18
            {
                String sql = "select * from nkn_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    //form_details.setOrg(rs.getString("request_type"));
                    form_details.setInst_name(rs.getString("inst_name"));
                    form_details.setInst_id(rs.getString("inst_id"));
                    form_details.setNkn_project(rs.getString("nkn_project"));
                    form_details.setSingle_dob(rs.getString("dob"));
                    form_details.setSingle_dor(rs.getString("dor"));
                    form_details.setSingle_email1(rs.getString("preferred_email1"));
                    form_details.setSingle_email2(rs.getString("preferred_email2"));
                    //form_details.setOrg(rs.getString("uploaded_filename"));
                    //form_details.setOrg(rs.getString("renamed_filepath"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "gem")) {
                String sql = "select * from gem_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setPse(rs.getString("pse"));
                    form_details.setPse_ministry(rs.getString("pse_ministry"));
                    form_details.setPse_state(rs.getString("pse_state"));
                    form_details.setPse_district(rs.getString("pse_district"));
                    form_details.setSingle_dob(rs.getString("dob"));
                    form_details.setSingle_dor(rs.getString("dor"));
                    form_details.setSingle_email1(rs.getString("preferred_email1"));
                    form_details.setSingle_email2(rs.getString("preferred_email2"));
                    form_details.setDomestic_traf(rs.getString("traffic"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "bulkuser") || whichform.equalsIgnoreCase("bulk")) // updated by pr on 22ndmar18
            {
                String sql = "select * from bulk_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setSingle_id_type(rs.getString("id_type"));
                    form_details.setSingle_dob(rs.getString("dob"));
                    form_details.setSingle_dor(rs.getString("dor"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "dlist")) {
                String sql = "select * from distribution_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setList_name(rs.getString("list_name"));
                    form_details.setDescription_list(rs.getString("list_description"));
                    form_details.setList_mod(rs.getString("list_moderated"));
                    form_details.setAllowed_member(rs.getString("allowed_member_mail"));
                    //form_details.setOrg(rs.getString("other_member_mail"));
                    form_details.setList_temp(rs.getString("list_temp"));
                    form_details.setValidity_date(rs.getString("valid_date"));
                    form_details.setT_off_name(rs.getString("moderator_name"));
                    form_details.setTauth_email(rs.getString("moderator_email"));
                    form_details.setTmobile(rs.getString("moderator_mobile"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "bulkdlist")) {
                String sql = "select * from bulk_distribution_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department"));
                    form_details.setStateCode(rs.getString("state"));
                    form_details.setList_name(rs.getString("list_name"));
                    form_details.setDescription_list(rs.getString("list_description"));
                    form_details.setList_mod(rs.getString("list_moderated"));
                    form_details.setAllowed_member(rs.getString("allowed_member_mail"));
                    //form_details.setOrg(rs.getString("other_member_mail"));
                    form_details.setList_temp(rs.getString("list_temp"));
                    form_details.setValidity_date(rs.getString("valid_date"));
                    form_details.setT_off_name(rs.getString("moderator_name"));
                    form_details.setTauth_email(rs.getString("moderator_email"));
                    form_details.setTmobile(rs.getString("moderator_mobile"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "relay")) {
                String sql = "select * from relay_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setRelay_ip(rs.getString("app_ip"));
                    form_details.setRelay_app_name(rs.getString("app_name"));
                    form_details.setDivision(rs.getString("division_name"));
                    form_details.setOs(rs.getString("os"));
                    form_details.setServer_loc(rs.getString("server_loc"));
                    form_details.setServer_loc_txt(rs.getString("server_loc_other"));
                    form_details.setIp_staging(rs.getString("staging_ip"));
                }
            } else if (whichform.equalsIgnoreCase(
                    "ip")) {
                String sql = "select * from ip_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setReq_for(rs.getString("ip_action_request"));
                    form_details.setAccount_name(rs.getString("account_name"));
                    form_details.setAdd_ip1(rs.getString("ip1"));
                    form_details.setAdd_ip2(rs.getString("ip2"));
                    form_details.setAdd_ip3(rs.getString("ip3"));
                    form_details.setAdd_ip4(rs.getString("ip4"));
                    form_details.setIp_type(rs.getString("ip_change_request"));
                }
            } else if (whichform.equalsIgnoreCase("webcast")) {
                String sql = "select * from webcast_Registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setFwd_ofc_name(rs.getString("fwd_ofc_name"));
                    form_details.setFwd_ofc_email(rs.getString("fwd_ofc_email"));
                    form_details.setFwd_ofc_mobile(rs.getString("fwd_ofc_mobile"));
                    form_details.setFwd_ofc_tel(rs.getString("fwd_ofc_tel"));
                    form_details.setFwd_ofc_add(rs.getString("fwd_ofc_add"));
                    form_details.setFwd_ofc_design(rs.getString("fwd_ofc_desig"));
                    form_details.setReq_for(rs.getString("request_type"));
                    if (rs.getString("request_type").equals("live")) {
                        form_details.setEvent_coo_name(rs.getString("event_coo_name"));
                        form_details.setEvent_coo_email(rs.getString("event_coo_email"));
                        form_details.setEvent_coo_design(rs.getString("event_coo_design"));
                        form_details.setEvent_coo_mobile(rs.getString("event_coo_mobile"));
                        form_details.setEvent_coo_address(rs.getString("event_coo_address"));
                        form_details.setEvent_name_eng(rs.getString("event_name_eng"));
                        form_details.setEvent_name_hin(rs.getString("event_name_hindi"));
                        form_details.setEvent_start_date(rs.getString("event_start"));
                        form_details.setEvent_end_date(rs.getString("event_end"));
                        form_details.setEvent_type(rs.getString("event_type"));
                        form_details.setTelecast(rs.getString("event_telecast"));
                        if (rs.getString("event_telecast").equals("yes")) {
                            form_details.setChannel_name(rs.getString("channel_name"));
                        } else {
                            form_details.setLive_feed(rs.getString("live_feed"));
                            if (rs.getString("live_feed").equalsIgnoreCase("Through VC")) {
                                form_details.setVc_id(rs.getString("vc_id"));
                            }
                        }
                        form_details.setConf_radio(rs.getString("conf_radio"));
                        form_details.setConf_name(rs.getString("conf_name"));
                        form_details.setConf_type(rs.getString("conf_type"));
                        form_details.setConf_city(rs.getString("conf_city"));
                        form_details.setConf_schedule(rs.getString("conf_schedule"));
                        form_details.setConf_session(rs.getString("conf_session"));
                        form_details.setConf_bw(rs.getString("conf_bw"));
                        form_details.setConf_provider(rs.getString("conf_provider"));
                        form_details.setConf_event_hired(rs.getString("conf_event_hired"));
                        form_details.setConf_flash(rs.getString("conf_flash"));
                        form_details.setConf_video(rs.getString("conf_video"));
                        if (rs.getString("conf_video").equals("yes")) {
                            form_details.setConf_contact(rs.getString("conf_contact"));
                        }
                        if (rs.getString("conf_flash").equals("no")) {
                            form_details.setLocal_setup(rs.getString("local_setup"));
                        }
                        form_details.setHall_type(rs.getString("hall_type"));
                        form_details.setHall_number(rs.getString("hall_number"));

                    } else if (rs.getString("request_type").equals("demand")) {
                        form_details.setEvent_size(rs.getString("event_size"));
                        form_details.setEvent_no(rs.getString("event_no"));
                        form_details.setMedia_format(rs.getString("media_format"));
                    }
                    form_details.setPayment(rs.getString("payment"));
                    if (rs.getString("payment").equals("yes")) {
                        form_details.setCheque_no(rs.getString("cheque_no"));
                        form_details.setCheque_amount(rs.getString("cheque_amount"));
                        form_details.setCheque_date(rs.getString("cheque_date"));
                        form_details.setBank_name(rs.getString("bank_name"));
                    }
                    form_details.setRemarks(rs.getString("remarks"));

                }
            } else if (whichform.equalsIgnoreCase("wifiport")) {
                String sql = "select * from wifiport_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    pst = conSlave.prepareStatement("select sourceIP,destinationIP,service,ports,action,timeperiod from wifiport_entries where registration_no=?");
                    pst.setString(1, refno);
                    rs4 = pst.executeQuery();
                    String sourceIP = "";
                    String destinationIP = "";
                    String service = "";
                    String ports = "";
                    String action = "";
                    String timeperiod = "";
                    while (rs4.next()) {
                        sourceIP = sourceIP + rs4.getString("sourceIP").concat(";");
                        destinationIP = destinationIP + rs4.getString("destinationIP").concat(";");
                        service = service + rs4.getString("service").concat(";");
                        ports = ports + rs4.getString("ports").concat(";");
                        action = action + rs4.getString("action").concat(";");
                        timeperiod = timeperiod + rs4.getString("timeperiod").concat(";");
                    }
                    if (sourceIP.length() > 0) {
                        sourceIP = sourceIP.substring(0, sourceIP.length() - 1);
                        destinationIP = destinationIP.substring(0, destinationIP.length() - 1);
                        service = service.substring(0, service.length() - 1);
                        ports = ports.substring(0, ports.length() - 1);
                        action = action.substring(0, action.length() - 1);
                        timeperiod = timeperiod.substring(0, timeperiod.length() - 1);
                        pst.close();
                        rs4.close();
                    }

                    form_details.setSourceip(sourceIP);
                    form_details.setDestinationip(destinationIP);
                    form_details.setService(service);
                    form_details.setPorts(ports);
                    form_details.setAction(action);
                    form_details.setTimeperiod(timeperiod);
                }
            } else if (whichform.equalsIgnoreCase("centralutm")) {
                String sql = "select * from centralutm_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    pst = conSlave.prepareStatement("select sourceIP,destinationIP,service,ports,action,timeperiod from firewall_entries where registration_no=?");
                    pst.setString(1, refno);
                    rs4 = pst.executeQuery();
                    String sourceIP = "";
                    String destinationIP = "";
                    String service = "";
                    String ports = "";
                    String action = "";
                    String timeperiod = "";
                    while (rs4.next()) {
                        sourceIP = sourceIP + rs4.getString("sourceIP").concat(";");
                        destinationIP = destinationIP + rs4.getString("destinationIP").concat(";");
                        service = service + rs4.getString("service").concat(";");
                        ports = ports + rs4.getString("ports").concat(";");
                        action = action + rs4.getString("action").concat(";");
                        timeperiod = timeperiod + rs4.getString("timeperiod").concat(";");
                    }
                    if (sourceIP.length() > 0) {
                        sourceIP = sourceIP.substring(0, sourceIP.length() - 1);
                        destinationIP = destinationIP.substring(0, destinationIP.length() - 1);
                        service = service.substring(0, service.length() - 1);
                        ports = ports.substring(0, ports.length() - 1);
                        action = action.substring(0, action.length() - 1);
                        timeperiod = timeperiod.substring(0, timeperiod.length() - 1);
                        pst.close();
                        rs4.close();
                    }

                    form_details.setSourceip(sourceIP);
                    form_details.setDestinationip(destinationIP);
                    form_details.setService(service);
                    form_details.setPorts(ports);
                    form_details.setAction(action);
                    form_details.setTimeperiod(timeperiod);
                }

            } else if (whichform.equalsIgnoreCase("vpn_single") || whichform.equals("vpn_bulk") || whichform.equals("vpn_renew") || whichform.equals("change_add") || whichform.equals("vpn_surrender")) {

                String sql = "select * from vpn_registration where registration_no=?";
                String json = null;
                pst = conSlave.prepareStatement(sql);
                pst.setString(1, refno);
                rs = pst.executeQuery();
                while (rs.next()) {
                    form_details.setHod_name(rs.getString("hod_name"));
                    form_details.setHod_email(rs.getString("hod_email"));
                    form_details.setHod_mobile(rs.getString("hod_mobile"));
                    form_details.setHod_tel(rs.getString("hod_telephone"));
                    form_details.setUser_name(rs.getString("auth_off_name"));
                    form_details.setUser_design(rs.getString("designation"));
                    form_details.setUser_address(rs.getString("address"));
                    form_details.setUser_city(rs.getString("city"));
                    form_details.setUser_state(rs.getString("add_state"));
                    form_details.setUser_pincode(rs.getString("pin"));
                    form_details.setUser_ophone(rs.getString("ophone"));
                    form_details.setUser_rphone(rs.getString("rphone"));
                    form_details.setUser_mobile(rs.getString("mobile"));
                    form_details.setUser_email(rs.getString("auth_email"));
                    form_details.setUser_empcode(rs.getString("emp_code"));
                    form_details.setUser_employment(rs.getString("employment"));
                    form_details.setMin(rs.getString("ministry"));
                    form_details.setDept(rs.getString("department"));
                    form_details.setOther_dept(rs.getString("other_dept"));
                    form_details.setUser_state(rs.getString("state"));
                    form_details.setOrg(rs.getString("organization"));
                    form_details.setState_dept(rs.getString("department")); // line added by pr on 22ndmar18
                    form_details.setStateCode(rs.getString("state")); // line added by pr on 22ndmar18
                    form_details.setReq_for(rs.getString("user_type"));
                    form_details.setVpn_coo(rs.getString("coordinator_email"));

                    ArrayList aliases = entities.LdapQuery.GetMailEqui(rs.getString("auth_email"));
                    int sizeOfAliases = aliases.size();
                    String commaSeparatedAliases = "";

                    if (sizeOfAliases > 1) {
                        for (Object email : aliases) {
                            commaSeparatedAliases += "\"" + email + "\",";
                        }
                        commaSeparatedAliases = commaSeparatedAliases.replaceAll(",$", "");

                    } else if (sizeOfAliases == 1) {
                        commaSeparatedAliases = "\"" + aliases.iterator().next() + "\"";
                    } else if (sizeOfAliases == 0) {
                        commaSeparatedAliases = "\"" + rs.getString("auth_email") + "\"";
                    }

                    form_details.setMail(commaSeparatedAliases);

                    if (rs.getString("user_type").equals("change_add") || rs.getString("user_type").equals("vpn_single")) {
                        String sql1 = "select * from vpn_entries where registration_no=?";
                        PreparedStatement pst1 = conSlave.prepareStatement(sql1);
                        pst1.setString(1, refno);
                        rs1 = pst1.executeQuery();
                        Map vpn_data = new LinkedHashMap();
                        int i = 0;

                        while (rs1.next()) {
                            Map vpn_div_data = new LinkedHashMap();
                            vpn_div_data.put("regno", rs1.getString("registration_no"));
                            vpn_div_data.put("id", rs1.getString("id"));
                            vpn_div_data.put("ip_type", rs1.getString("ip_type"));
                            vpn_div_data.put("ip1", rs1.getString("ip1"));
                            vpn_div_data.put("ip2", rs1.getString("ip2"));
                            if (rs1.getString("ip_type").equals("single")) {
                                vpn_div_data.put("ip", rs1.getString("ip1"));
                            } else {
                                vpn_div_data.put("ip", rs1.getString("ip1") + " - " + rs1.getString("ip2"));
                            }
                            vpn_div_data.put("app_url", rs1.getString("app_url"));
                            vpn_div_data.put("dest_port", rs1.getString("dest_port"));
                            vpn_div_data.put("server_loc", rs1.getString("server_location"));
                            vpn_div_data.put("server_loc_txt", rs1.getString("server_loc_other"));
                            if (rs1.getString("server_location").equalsIgnoreCase("other")) {
                                vpn_div_data.put("server", rs1.getString("server_loc_other"));
                            } else {
                                vpn_div_data.put("server", rs1.getString("server_location"));
                            }
                            vpn_div_data.put("action_type", rs1.getString("action_type"));
                            vpn_div_data.put("deleted_flag", rs1.getString("deleted_flag"));
                            vpn_div_data.put("deleted_by", rs1.getString("deleted_by"));
                            vpn_data.put("div_" + i, vpn_div_data);
                            i++;
                        }

                        rs1.close();
                        pst1.close();
                        form_details.setVpn_data(vpn_data);
                        //vpn_data.put("vpn_data_all", vpn_data);

                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs1 != null) {
                try {
                    rs1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs2 != null) {
                try {
                    rs2.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs3 != null) {
                try {
                    rs3.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (rs4 != null) {
                try {
                    rs4.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return form_details;

    }

    public String fetchStatType(String regNo) {
        String statType = "";
        ResultSet res = null;
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            //con = getConnection();
            conSlave = DbConnection.getSlaveConnection();
            String qry = "select stat_type from status WHERE stat_reg_no = ? ORDER BY stat_id DESC LIMIT 1 ";// line modified by pr on 2ndjan18
            pst = conSlave.prepareStatement(qry);
            pst.setString(1, regNo);
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside getStatType " + pst);

            res = pst.executeQuery();
            while (res.next()) {
                statType = res.getString("stat_type");
            }
        } catch (Exception ex) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside getCompletedRequest " + ex.getMessage());
        } finally {
            try {
                res.close();
                pst.close();
                // con.close();

            } catch (SQLException ex) {
                Logger.getLogger(UserTrack.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        return statType;
    }

//    public Boolean queryRaiseStatus(String reg_no) {     // Commented by AT & RM  june-2021
//        Boolean queryStatus = false;
//        ResultSet rs = null;
//        PreparedStatement ps = null;
//        //Connection con = null;
//        try {
//            //con = DbConnection.getConnection();
//            conSlave = DbConnection.getSlaveConnection();
//            String qry = "  SELECT qr_forwarded_to FROM query_raise WHERE qr_reg_no = ? ORDER BY qr_createdon DESC LIMIT 1 ";
//            ps = conSlave.prepareStatement(qry);
//            ps.setString(1, reg_no);
//            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside queryRaiseStatus func select query from query_raise is " + ps);
//            //int rs = ps.executeUpdate();
//            rs = ps.executeQuery();
//            String stat_type = "";
//            while (rs.next()) {
//                // if the last entry matches with the logged in users role and email then queryStatus will be true
//                if (rs.getString("qr_forwarded_to").equals("u")) {
//                    queryStatus = true;
//                }
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//            try {
//                ps.close();
//                rs.close();
//                // con.close();
//
//            } catch (SQLException ex) {
//                Logger.getLogger(UserTrack.class
//                        .getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//        return queryStatus;
//    }
//
//    public Boolean queryRaiseStatusby(String reg_no) {    // added by rahul march 2021
//        Boolean queryStatus1 = false;
//        ResultSet rs = null;
//        PreparedStatement ps = null;
//        //Connection con = null;
//        try {
//            //con = DbConnection.getConnection();
//            conSlave = DbConnection.getSlaveConnection();
//            String qry = "  SELECT qr_forwarded_by FROM query_raise WHERE qr_reg_no = ? ORDER BY qr_createdon DESC LIMIT 1 ";
//            ps = conSlave.prepareStatement(qry);
//            ps.setString(1, reg_no);
//            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside queryRaiseStatus func select query from query_raise is " + ps);
//            //int rs = ps.executeUpdate();
//            rs = ps.executeQuery();
//            String stat_type = "";
//            while (rs.next()) {
//                // if the last entry matches with the logged in users role and email then queryStatus will be true
//                if (rs.getString("qr_forwarded_by").equals("u")) {
//                    queryStatus1 = true;
//                }
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        } finally {
//            try {
//                ps.close();
//                rs.close();
//                // con.close();
//
//            } catch (SQLException ex) {
//                Logger.getLogger(UserTrack.class
//                        .getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//        return queryStatus1;
//    }
    public String queryRaiseStatusNew(String regNo) {   // added by rahul June 2021
        String status = "";
        Integer raisedQueriesCount = 0, respondedQueriesCount = 0, neutralQueriesCount = 0;

        UserData userdata = (UserData) session.get("uservalues");
        String loggedin_email = userdata.getEmail();
        Set<String> aliases = (Set<String>) userdata.getAliases(); // iterate through this set and check if it is equal to qr_forwarded_by_user 
        List<Integer> res = new ArrayList<Integer>();
        PreparedStatement ps = null;
        ResultSet rs = null;
        boolean flag = false;
        boolean innerFlag = false;
        String roleInSession = fetch_role();
        String currentRole = "";
        switch (roleInSession) {
            case Constants.ROLE_USER:
                currentRole = "u";
                break;
            case Constants.ROLE_CA:
                currentRole = "ca";
                break;
            case Constants.ROLE_SUP:
                currentRole = "s";
                break;
            case Constants.ROLE_MAILADMIN:
                currentRole = "m";
                break;
            case Constants.ROLE_DA:
                currentRole = "da";
                break;
            case Constants.ROLE_CO:
                currentRole = "c";
                break;
        }

        /**
         * 0 implies raised, 1 implies responded, -1 implies Done/neutral
         */
        try {
            conSlave = DbConnection.getSlaveConnection();
            String qry = "select * from query_raise where  qr_reg_no = ? and (qr_forwarded_by = ? or qr_forwarded_to = ?) order by qr_createdon asc";
            ps = conSlave.prepareStatement(qry);
            ps.setString(1, regNo);
            ps.setString(2, currentRole);
            ps.setString(3, currentRole);
            System.out.println("Table featched data: " + ps);
            rs = ps.executeQuery();
            while (rs.next()) {
                flag = true;
                innerFlag = false;
                status = rs.getString("status");
                String toRole = rs.getString("qr_forwarded_to");
                String fromRole = rs.getString("qr_forwarded_by");
                String from = rs.getString("qr_forwarded_by_user");
                String to = rs.getString("qr_forwarded_to_user");

                if (status.equals("responded")) {
                    for (String loggedInEmail : aliases) {
                        innerFlag = true;
                        if (loggedInEmail.equalsIgnoreCase(from) && currentRole.equalsIgnoreCase(fromRole)) {
                            res.add(-1);
                            raisedQueriesCount = raisedQueriesCount - 1;
                        } else {
                            String[] toEmails = to.split(",");
                            for (String toEmail : toEmails) {
                                if (loggedInEmail.equalsIgnoreCase(toEmail) && currentRole.equalsIgnoreCase(toRole)) {
                                    res.add(-1);
                                    respondedQueriesCount = respondedQueriesCount - 1;
                                }
                            }
                        }
                    }
                } else if (status.equals("raised")) {
                    for (String loggedInEmail : aliases) {
                        String[] toEmails = to.split(",");
                        for (String toEmail : toEmails) {
                            if (loggedInEmail.equalsIgnoreCase(toEmail) && currentRole.equalsIgnoreCase(toRole)) {
                                innerFlag = true;
                                res.add(0);
                            }
                        }
                    }
                }

                if (!innerFlag) {
                    for (String loggedInEmail : aliases) {
                        if (loggedInEmail.equalsIgnoreCase(from) && currentRole.equalsIgnoreCase(fromRole)) {
                            innerFlag = true;
                            res.add(1);
                        }
                    }
                }
            }

            if (!flag) {
                showQueryRespone = "";
            }

            for (Integer re : res) {
                if (re == 0) {
                    raisedQueriesCount += 1;
                } else if (re == 1) {
                    respondedQueriesCount += 1;
                } else {
                    neutralQueriesCount += 1;
                }
            }

            if (raisedQueriesCount > 0 && respondedQueriesCount > 0) {
                showQueryRespone = "both";
            } else if (raisedQueriesCount > 0 && respondedQueriesCount <= 0) {
                showQueryRespone = "raised";
            } else if (respondedQueriesCount > 0 && raisedQueriesCount <= 0) {
                showQueryRespone = "responded";
            } else {
                showQueryRespone = "";
            }
        } catch (Exception e) {
            System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip
                    + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside queryRaiseStatus EXCEPTION 1 " + e.getMessage());
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip
                            + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside queryRaiseStatus EXCEPTION 2 " + e.getMessage());
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {

                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip
                            + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside queryRaiseStatus EXCEPTION 3 " + e.getMessage());
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip
                            + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside queryRaiseStatus EXCEPTION 4 " + e.getMessage());
                }
            }
        }
        return showQueryRespone;
    }

    public Boolean fetchStatBasedShowAction(String stat_type, String formName) // parameter added by pr on 27thdec17
    {
        showAction = false;
        showBulkLink = false;
//        if(formName.equalsIgnoreCase("dor_ext_retired"))  // commented by rahul 02sep2022
//            return false;
        if (stat_type.equals("ca_pending") || stat_type.equals("manual_upload") || stat_type.equals("api") || stat_type.equals("domainapi")) // api condition added by pr on 13thjul18
        {
            showAction = true;
        } else {
            showAction = false;
        }
        // if added by pr on 27thdec17
        //if ((formName.equals(Constants.BULK_FORM_KEYWORD) || formName.equals(Constants.NKN_BULK_FORM_KEYWORD)) && stat_type.equals("completed")) {
        if ((formName.equals(Constants.BULK_FORM_KEYWORD) || formName.equals(Constants.NKN_BULK_FORM_KEYWORD)) && (stat_type.equals("completed") || stat_type.contains("rejected"))) {
            showBulkLink = true;
        }
        //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: "+  ip +" == USERTRACK == USERAGENT "+ userAgent    + " == " + " inside fetchRoleBasedShowAction stat_type is "+stat_type+" role is "+role+" showAction value is "+showAction);
        return showAction;
    }

    // below function modified by pr on 2ndjan18
    public Forms updateFormsObj(Forms frmObj) {
        Forms obj = frmObj;
        String stat_form_type = frmObj.get_stat_form_type();
        String stat_reg_no = frmObj.get_stat_reg_no();
        ResultSet res = null;
        PreparedStatement ps = null;
        //Connection con = null;
        try {
            /*Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://" + dbhost + "/" + dbname, dbuser, dbpass);*/
            // below code added by pr on 19thdec17
            //con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection();
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside updateFormsObj DB connection " + e.getMessage());
        }
        String qry = "", tblName = "";
        if (stat_form_type.equals(Constants.SMS_FORM_KEYWORD)) {
            tblName = Constants.SMS_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.SINGLE_FORM_KEYWORD)) {
            tblName = Constants.SINGLE_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.BULK_FORM_KEYWORD)) {
            tblName = Constants.BULK_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.IP_FORM_KEYWORD)) {
            tblName = Constants.IP_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.NKN_SINGLE_FORM_KEYWORD) || stat_form_type.equals(Constants.NKN_BULK_FORM_KEYWORD)) {
            tblName = Constants.NKN_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.RELAY_FORM_KEYWORD)) {
            tblName = Constants.RELAY_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.LDAP_FORM_KEYWORD)) {
            tblName = Constants.LDAP_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.DIST_FORM_KEYWORD)) {
            tblName = Constants.DIST_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.BULKDIST_FORM_KEYWORD)) {
            tblName = Constants.BULKDIST_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.IMAP_FORM_KEYWORD)) {
            tblName = Constants.IMAP_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.GEM_FORM_KEYWORD)) {
            tblName = Constants.GEM_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.MOB_FORM_KEYWORD)) {
            tblName = Constants.MOB_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.DNS_FORM_KEYWORD)) {
            tblName = Constants.DNS_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.WIFI_FORM_KEYWORD)) {
            tblName = Constants.WIFI_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.WIFI_PORT_FORM_KEYWORD)) {
            tblName = Constants.WIFI_PORT_TABLE_NAME;
        } else if (stat_form_type.equals(Constants.VPN_ADD_FORM_KEYWORD) || stat_form_type.equals(Constants.VPN_SINGLE_FORM_KEYWORD) || stat_form_type.equals(Constants.VPN_RENEW_FORM_KEYWORD) || stat_form_type.equals(Constants.VPN_SURRENDER_FORM_KEYWORD) || stat_form_type.equals(Constants.VPN_DELETE_FORM_KEYWORD)) {
            tblName = "vpn_registration";
        } else if (stat_form_type.equals(Constants.WEBCAST_FORM_KEYWORD)) {
            tblName = "webcast_registration";
        } else if (stat_form_type.equals(Constants.FIREWALL_FORM_KEYWORD)) {
            tblName = "centralutm_registration";
        } else if (stat_form_type.equals(Constants.EMAILACTIVATE_FORM_KEYWORD)) {
            tblName = "email_act_registration";
        } else if (stat_form_type.equals(Constants.EMAILDEACTIVATE_FORM_KEYWORD)) {
            tblName = "email_deact_registration";
        } else if (stat_form_type.equals(Constants.DOR_EXT_FORM_KEYWORD)) {
            tblName = "dor_ext_registration";
        } else if (stat_form_type.equals(Constants.DOR_EXT_RT_FORM_KEYWORD)) {
            tblName = "dor_ext_retired_registration";
        } else if (stat_form_type.equals(Constants.DAONBOARDING_FORM_KEYWORD)) {
            tblName = "daonboarding_registration";
        }

        if (!stat_form_type.equals(Constants.DOR_EXT_RT_FORM_KEYWORD)) {
            qry = "SELECT auth_email,mobile,hod_email,hod_mobile,sign_cert,rename_sign_cert,ca_sign_cert,ca_rename_sign_cert,pdf_path FROM " + tblName + " WHERE registration_no = ?";
            // select query in sms table corresponding to the reg no
            try {
                ps = conSlave.prepareStatement(qry);
                ps.setString(1, stat_reg_no);
                System.out.println(printlog + " query is " + qry);
                res = ps.executeQuery();
                System.out.println("RES ::: " + res);
                while (res.next()) {
                    obj.set_email(res.getString("auth_email"));
                    obj.set_mobile(res.getString("mobile"));
                    obj.setHod_email(res.getString("hod_email"));
                    obj.setHod_mobile(res.getString("hod_mobile"));
                    obj.setSign_cert(res.getString("sign_cert"));
                    obj.setRename_sign_cert(res.getString("rename_sign_cert"));
                    obj.setCa_sign_cert(res.getString("ca_sign_cert"));
                    obj.setCa_rename_sign_cert(res.getString("ca_rename_sign_cert"));
                    //  if (res.getString("pdf_path") != null) {
                    if (!res.getString("pdf_path").contains("eSigned_") && !res.getString("pdf_path").contains("online processing")) {
                        obj.setPdf_path("manual_upload");
                    } else {
                        obj.setPdf_path(res.getString("pdf_path"));
                    }
//                } else {
//                    obj.setPdf_path("online processing");
//                }
                }
            } catch (Exception e) {
                // e.printStackTrace();
                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside updateFormsObj DB connection: " + stat_form_type + " - " + e.getMessage());
            }
        } else {
            qry = "SELECT auth_email,mobile FROM " + tblName + " WHERE registration_no = ?";
            // select query in sms table corresponding to the reg no
            try {
                ps = conSlave.prepareStatement(qry);
                ps.setString(1, stat_reg_no);
                System.out.println(printlog + " query is " + qry);
                res = ps.executeQuery();
                System.out.println("RES ::: " + res);
                while (res.next()) {
                    obj.set_email(res.getString("auth_email"));
                    obj.set_mobile(res.getString("mobile"));
                }
            } catch (Exception e) {
                // e.printStackTrace();
                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " inside updateFormsObj DB connection: " + stat_form_type + " - " + e.getMessage());
            }
        }
        return obj;
    }

    public String fetchStatTypeString(String stat_type) {
        System.out.println(printlog + " inside get stat type string stat_type is " + stat_type);
        String type = "";
        if (stat_type.equals("ca_pending")) {
            type = Constants.CA_PENDING;
        } else if (stat_type.equals("ca_rejected")) {
            type = Constants.CA_REJECTED;
        } else if (stat_type.equals("support_pending")) {
            type = Constants.SUPPORT_PENDING;
        } else if (stat_type.equals("support_rejected")) {
            type = Constants.SUPPORT_REJECTED;
        } else if (stat_type.equals("coordinator_pending")) {
            type = Constants.COORDINATOR_PENDING;
        } else if (stat_type.equals("coordinator_rejected")) {
            type = Constants.COORDINATOR_REJECTED;
        } else if (stat_type.equals("completed")) {
            type = Constants.COMPLETED;
        } else if (stat_type.equals("cancel")) {
            type = Constants.CANCEL;
        } else if (stat_type.equals("mail-admin_pending")) {
            type = Constants.MAIL_ADMIN_PENDING;
        } else if (stat_type.equals("mail-admin_rejected")) {
            type = Constants.MAIL_ADMIN_REJECTED;
        } else if (stat_type.equals("da_pending")) // else if added by pr on 20thfeb18
        {
            type = Constants.DA_PENDING;
        } else if (stat_type.equals("da_rejected")) // else if added by pr on 6thapr18
        {
            type = Constants.DA_REJECTED;
        } else if (stat_type.equals("api")) // else if added by pr on 6thapr18
        {
            type = Constants.PENDING_API;
        } else if (stat_type.equals("domainapi")) // else if added by pr on 6thapr18
        {
            type = Constants.PENDING_API;
        } else if (stat_type.equals("manual_upload")) // else if added by pr on 6thapr18
        {
            type = Constants.manual_upload;
        } else if (stat_type.equals("us_pending")) // start,code added  by pr on 12thjan19
        {
            type = "Pending with Under Secretary and above";
        } else if (stat_type.equals("us_rejected")) {
            type = "Rejected by Under Secretary and above";
        } else if (stat_type.equals("us_expired")) {
            type = "Under Secretary and above Link Timeout";
        }// end, code added  by pr on 12thjan19
        return type;
    }

    public String showUserData() {

        String returnResponse = "";
        int pendingCount = 0;
        int totalCount = 0;
        int newCount = 0;
        int completeCount = 0;
        int rejectedCount = 0;

        listBeanObj = new ListBean();

        UserData userdata = (UserData) session.get("uservalues");

        if (userdata != null) {
            Set<String> s1 = (Set<String>) userdata.getAliases();
            ArrayList<String> aliases = new ArrayList<>();
            aliases.addAll(s1);
            if (actype.equals("pending")) {
                listBeanObj.setHeading("Total Pending Requests");
            } else if (actype.equals("total")) {
                listBeanObj.setHeading("Total Requests");
            } else if (actype.equals("completed")) {
                listBeanObj.setHeading("Completed Requests");
            } else if (actype.equals("new")) {
                listBeanObj.setHeading("Today's Pending Request");
            } else if (actype.equals("filter")) {
                filter(aliases);
            } else {
                listBeanObj.setHeading("Total Pending Request");

                showFilters(s1);

                // = fetchCount("pending", "all", aliases);
                rejectedCount = fetchCount("rejected", "all", aliases);
                totalCount = fetchCount("total", "all", aliases);
                //newCount = fetchCount("new", "all", aliases);
                completeCount = fetchCount("completed", "all", aliases);
                int rejectedCountForToday = fetchCount("rejectedfortoday", "all", aliases);
                int totalCountForToday = fetchCount("totalfortoday", "all", aliases);
                //newCount = fetchCount("new", "all", aliases);
                int completeCountForToday = fetchCount("completedfortoday", "all", aliases);
                pendingCount = totalCount - (completeCount + rejectedCount);
                newCount = totalCountForToday - (completeCountForToday + rejectedCountForToday);

                session.put("totalcount", totalCount);
                session.put("newcount", newCount);
                session.put("pendingcount", pendingCount);
                session.put("completecount", completeCount);

                listBeanObj.setTotalRequest(Integer.toString(totalCount));
                listBeanObj.setNewRequest(Integer.toString(newCount));
                listBeanObj.setPendingRequest(Integer.toString(pendingCount));
                listBeanObj.setCompleteRequest(Integer.toString(completeCount));

                if (filterForms != null && filterForms.size() > 0) {
                    listBeanObj.setFilterForms(filterForms);
                }
            }

            if (!actype.equals("filter")) {
                if (actype.equals("")) {
                    listBeanObj.setData(fetchDataPage("pending", "all", aliases));
                } else {
                    listBeanObj.setData(fetchDataPage(actype, "all", aliases));
                }
            }

            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " return response is " + returnResponse);

            setListBeanObj(listBeanObj);
            returnResponse = "success";
        } else {
            returnResponse = "logout";
        }
        return returnResponse;
    }

    public String rawShowUserData() {
        String returnResponse = "";
        int pendingCount = 0;
        int totalCount = 0;
        int newCount = 0;
        int completeCount = 0;

        listBeanObj = new ListBean();

        UserData userdata = (UserData) session.get("uservalues");
        if (userdata != null) {
            Set<String> s1 = (Set<String>) userdata.getAliases();
            ArrayList<String> aliases = new ArrayList<>();
            aliases.addAll(s1);

            if (actype.equals("pending")) {
                listBeanObj.setHeading("Total Pending Requests");
            } else if (actype.equals("total")) {
                listBeanObj.setHeading("Total Requests");
            } else if (actype.equals("completed")) {
                listBeanObj.setHeading("Completed Requests");
            } else if (actype.equals("new")) {
                listBeanObj.setHeading("Today's Pending Request");
            } else if (actype.equals("filter")) {
                filter(aliases);
            } else {
                listBeanObj.setHeading("Total Pending Request");

                showFilters(s1);

                pendingCount = fetchCount("pending", "all", aliases);
                totalCount = fetchCount("total", "all", aliases);
                newCount = fetchCount("new", "all", aliases);
                completeCount = fetchCount("completed", "all", aliases);

                session.put("totalcountUser", totalCount);
                session.put("newcountUser", newCount);
                session.put("pendingcountUser", pendingCount);
                session.put("completecountUser", completeCount);

                listBeanObj.setTotalRequest(Integer.toString(totalCount));
                listBeanObj.setNewRequest(Integer.toString(newCount));
                listBeanObj.setPendingRequest(Integer.toString(pendingCount));
                listBeanObj.setCompleteRequest(Integer.toString(completeCount));

                if (filterForms != null && filterForms.size() > 0) {
                    listBeanObj.setFilterForms(filterForms);
                }
            }

            if (!actype.equals("filter")) {

                if (actype.equals("")) {
                    listBeanObj.setData(fetchDataPage("pending", "all", aliases));
                } else {
                    listBeanObj.setData(fetchDataPage(actype, "all", aliases));
                }
            }

            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " return response is " + returnResponse);

            setListBeanObj(listBeanObj);
            returnResponse = "success";
        } else {
            returnResponse = "logout";
        }
        return returnResponse;
    }

    // function modified by AT on 16thapr19
    public String filter(ArrayList<String> aliases) {
        ArrayList<Forms> finalArr = new ArrayList<>();
        ArrayList<String> frmArrList = new ArrayList<>();
        ArrayList<String> statArrList = new ArrayList<>();
        ArrayList<Forms> temp = null;
        if (frm != null && frm.length > 0) {
            for (String f : frm) {
                if (stat != null && stat.length > 0) {
                    for (String s : stat) {
                        statArrList.add(s);
                        String stat_form_type = f;
                        temp = fetchDataPage(s, stat_form_type, aliases);
                        if (temp != null && temp.size() > 0) {
                            finalArr.addAll(temp);
                            temp = null;
                        }
                    }
                    session.put("statArrList", statArrList);
                } else {
                    String stat_form_type = f;
                    temp = fetchDataPage("total", stat_form_type, aliases);
                    finalArr.addAll(temp);
                }
            }
            session.put("frmArrList", frmArrList);
        } else if (stat != null && stat.length > 0) {
            for (String s : stat) {
                statArrList.add(s);
                temp = null;
                temp = fetchDataPage(s, "all", aliases);
                if (temp != null && temp.size() > 0) {
                    finalArr.addAll(temp);
                    temp = null;
                }
            }
            session.put("statArrList", statArrList);
        } else {
            temp = fetchDataPage("total", "all", aliases);
            finalArr.addAll(temp);
        }

        System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " == " + " inside filter function and size of final array is " + finalArr.size());
        this.list = finalArr;
        this.setList(finalArr);
        session.put("filterData", finalArr);
        listBeanObj.setHeading("FILTERED REQUESTS");
        listBeanObj.setData(finalArr);

        return SUCCESS;
    }

    // modified by AT on 15thapr19, again modified on 16thapr19, again modified on 2ndmay19
    public int fetchCount(String type, String formName, ArrayList<String> aliases) {

        // start, code added by pr on 26thjun19
        ArrayList<String> queryRaiseData = null;
        System.out.println("Start process of fetchCount for user role: ");
        if (type.equals("query")) // if query raise data needs to be shown
        {
            type = "total"; // treat it as total

            queryRaiseData = fetchQueryRaisedForms();
        }

        // end, code added by pr on 26thjun19
        if (type.equals("query_ans")) // if added by pr on 27thjun19
        {
            type = "total"; // treat it as total

            queryRaiseData = fetchQueryAnsweredForms();
        }

        PreparedStatement ps = null;
        ResultSet res1 = null;
        int cnt = 0;
        try {
            conSlave = DbConnection.getSlaveConnection();
            String qry = "SELECT count(*) FROM final_audit_track WHERE 1 ";
            if (type.equals("completed")) {
                qry += "  and status = 'completed' ";
            } else if (type.equals("rejected")) {
                qry += "  and (status = 'cancel'  || status = 'ca_rejected' || status = 'coordinator_rejected' || status = 'support_rejected' || status = 'da_rejected' || status = 'mail-admin_rejected' || status = 'us_rejected')";
            } else if (type.equals("completedfortoday")) {
                qry += "  and status = 'completed' ";
            } else if (type.equals("rejectedfortoday")) {
                qry += "  and (status = 'cancel'  || status = 'ca_rejected' || status = 'coordinator_rejected' || status = 'support_rejected' || status = 'da_rejected' || status = 'mail-admin_rejected' || status = 'us_rejected')";
            } else if (type.equals("forwarded")) {
                qry += "  and  status != 'cancel' and status != 'manual_upload' and status != 'manual' and status != 'api' and status != 'domainapi'";
            }
            int i = 1;
            for (Object s : aliases) {
                if (i == 1) {
                    qry += " and ( ";
                } else {
                    qry += " OR ";
                }
                if (type.equals("completed") || type.equals("forwarded") || type.equals("rejected")) {
                    qry += " ( applicant_email = '" + s.toString().trim() + "') ";
                } else if (type.equals("pending") || type.equals("new")) {
                    qry += " (((status = 'ca_pending' || status = 'coordinator_pending' || status = 'mail-admin_pending' || status = 'da_pending' || status = 'support_pending' || status = 'us_pending') and applicant_email = '" + s.toString().trim() + "') || ((status = 'manual' || status = 'manual_upload' || status = 'api') and to_email = '" + s.toString().trim() + "')) ";
                } else if (type.equals("total")) {
                    qry += "(( (status = 'manual' || status = 'manual_upload' || status = 'api' || status = 'domainapi') and  to_email = '" + s.toString().trim() + "') " + " OR applicant_email = '" + s.toString().trim() + "')";
                } else if (type.equals("totalfortoday")) {
                    qry += "(( (status = 'manual' || status = 'manual_upload' || status = 'api' || status = 'domainapi') and  to_email = '" + s.toString().trim() + "') " + " OR applicant_email = '" + s.toString().trim() + "')";
                } else {
                    qry += " ( (status = 'manual' || status = 'manual_upload' || status = 'api' || status = 'domainapi') and to_email = '" + s.toString().trim() + "'  ) ";
                }
                i++;
            }
            qry += " ) ";
            if (type.equals("new")) {
                qry += " and DATE( to_datetime ) = CURDATE()";
            } else if (type.equals("completedfortoday")) {
                qry += " and DATE( to_datetime ) = CURDATE()";
            } else if (type.equals("rejectedfortoday")) {
                qry += " and DATE( to_datetime ) = CURDATE()";
            } else if (type.equals("totalfortoday")) {
                qry += " and DATE( to_datetime ) = CURDATE()";
            }
            ArrayList<String> formNameArr = new ArrayList<>();
            if (formName.equals("all")) {
                formNameArr.add(Constants.SMS_FORM_KEYWORD);
                formNameArr.add(Constants.BULK_FORM_KEYWORD);
                formNameArr.add(Constants.IP_FORM_KEYWORD);
                formNameArr.add(Constants.DIST_FORM_KEYWORD);
                formNameArr.add(Constants.BULKDIST_FORM_KEYWORD);  // Added by Rahul jan 2021
                formNameArr.add(Constants.GEM_FORM_KEYWORD);
                formNameArr.add(Constants.IMAP_FORM_KEYWORD);
                formNameArr.add(Constants.LDAP_FORM_KEYWORD);
                formNameArr.add(Constants.MOB_FORM_KEYWORD);
                formNameArr.add(Constants.NKN_SINGLE_FORM_KEYWORD);
                formNameArr.add(Constants.RELAY_FORM_KEYWORD);
                formNameArr.add(Constants.SINGLE_FORM_KEYWORD);
                formNameArr.add(Constants.WIFI_FORM_KEYWORD);
                formNameArr.add(Constants.WIFI_PORT_FORM_KEYWORD);
                formNameArr.add(Constants.DNS_FORM_KEYWORD);
                formNameArr.add(Constants.VPN_SINGLE_FORM_KEYWORD);
                formNameArr.add(Constants.VPN_RENEW_FORM_KEYWORD);
                formNameArr.add(Constants.VPN_ADD_FORM_KEYWORD);
                formNameArr.add(Constants.VPN_SURRENDER_FORM_KEYWORD);
                formNameArr.add(Constants.VPN_DELETE_FORM_KEYWORD);
                formNameArr.add(Constants.FIREWALL_FORM_KEYWORD);
                formNameArr.add(Constants.WEBCAST_FORM_KEYWORD);
                formNameArr.add(Constants.EMAILACTIVATE_FORM_KEYWORD);
                formNameArr.add(Constants.EMAILDEACTIVATE_FORM_KEYWORD);
            } else {
                formNameArr.add(formName);
            }
            if (!formName.equals("all")) {
                if (formName.contains("nkn")) {
                    qry += " and  form_name like ? ";
                } else {
                    qry += " and  form_name = ? ";// line modified by pr on 27thdec17
                }
            }

            // start, code added by pr on 26thjun19
            // put a check on form reg nos here in case of query raise filter , below code added by pr on 26thjun19
            if (queryRaiseData != null) {
                String arrString = String.join("\",\"", queryRaiseData);

                arrString = "\"" + arrString + "\"";

                qry += " AND registration_no in (" + arrString + ") ";
            }

            // end, code added by pr on 26thjun19
            ps = conSlave.prepareStatement(qry);
            int pscnt = 0;
            if (!formName.equals("all")) {
                pscnt = pscnt + 1;
                if (formName.contains("nkn")) {
                    formName = "%nkn%";
                }
                ps.setString(pscnt, formName);
            }
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " COUNT QUERY is " + ps);
            res1 = ps.executeQuery();
            if (res1.next()) {
                cnt = res1.getInt(1);
            }
            //showFilters(s1);
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == "
                    + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " COUNT QUERY EXCEPTION " + e.getMessage());
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res1 != null) {
                try {
                    res1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return cnt;
    }

    // modified by AT on 15thapr19,again modified 2ndmay19
    public ArrayList<String> showFilters(Set<String> aliases) {
        PreparedStatement ps = null;
        ResultSet res1 = null;

        try {

            conSlave = DbConnection.getSlaveConnection();
            String qry = "SELECT distinct form_name FROM final_audit_track WHERE 1";
            if (aliases != null) {
                int i = 1;
                for (Object s : aliases) {
                    if (i == 1) {
                        qry += " and ( ";
                    } else {
                        qry += " OR ";
                    }
                    qry += "((  ( status = 'manual' || status = 'manual_upload' || status = 'api' ) and  to_email = '" + s.toString().trim() + "') OR applicant_email = '" + s.toString().trim() + "')";
                    i++;
                }
                qry += " ) ";
            }
            System.out.println(printlog + "Query : " + qry);
            ps = conSlave.prepareStatement(qry);
            res1 = ps.executeQuery();
            filterForms.clear();
            while (res1.next()) {
                filterForms.add(res1.getString("form_name"));
            }
        } catch (Exception e) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == "
                    + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " COUNT QUERY EXCEPTION " + e.getMessage());
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res1 != null) {
                try {
                    res1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return filterForms;
        }
    }

    // modified by AT on 15thapr19, again modified on 16thapr19,2ndmay19
    public ArrayList<Forms> fetchDataPage(String type, String formName, ArrayList<String> aliases) {
        ArrayList<Forms> totalArr = new ArrayList<>();
        PreparedStatement ps = null;
        ResultSet res1 = null;
        System.out.println(printlog + "inside get data page:::::::type" + type + "formName" + formName);

        // start, code added by pr on 26thjun19
        ArrayList<String> queryRaiseData = null;

        if (type.equals("query")) // if query raise data needs to be shown
        {
            type = "total"; // treat it as total

            queryRaiseData = fetchQueryRaisedForms();
        }

        // end, code added by pr on 26thjun19
        if (type.equals("query_ans")) // if added by pr on 27thjun19
        {
            type = "total"; // treat it as total

            queryRaiseData = fetchQueryAnsweredForms();
        }

        try {
            conSlave = DbConnection.getSlaveConnection();
            String qry = "SELECT status,form_name,track_id,registration_no,status,to_datetime,upload_work_order FROM final_audit_track WHERE 1 ";
            if (type.equals("completed")) {
                qry += "  and status = 'completed' ";
            } else if (type.equals("rejected")) {
                qry += "  and (status = 'cancel'  || status = 'ca_rejected' || status = 'coordinator_rejected' || status = 'support_rejected' || status = 'da_rejected' || status = 'mail-admin_rejected' || status = 'us_rejected')";
            } else if (type.equals("forwarded")) {
                qry += "  AND  status != 'cancel' and status != 'manual_upload' and status != 'manual' and status != 'api' and status != 'domainapi'";
            }
            int i = 1;
            for (Object s : aliases) {
                if (i == 1) {
                    qry += " and ( ";
                } else {
                    qry += " OR ";
                }
                if (type.equals("completed") || type.equals("forwarded") || type.equals("rejected")) {
                    qry += " ( applicant_email = '" + s.toString().trim() + "') ";
                } //                else if (type.equals("pending") || type.equals("new")) {
                //                    qry += " (((status = 'ca_pending' || status = 'coordinator_pending' || status = 'mail-admin_pending' || status = 'da_pending' || status = 'support_pending' || status = 'us_pending') and applicant_email = '" + s.toString().trim() + "') || ((status = 'manual' || status = 'manual_upload' || status = 'api'  || status = 'domainapi') and to_email = '" + s.toString().trim() + "')) ";
                //                }
                else if (type.equals("pending") || type.equals("new")) {
                    qry += "((status != 'completed' and status != 'cancel' and status != 'ca_rejected' and status != 'coordinator_rejected' and status != 'support_rejected' and status != 'da_rejected' and status != 'mail-admin_rejected' and status != 'us_rejected') and applicant_email = '" + s.toString().trim() + "')";
                } else if (type.equals("total")) {
                    qry += "(( (status = 'manual' || status = 'manual_upload' || status = 'api' || status = 'domainapi') and to_email = '" + s.toString().trim() + "') " + " OR applicant_email = '" + s.toString().trim() + "')";
                } else {
                    qry += " ( (status = 'manual' || status = 'manual_upload' || status = 'api' || status = 'domainapi') and to_email = '" + s.toString().trim() + "') ";
                }
                i++;
            }
            qry += " ) ";
            if (type.equals("new")) {
                qry += " and DATE( to_datetime ) = CURDATE()";
            }
            if (!formName.equals("all")) {
                if (formName.contains("nkn")) {
                    qry += " and  form_name like ? ";
                } else {
                    qry += " and  form_name = ? ";
                }
            }

            // start, code added by pr on 26thjun19
            // put a check on form reg nos here in case of query raise filter , below code added by pr on 26thjun19
            if (queryRaiseData != null) {
                String arrString = String.join("\",\"", queryRaiseData);

                arrString = "\"" + arrString + "\"";

                qry += " AND registration_no in (" + arrString + ") ";
            }

            // end, code added by pr on 26thjun19
            qry += " ORDER BY to_datetime DESC";
            ps = conSlave.prepareStatement(qry);
            int pscnt = 0;
            if (!formName.equals("all")) {
                pscnt = pscnt + 1;
                if (formName.contains("nkn")) {
                    formName = "%nkn%";
                }
                ps.setString(pscnt, formName);
            }
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " getDataPage QUERY is " + ps);
            res1 = ps.executeQuery();
            Forms frmObj = null;
            while (res1.next()) {
                showWorkOrder = false;
                showAction = fetchStatBasedShowAction(res1.getString("status"), res1.getString("form_name"));
                if (res1.getString("form_name").equals(Constants.WIFI_FORM_KEYWORD) && res1.getString("status").equals("coordinator_pending")) {
                    showAction = true;
                }
                if (res1.getString("status").equals("ca_rejected") || res1.getString("status").equals("support_rejected") || res1.getString("status").equals("coordinator_rejected") || res1.getString("status").equals("mail-admin_rejected")) {

                    isReject = true;
                }
                if (res1.getString("upload_work_order") != null && res1.getString("upload_work_order").equals("n") && !res1.getString("form_name").equals(Constants.DNS_FORM_KEYWORD)) {
                    System.out.println("admin.UserTrack.fetchDataPage():::::::::::::: " + showWorkOrder);
                    if (res1.getString("form_name").equalsIgnoreCase(Constants.DOR_EXT_RETIRED_FORM_KEYWORD)) {
                        showWorkOrder = false;
                        showQueryRespone = "";
                    } else {
                        showWorkOrder = true;
                    }
                }
                if (res1.getString("status").equals("api") || res1.getString("status").equals("domainapi")) {
                    showResponse = true;
                    showdnsEdit = true;
                    showdnsCancel = true;
                    statusApi = res1.getString("status");

                } else {
                    showResponse = false;
                    showdnsEdit = false;
                    showdnsCancel = false;
                    statusApi = res1.getString("status");
                }

//                if(res1.getString("form_name").equalsIgnoreCase("dor_ext_retired")){  // commented by rahul 02sep2022
//                    showResponse = false;
//                    showdnsEdit = false;
//                    showWorkOrder = false;
//                    showQueryRespone = "";
//                    showBulkLink = false;
//                    showCreateAction = false;
//                }
                //String[] datetime = res1.getString("to_datetime").split(" ");
                frmObj = new Forms(res1.getString("track_id"), res1.getString("form_name"),
                        res1.getString("registration_no"), fetchStatTypeString(res1.getString("status")),
                        "", "",
                        "", "",
                        "", res1.getString("to_datetime"), showAction, showCreateAction, showBulkLink); // 31stjan19
                if (!res1.getString("form_name").equalsIgnoreCase(Constants.DOR_EXT_RETIRED_FORM_KEYWORD)) {
                    showQueryRespone = queryRaiseStatusNew(res1.getString("registration_no")); //  added by rahul june 2021
                } else {
                    showQueryRespone = "";
                }
                frmObj.setShowQueryResponse(showQueryRespone);
//                showQuery = queryRaiseStatus(res1.getString("registration_no")); // 31stjan19
//                showQueryBy = queryRaiseStatusby(res1.getString("registration_no")); // march 2021
//                frmObj.setShowQuery(showQuery);
//                frmObj.setShowQueryBy(showQueryBy);
                frmObj.setShowResponse(showResponse);
                frmObj.setShowdnsEdit(showdnsEdit);
                frmObj.setShowdnsCancel(showdnsCancel);
                frmObj.setStatusApi(statusApi);
                frmObj.setShowWorkOrder(showWorkOrder);
                frmObj = updateFormsObj(frmObj);
                if (frmObj != null) {
                    totalArr.add(frmObj);
                    frmObj = null;
                }
            }
        } catch (Exception ex) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside getDataPage " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res1 != null) {
                try {
                    res1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return totalArr;
    }

    // below function added by pr on 26thjun19
    public ArrayList<String> fetchQueryRaisedForms() {
        ArrayList<String> arr = new ArrayList<String>();

        String qr_forwarded_by = "u";

        UserData userdata = (UserData) session.get("uservalues");

        String loggedin_email = userdata.getEmail();

        Set aliases = (Set) userdata.getAliases(); // iterate through this set and check if it is equal to qr_forwarded_by_user 

        PreparedStatement ps = null;
        ResultSet res1 = null;

        try {

            conSlave = DbConnection.getSlaveConnection();
            String qry = "SELECT DISTINCT(qr_reg_no)  qr_reg_no FROM query_raise WHERE qr_forwarded_by = ?  ";

            if (!qr_forwarded_by.equals("s")) {

                int i = 1;

                for (Object alias : aliases) {
                    if (i == 1) {
                        qry += " AND ( qr_forwarded_by_user = ?";
                    } else {
                        qry += " OR qr_forwarded_by_user = ?";

                    }

                    i++;
                }

                qry += " ) ";

            }

            qry += " ORDER BY qr_createdon DESC ";

            ps = conSlave.prepareStatement(qry);

            ps.setString(1, qr_forwarded_by);

            if (!qr_forwarded_by.equals("s")) {

                int j = 2;

                for (Object alias : aliases) {
                    System.out.println(printlog + " inside getQueryRaisedForms function alias is " + alias.toString());

                    ps.setString(j, alias.toString());

                    j++;

                }

            }

            System.out.println(printlog + " getQueryRaisedForms query is " + ps);

            res1 = ps.executeQuery();
            Forms frmObj = null;
            while (res1.next()) {

                arr.add(res1.getString("qr_reg_no"));

            }
        } catch (Exception ex) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == "
                    + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside getQueryRaisedForms Exception catch " + ex.getMessage());
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    //e.printStackTrace();
                    // above line commented below added by pr on 23rdapr19
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == "
                            + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside getQueryRaisedForms EXCEPTION 1 " + e.getMessage());
                }
            }
            if (res1 != null) {
                try {
                    res1.close();
                } catch (Exception e) {
                    //e.printStackTrace();
                    // above line commented below added by pr on 23rdapr19
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == "
                            + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside getQueryRaisedForms EXCEPTION 2 " + e.getMessage());
                }
            }

        }

        return arr;

    }

    // below function added by pr on 27thjun19
    public ArrayList<String> fetchQueryAnsweredForms() {
        ArrayList<String> arr = new ArrayList<String>();

        String role = fetch_role();

        String qr_forwarded_to = "";

        if (role.equals(Constants.ROLE_CA)) {
            qr_forwarded_to = "ca";

        } else if (role.equals(Constants.ROLE_CO)) {
            qr_forwarded_to = "c";

        } else if (role.equals(Constants.ROLE_SUP)) {
            qr_forwarded_to = "s";

        } else if (role.equals(Constants.ROLE_MAILADMIN)) {
            qr_forwarded_to = "m";

        } else if (role.equals(Constants.ROLE_USER)) {
            qr_forwarded_to = "u";

        }

        UserData userdata = (UserData) session.get("uservalues");

        String loggedin_email = userdata.getEmail();

        Set aliases = (Set) userdata.getAliases(); // iterate through this set and check if it is equal to qr_forwarded_by_user 

        PreparedStatement ps = null;
        ResultSet res1 = null;

        try {

            conSlave = DbConnection.getSlaveConnection();

            String qry = "SELECT qr_reg_no FROM query_raise WHERE qr_id IN (SELECT MAX(qr_id) FROM query_raise GROUP BY qr_reg_no ) AND qr_forwarded_to = ? ";

            if (!qr_forwarded_to.equals("s")) {

                int i = 1;

                for (Object alias : aliases) {
                    if (i == 1) {
                        qry += " AND ( qr_forwarded_to_user = ?";
                    } else {
                        qry += " OR qr_forwarded_to_user = ?";

                    }

                    i++;
                }

                qry += " ) ";

            }

            qry += " ORDER BY qr_createdon DESC ";

            ps = conSlave.prepareStatement(qry);

            ps.setString(1, qr_forwarded_to);

            if (!qr_forwarded_to.equals("s")) {

                int j = 2;

                for (Object alias : aliases) {
                    System.out.println(printlog + " inside getQueryAnsweredForms function alias is " + alias.toString());

                    ps.setString(j, alias.toString());

                    j++;

                }

            }

            System.out.println(printlog + " getQueryAnsweredForms query is " + ps);

            res1 = ps.executeQuery();
            Forms frmObj = null;
            while (res1.next()) {

                arr.add(res1.getString("qr_reg_no"));

            }

        } catch (Exception ex) {
            System.out.println(printlog + " == IP: " + ip + " timestamp: == "
                    + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside getQueryAnsweredForms Exception catch " + ex.getMessage());
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    //e.printStackTrace();
                    // above line commented below added by pr on 23rdapr19
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == "
                            + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside getQueryAnsweredForms EXCEPTION 1 " + e.getMessage());
                }
            }
            if (res1 != null) {
                try {
                    res1.close();
                } catch (Exception e) {
                    //e.printStackTrace();
                    // above line commented below added by pr on 23rdapr19
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == "
                            + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " inside getQueryAnsweredForms EXCEPTION 2 " + e.getMessage());
                }
            }

        }

        return arr;

    }

    public Boolean fetchRoleBasedShowAction(String stat_type, String formName) {
        UserData userdata = (UserData) session.get("uservalues");
        String email = userdata.getEmail();
        String mobile = userdata.getMobile();
        Set s1 = (Set) userdata.getAliases();
        System.out.println(printlog + " inside getEmailEquivalent get role based alias not null set value is  " + s1);
        ArrayList<String> aliases = new ArrayList<>();
        aliases.addAll(s1);
        // initializeSessionValues();
        role = fetch_role();
        showAction = false;
        showCreateAction = false;
        showBulkCreateAction = true; // line added by pr on 13thdec17
        showBulkLink = false;
        if (role.equals(Constants.ROLE_CA) && stat_type.equals("ca_pending")) {
            showAction = true;
        } else if (role.equals(Constants.ROLE_SUP) && (stat_type.equals("support_pending") || stat_type.equals("coordinator_pending"))) {
            showAction = true;
        } else if (role.equals(Constants.ROLE_CO) && (stat_type.equals("coordinator_pending"))) {
            showAction = true;
        } else if (role.equals(Constants.ROLE_MAILADMIN)) {
            showAction = false;
            if (stat_type.equals("mail-admin_pending")) {
                showCreateAction = true;
                showAction = true;
            }
            if (formName.equals(Constants.BULK_FORM_KEYWORD) || formName.equals(Constants.NKN_BULK_FORM_KEYWORD)) {
                showCreateAction = false;
                showBulkLink = true;
                if (stat_type.equals("completed")) // if added by pr on 13thdec17
                {
                    showBulkCreateAction = false;
                }
            } else if (formName.equals(Constants.VPN_BULK_FORM_KEYWORD)) // else if added by pr on 8thjan18
            {
                showCreateAction = true;
                showBulkLink = true;
                showBulkCreateAction = false;
                if (stat_type.equals("completed")) // if added by pr on 13thdec17
                {
                    showCreateAction = false;
                }
            }
        }
        //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == " + " inside fetchRoleBasedShowAction stat_type is "+stat_type+" role is "+role+" showAction value is "+showAction);
        return showAction;
    }

    // below function added by pr on 1stfeb18
    public Boolean PreviewUpdateRequest1(FormBean form_details, String regno, String admin_role, String uploaded_filename, String email, Set<String> aliases) {
        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::");
        boolean flag = false;
        String whichform = regno.substring(0, regno.indexOf("-")).toLowerCase();

        boolean isEditable = false;
//        System.out.println("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK");
//        UserData userdata = (UserData) session.get("uservalues");
//        System.out.println("preview update request::::::"+userdata.getEmail());
//        System.out.println("comingFrom" + comingFrom);
//        System.out.println("HHHHHHHHHHHHHHHHHHHHHHHHHHH " + admin_role);

        if (admin_role.equals("NA")) {
            isEditable = fisValidUser(regno, email, "user", "toEdit", aliases);
        } else {
            isEditable = fisValidUser(regno, email, admin_role, "toEdit", aliases);
        }
        //Connection con = null;
        PreparedStatement pst = null;
        try {
            con = DbConnection.getConnection();

            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + " which form in preview update request " + whichform);
            if (isEditable) {
                if (whichform.equals("sms")) {
                    try {
                        String sql = "";
                        sql = "update sms_registration set sms_service=?,pull_url=?,pull_keyword=?,short_flag=?,short_note=?,"
                                + "app_name=?,app_url=?,sms_usage=?,server_loc=?,server_loc_other=?,"
                                + "base_ip=?,service_ip=?,tech_name=?,tech_desig=?,tech_emp_code=?,tech_address=?,tech_city=?,"
                                + "tech_state=?,tech_pin=?,tech_ophone=?,tech_rphone=?,tech_mobile=?,"
                                + "tech_email=?,bowner_name=?,bowner_desig=?,bowner_emp_code=?,bowner_address=?,"
                                + "bowner_city=?,bowner_state=?,bowner_pin=?,bowner_ophone=?,bowner_rphone=?,"
                                + "bowner_mobile=?,bowner_email=?,audit=?,audit_date=?,staging_ip=?,"
                                + "flag_sender=?,sender_id=?,domestic_traffic=?,inter_traffic=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=? where registration_no=?";
                        String sms_service_final = form_details.getSmsservice1();
                        sms_service_final = sms_service_final.replace("]", "");
                        pst = con.prepareStatement(sql);
                        pst.setString(1, sms_service_final.trim());
                        pst.setString(2, form_details.getPull_url());
                        pst.setString(3, form_details.getPull_keyword());
                        pst.setString(4, form_details.getS_code());
                        pst.setString(5, form_details.getShort_code());
                        pst.setString(6, form_details.getApp_name());
                        pst.setString(7, form_details.getApp_url());
                        pst.setString(8, form_details.getSms_usage());
                        pst.setString(9, form_details.getServer_loc());
                        pst.setString(10, form_details.getServer_loc_txt());
                        pst.setString(11, form_details.getBase_ip());
                        pst.setString(12, form_details.getService_ip());
                        pst.setString(13, form_details.getT_off_name());
                        pst.setString(14, form_details.getTdesignation());
                        pst.setString(15, form_details.getTemp_code());
                        pst.setString(16, form_details.getTaddrs());
                        pst.setString(17, form_details.getTcity());
                        pst.setString(18, form_details.getTstate());
                        pst.setString(19, form_details.getTpin());
                        pst.setString(20, form_details.getTtel_ofc());
                        pst.setString(21, form_details.getTtel_res());
                        pst.setString(22, form_details.getTmobile());
                        pst.setString(23, form_details.getTauth_email());
                        pst.setString(24, form_details.getBauth_off_name());
                        pst.setString(25, form_details.getBdesignation());
                        pst.setString(26, form_details.getBemp_code());
                        pst.setString(27, form_details.getBaddrs());
                        pst.setString(28, form_details.getBcity());
                        pst.setString(29, form_details.getBstate());
                        pst.setString(30, form_details.getBpin());
                        pst.setString(31, form_details.getBtel_ofc());
                        pst.setString(32, form_details.getBtel_res());
                        pst.setString(33, form_details.getBmobile());
                        pst.setString(34, form_details.getBauth_email());
                        pst.setString(35, form_details.getAudit());
                        pst.setString(36, form_details.getDatepicker1());
                        pst.setString(37, form_details.getStaging_ip());
                        pst.setString(38, form_details.getSender());
                        pst.setString(39, form_details.getSender_id());
                        pst.setString(40, form_details.getDomestic_traf());
                        pst.setString(41, form_details.getInter_traf());
                        pst.setString(42, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(43, form_details.getMin().trim());   // ministry
                            pst.setString(44, form_details.getDept().trim());  // dept
                            pst.setString(45, form_details.getOther_dept().trim());   // other 
                            pst.setString(46, "");                      // state
                            pst.setString(47, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(43, "");   // ministry
                            pst.setString(44, "");  // dept
                            pst.setString(45, form_details.getOther_dept().trim());   // other 
                            pst.setString(46, "");                      // state
                            pst.setString(47, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(43, "");   // ministry
                            pst.setString(44, form_details.getState_dept().trim());  // dept
                            pst.setString(45, form_details.getOther_dept().trim());   // other 
                            pst.setString(46, form_details.getStateCode().trim());                      // state
                            pst.setString(47, "");   //org
                        }
                        pst.setString(48, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("dns")) {
                    int campaignId = dnsservice.fetchCampaignId(regno);
                    if (campaignId != -1) {
                        try {
                            //con = getConnection();
                            if (form_details.getRequest_type().equals("dns_single")) {
                                String sql = "update dns_registration set dns_type=?,record_mx=?,record_ptr=?,record_srv=?,record_spf=?,record_txt=?,record_dmarc=?,server_location=?,record_ptr1=?,record_mx1=?,service_url=?,emp_code=? where registration_no=?";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, form_details.getRequest_type());
                                pst.setString(2, form_details.getRequest_mx());
                                pst.setString(3, form_details.getRequest_ptr());
                                pst.setString(4, form_details.getRequest_srv());
                                pst.setString(5, form_details.getRequest_spf());
                                pst.setString(6, form_details.getRequest_txt());
                                pst.setString(7, form_details.getRequest_dmarc());
                                pst.setString(8, form_details.getDns_loc());
                                pst.setString(9, form_details.getRequest_ptr1());
                                pst.setString(10, form_details.getRequest_mx1());
                                pst.setString(11, form_details.getUrl());
                                pst.setString(12, form_details.getUser_empcode());
                                pst.setString(13, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_oldip where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_newip where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_url where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_cname where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                StringTokenizer token = new StringTokenizer(form_details.getDns_url(), ";");
                                int count = token.countTokens();
                                for (int j = 0; j <= count; j++) {
                                    if (token.hasMoreTokens()) {
                                        pst = con.prepareStatement("insert into dns_registration_url(registration_no,dns_url) values(?,?)");
                                        pst.setString(1, regno);
                                        pst.setString(2, token.nextToken());
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of final submiision is:::" + pst);
                                        pst.executeUpdate();
                                    }
                                }
                                StringTokenizer token1 = new StringTokenizer(form_details.getDns_oldip(), ";");
                                int count1 = token1.countTokens();
                                for (int k = 0; k <= count1; k++) {
                                    if (token1.hasMoreTokens()) {
                                        pst = con.prepareStatement("insert into dns_registration_oldip (registration_no,oldip) values(?,?)");
                                        pst.setString(1, regno);
                                        pst.setString(2, token1.nextToken());
                                        pst.executeUpdate();
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of final submiision is:::" + pst);
                                    }
                                }
                                StringTokenizer token2 = new StringTokenizer(form_details.getDns_cname(), ";");
                                int count2 = token2.countTokens();
                                for (int l = 0; l <= count2; l++) {
                                    if (token2.hasMoreTokens()) {
                                        pst = con.prepareStatement("insert into dns_registration_cname(registration_no,cname) values(?,?)");
                                        pst.setString(1, regno);
                                        pst.setString(2, token2.nextToken());
                                        pst.executeUpdate();
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of final submiision is:::" + pst);
                                    }
                                }
                                StringTokenizer token3 = new StringTokenizer(form_details.getDns_newip(), ";");
                                int count3 = token3.countTokens();
                                for (int k = 0; k <= count3; k++) {
                                    if (token3.hasMoreTokens()) {
                                        pst = con.prepareStatement("insert into dns_registration_newip(registration_no,newip) values(?,?)");
                                        pst.setString(1, regno);
                                        pst.setString(2, token3.nextToken());
                                        pst.executeUpdate();
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of final submiision is:::" + pst);
                                    }
                                }
                            } else {
                                String sql = "update dns_registration set dns_type=?,record_aaaa=?,record_mx=?,record_ptr=?,record_srv=?,record_spf=?,record_txt=?,record_dmarc=?,server_location=?,record_ptr1=?,record_mx1=?,service_url=?,emp_code=? where registration_no=?";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, form_details.getRequest_type());
                                pst.setString(2, form_details.getRequest_aaaa());
                                pst.setString(3, form_details.getRequest_mx());
                                pst.setString(4, form_details.getRequest_ptr());
                                pst.setString(5, form_details.getRequest_srv());
                                pst.setString(6, form_details.getRequest_spf());
                                pst.setString(7, form_details.getRequest_txt());
                                pst.setString(8, form_details.getRequest_dmarc());
                                pst.setString(9, form_details.getDns_loc());
                                pst.setString(10, form_details.getRequest_ptr1());
                                pst.setString(11, form_details.getRequest_mx1());
                                pst.setString(12, form_details.getUrl());
                                pst.setString(13, form_details.getUser_empcode());
                                pst.setString(14, regno);
                                pst.executeUpdate();
                            }
                        } catch (Exception ex) {
                            // ex.printStackTrace();
                        }
                    } else {
                        try {
                            //con = getConnection();
                            if (form_details.getRequest_type().equals("dns_single")) {
                                String sql = "update dns_registration set dns_type=?,record_mx=?,record_ptr=?,record_srv=?,record_spf=?,record_txt=?,record_dmarc=?,server_location=?,record_ptr1=?,record_mx1=?,service_url=?,emp_code=? where registration_no=?";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, form_details.getRequest_type());
                                pst.setString(2, form_details.getRequest_mx());
                                pst.setString(3, form_details.getRequest_ptr());
                                pst.setString(4, form_details.getRequest_srv());
                                pst.setString(5, form_details.getRequest_spf());
                                pst.setString(6, form_details.getRequest_txt());
                                pst.setString(7, form_details.getRequest_dmarc());
                                pst.setString(8, form_details.getDns_loc());
                                pst.setString(9, form_details.getRequest_ptr1());
                                pst.setString(10, form_details.getRequest_mx1());
                                pst.setString(11, form_details.getUrl());
                                pst.setString(12, form_details.getUser_empcode());
                                pst.setString(13, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_oldip where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_newip where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_url where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_cname where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                StringTokenizer token = new StringTokenizer(form_details.getDns_url(), ";");
                                int count = token.countTokens();
                                for (int j = 0; j <= count; j++) {
                                    if (token.hasMoreTokens()) {
                                        pst = con.prepareStatement("insert into dns_registration_url (registration_no,dns_url) values(?,?)");
                                        pst.setString(1, regno);
                                        pst.setString(2, token.nextToken());
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of final submiision is:::" + pst);
                                        pst.executeUpdate();
                                    }
                                }
                                StringTokenizer token1 = new StringTokenizer(form_details.getDns_oldip(), ";");
                                int count1 = token1.countTokens();
                                for (int k = 0; k <= count1; k++) {
                                    if (token1.hasMoreTokens()) {
                                        pst = con.prepareStatement("insert into dns_registration_oldip (registration_no,oldip) values(?,?)");
                                        pst.setString(1, regno);
                                        pst.setString(2, token1.nextToken());
                                        pst.executeUpdate();
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of final submiision is:::" + pst);
                                    }
                                }
                                StringTokenizer token2 = new StringTokenizer(form_details.getDns_cname(), ";");
                                int count2 = token2.countTokens();
                                for (int l = 0; l <= count2; l++) {
                                    if (token2.hasMoreTokens()) {
                                        pst = con.prepareStatement("insert into dns_registration_cname (registration_no,cname) values(?,?)");
                                        pst.setString(1, regno);
                                        pst.setString(2, token2.nextToken());
                                        pst.executeUpdate();
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of final submiision is:::" + pst);
                                    }
                                }
                                StringTokenizer token3 = new StringTokenizer(form_details.getDns_newip(), ";");
                                int count3 = token3.countTokens();
                                for (int k = 0; k <= count3; k++) {
                                    if (token3.hasMoreTokens()) {
                                        pst = con.prepareStatement("insert into dns_registration_newip (registration_no,newip) values(?,?)");
                                        pst.setString(1, regno);
                                        pst.setString(2, token3.nextToken());
                                        pst.executeUpdate();
                                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of final submiision is:::" + pst);
                                    }
                                }
                            } else {
                                String sql = "update dns_registration set dns_type=?,record_aaaa=?,record_mx=?,record_ptr=?,record_srv=?,record_spf=?,record_txt=?,record_dmarc=?,uploaded_filename=?,renamed_filepath=?,server_location=?,record_ptr1=?,record_mx1=?,service_url=?,emp_code=? where registration_no=?";
                                pst = con.prepareStatement(sql);
                                pst.setString(1, form_details.getRequest_type());
                                pst.setString(2, form_details.getRequest_aaaa());
                                pst.setString(3, form_details.getRequest_mx());
                                pst.setString(4, form_details.getRequest_ptr());
                                pst.setString(5, form_details.getRequest_srv());
                                pst.setString(6, form_details.getRequest_spf());
                                pst.setString(7, form_details.getRequest_txt());
                                pst.setString(8, form_details.getRequest_dmarc());
                                pst.setString(9, form_details.getUploaded_filename());
                                pst.setString(10, form_details.getRenamed_filepath());
                                pst.setString(11, form_details.getDns_loc());
                                pst.setString(12, form_details.getRequest_ptr1());
                                pst.setString(13, form_details.getRequest_mx1());
                                pst.setString(14, form_details.getUrl());
                                pst.setString(15, form_details.getUser_empcode());
                                pst.setString(16, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_oldip where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_newip where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_url where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                pst = con.prepareStatement("delete from dns_registration_cname where registration_no=?");
                                pst.setString(1, regno);
                                pst.executeUpdate();
                                List<FormBean> userList = readCSVFile(uploaded_filename, form_details.getReq_());
                                for (FormBean bulkUser : userList) {
                                    bulkUser.setRegistration_no(regno);
                                    insertDnsUser(bulkUser, "dns_bulk", form_details.getReq_());
                                }
                            }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                } else if (whichform.equals("wifi")) {
                    try {

                        String sql = "update wifi_registration set wifi_mac1=?,wifi_mac2=?,wifi_mac3=?,wifi_os1=?,wifi_os2=?,"
                                + "wifi_os3=?,wifi_request=?,wifi_time=?,wifi_duration=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,device_type1=?,device_type2 =?, device_type3= ?,device_type4= ?,wifi_mac4 =?,wifi_os4=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getWifi_mac1());
                        pst.setString(2, form_details.getWifi_mac2());
                        pst.setString(3, form_details.getWifi_mac3());
                        pst.setString(4, form_details.getWifi_os1());
                        pst.setString(5, form_details.getWifi_os2());
                        pst.setString(6, form_details.getWifi_os3());
                        pst.setString(7, form_details.getWifi_request());
                        pst.setString(8, form_details.getWifi_time());
                        pst.setString(9, form_details.getWifi_duration());
                        pst.setString(10, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(11, form_details.getMin().trim());   // ministry
                            pst.setString(12, form_details.getDept().trim());  // dept
                            pst.setString(13, form_details.getOther_dept().trim());   // other 
                            pst.setString(14, "");                      // state
                            pst.setString(15, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(11, "");   // ministry
                            pst.setString(12, "");  // dept
                            pst.setString(13, form_details.getOther_dept().trim());   // other 
                            pst.setString(14, "");                      // state
                            pst.setString(15, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(11, "");   // ministry
                            pst.setString(12, form_details.getState_dept().trim());  // dept
                            pst.setString(13, form_details.getOther_dept().trim());   // other 
                            pst.setString(14, form_details.getStateCode().trim());                      // state
                            pst.setString(15, "");   //org
                        }
                        pst.setString(16, form_details.getDevice_type1());
                        pst.setString(17, form_details.getDevice_type2());
                        pst.setString(18, form_details.getDevice_type3());
                        pst.setString(19, form_details.getDevice_type4());
                        pst.setString(20, form_details.getWifi_mac4());
                        pst.setString(21, form_details.getWifi_os4());

                        //pst.setString(16, form_details.getWifi_process());
                        pst.setString(22, regno);
                        //con = getConnection();
//                    String sql = "update wifi_registration set wifi_mac1=?,wifi_mac2=?,wifi_mac3=?,wifi_os1=?,wifi_os2=?,"
//                            + "wifi_os3=?,wifi_request=?,wifi_time=?,wifi_duration=?"
//                            + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,wifi_process=? where registration_no=?";

                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("singleuser")) {
                    try {
                        //con = getConnection();
                        String sql = "update single_registration set dob=?,dor=?,id_type=?,preferred_email1=?,preferred_email2=?,"
                                + "emp_type=?,type=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,under_sec_email=?,under_sec_name=?,under_sec_mobile=?,under_sec_desig=?,under_sec_telephone=?,other_applicant_email=?,other_applicant_name=?,other_applicant_mobile=?,other_applicant_state=?,other_applicant_dept=?,other_applicant_empcode=?,other_applicant_desig=?,request_flag=? where registration_no=?";
                        pst = con.prepareStatement(sql);

                        if (form_details.getReq_user_type().equalsIgnoreCase("other_user")) {
                            form_details.setSingle_dob(form_details.getApplicant_single_dob());
                            form_details.setSingle_dor(form_details.getApplicant_single_dor());
                            form_details.setSingle_email1(form_details.getApplicant_single_email1());
                            form_details.setSingle_email2(form_details.getApplicant_single_email2());
                            form_details.setSingle_id_type(form_details.getApplicant_single_id_type());
                            form_details.setSingle_emp_type(form_details.getApplicant_single_emp_type());
                            form_details.setReq_for(form_details.getApplicant_req_for());
                        }

                        pst.setString(1, form_details.getSingle_dob());
                        pst.setString(2, form_details.getSingle_dor());
                        pst.setString(3, form_details.getSingle_id_type());
                        pst.setString(4, form_details.getSingle_email1());
                        pst.setString(5, form_details.getSingle_email2());
                        pst.setString(6, form_details.getSingle_emp_type());
                        pst.setString(7, form_details.getReq_for());
                        pst.setString(8, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(9, form_details.getMin().trim());   // ministry
                            pst.setString(10, form_details.getDept().trim());  // dept
                            pst.setString(11, form_details.getOther_dept().trim());   // other 
                            pst.setString(12, "");                      // state
                            pst.setString(13, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(9, "");   // ministry
                            pst.setString(10, "");  // dept
                            pst.setString(11, form_details.getOther_dept().trim());   // other 
                            pst.setString(12, "");                      // state
                            pst.setString(13, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(9, "");   // ministry
                            pst.setString(10, form_details.getState_dept().trim());  // dept
                            pst.setString(11, form_details.getOther_dept().trim());   // other 
                            pst.setString(12, form_details.getStateCode().trim());                      // state
                            pst.setString(13, "");   //org
                        }
                        pst.setString(14, form_details.getUnder_sec_email());
                        pst.setString(15, form_details.getUnder_sec_name());
                        pst.setString(16, form_details.getUnder_sec_mobile());
                        pst.setString(17, form_details.getunder_sec_desig());
                        pst.setString(18, form_details.getUnder_sec_tel());
                        pst.setString(19, form_details.getApplicant_email());
                        pst.setString(20, form_details.getApplicant_name());
                        pst.setString(21, form_details.getApplicant_mobile());
                        pst.setString(22, form_details.getApplicant_state());
                        String employment_min_dept = "";
                        if (form_details.getApplicant_employment().equalsIgnoreCase("Central")) {
                            if (form_details.getApplicant_dept().equalsIgnoreCase("other")) {
                                employment_min_dept = form_details.getApplicant_employment() + "~" + form_details.getApplicant_min() + "~" + form_details.getApplicant_dept() + "~" + form_details.getApplicant_other_dept();
                            } else {
                                employment_min_dept = form_details.getApplicant_employment() + "~" + form_details.getApplicant_min() + "~" + form_details.getApplicant_dept();
                            }
                        } else if (form_details.getApplicant_employment().equalsIgnoreCase("State")) {
                            if (form_details.getApplicant_Smi().equalsIgnoreCase("other")) {

                                employment_min_dept = form_details.getApplicant_employment() + "~" + form_details.getApplicant_stateCode() + "~" + form_details.getApplicant_Smi() + "~" + form_details.getApplicant_other_dept();
                            } else {
                                employment_min_dept = form_details.getApplicant_employment() + "~" + form_details.getApplicant_stateCode() + "~" + form_details.getApplicant_Smi();

                            }
                        } else if (form_details.getApplicant_Org().equalsIgnoreCase("other")) {

                            employment_min_dept = form_details.getApplicant_employment() + "~" + form_details.getApplicant_Org() + "~" + form_details.getApplicant_other_dept();
                        } else {
                            employment_min_dept = form_details.getApplicant_employment() + "~" + form_details.getApplicant_Org();
                        }
                        pst.setString(23, employment_min_dept);
                        pst.setString(24, form_details.getApplicant_empcode());
                        pst.setString(25, form_details.getApplicant_design());
                        String req_user_type = "";
                        if (form_details.getReq_user_type().equalsIgnoreCase("other_user")) {
                            req_user_type = "y";

                        } else {
                            req_user_type = "n";
                        }
                        pst.setString(26, req_user_type);
                        pst.setString(27, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("ldap")) {
                    try {
                        //con = getConnection();
                        String sql = "update ldap_registration set app_name=?,app_url=?,domain=?,base_ip=?,service_ip=?,"
                                + "server_loc=?,server_loc_other=?,https=?,audit=?,ldap_id1=?,ldap_id2=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getApp_name());
                        pst.setString(2, form_details.getApp_url());
                        pst.setString(3, form_details.getDomain());
                        pst.setString(4, form_details.getBase_ip());
                        pst.setString(5, form_details.getService_ip());
                        pst.setString(6, form_details.getServer_loc());
                        pst.setString(7, form_details.getServer_loc_txt());
                        pst.setString(8, form_details.getHttps());
                        pst.setString(9, form_details.getAudit());
                        pst.setString(10, form_details.getLdap_id1());
                        pst.setString(11, form_details.getLdap_id2());
                        pst.setString(12, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(13, form_details.getMin().trim());   // ministry
                            pst.setString(14, form_details.getDept().trim());  // dept
                            pst.setString(15, form_details.getOther_dept().trim());   // other 
                            pst.setString(16, "");                      // state
                            pst.setString(17, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(13, "");   // ministry
                            pst.setString(14, "");  // dept
                            pst.setString(15, form_details.getOther_dept().trim());   // other 
                            pst.setString(16, "");                      // state
                            pst.setString(17, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(13, "");   // ministry
                            pst.setString(14, form_details.getState_dept().trim());  // dept
                            pst.setString(15, form_details.getOther_dept().trim());   // other 
                            pst.setString(16, form_details.getStateCode().trim());                      // state
                            pst.setString(17, "");   //org
                        }
                        pst.setString(18, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("imappop")) {
                    try {
                        // con = getConnection();
                        String sql = "update imappop_registration set protocol=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getProtocol());
                        pst.setString(2, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(3, form_details.getMin().trim());   // ministry
                            pst.setString(4, form_details.getDept().trim());  // dept
                            pst.setString(5, form_details.getOther_dept().trim());   // other 
                            pst.setString(6, "");                      // state
                            pst.setString(7, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(3, "");   // ministry
                            pst.setString(4, "");  // dept
                            pst.setString(5, form_details.getOther_dept().trim());   // other 
                            pst.setString(6, "");                      // state
                            pst.setString(7, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(3, "");   // ministry
                            pst.setString(4, form_details.getState_dept().trim());  // dept
                            pst.setString(5, form_details.getOther_dept().trim());   // other 
                            pst.setString(6, form_details.getStateCode().trim());                      // state
                            pst.setString(7, "");   //org
                        }
                        pst.setString(8, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("mobile") || whichform.equals("profile")) {
                    try {
                        // con = getConnection();
                        String sql = "update mobile_registration set country_code=?,new_mobile=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,remarks=?,remarks_flag=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getCountry_code());
                        pst.setString(2, form_details.getNew_mobile());
                        pst.setString(3, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(4, form_details.getMin().trim());   // ministry
                            pst.setString(5, form_details.getDept().trim());  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, "");                      // state
                            pst.setString(8, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(4, "");   // ministry
                            pst.setString(5, "");  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, "");                      // state
                            pst.setString(8, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(4, "");   // ministry
                            pst.setString(5, form_details.getState_dept().trim());  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, form_details.getStateCode().trim());                      // state
                            pst.setString(8, "");   //org
                        }

                        if (form_details.getRemarks().equals("other")) {
                            pst.setString(9, form_details.getOther_remarks());
                            pst.setString(10, "y");

                        } else {
                            pst.setString(9, form_details.getRemarks());
                            pst.setString(10, "n");

                        }
                        pst.setString(11, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                        ex.printStackTrace();
                    }
                } else if (whichform.equals("nkn")) {
                    try {
                        //con = getConnection();
                        String sql = "update nkn_registration set inst_name=?,inst_id=?,nkn_project=?,dob=?,dor=?,preferred_email1=?,preferred_email2=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,under_sec_email=?,under_sec_name=?,under_sec_mobile=?,under_sec_desig=?,under_sec_telephone=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getInst_name());
                        pst.setString(2, form_details.getInst_id());
                        pst.setString(3, form_details.getNkn_project());
                        pst.setString(4, form_details.getSingle_dob());
                        pst.setString(5, form_details.getSingle_dor());
                        pst.setString(6, form_details.getSingle_email1());
                        pst.setString(7, form_details.getSingle_email2());
                        pst.setString(8, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(9, form_details.getMin().trim());   // ministry
                            pst.setString(10, form_details.getDept().trim());  // dept
                            pst.setString(11, form_details.getOther_dept().trim());   // other 
                            pst.setString(12, "");                      // state
                            pst.setString(13, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(9, "");   // ministry
                            pst.setString(10, "");  // dept
                            pst.setString(11, form_details.getOther_dept().trim());   // other 
                            pst.setString(12, "");                      // state
                            pst.setString(13, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(9, "");   // ministry
                            pst.setString(10, form_details.getState_dept().trim());  // dept
                            pst.setString(11, form_details.getOther_dept().trim());   // other 
                            pst.setString(12, form_details.getStateCode().trim());                      // state
                            pst.setString(13, "");   //org
                        }
                        pst.setString(14, form_details.getUnder_sec_email());
                        pst.setString(15, form_details.getUnder_sec_name());
                        pst.setString(16, form_details.getUnder_sec_mobile());
                        pst.setString(17, form_details.getunder_sec_desig());
                        pst.setString(18, form_details.getUnder_sec_tel());
                        pst.setString(19, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("gem")) {
                    try {
                        // con = getConnection();
                        String sql = "update gem_registration set pse=?,pse_ministry=?,pse_state=?,pse_district=?,dob=?,dor=?,preferred_email1=?,preferred_email2=?,traffic=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,primary_user=?,primary_user_id=?,role_assign=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getPse());
                        if (form_details.getPse().equals("central_pse")) {
                            pst.setString(2, form_details.getPse_ministry());
                            pst.setString(3, "");
                            pst.setString(4, "");
                        } else {
                            pst.setString(2, "");
                            pst.setString(3, form_details.getPse_state());
                            pst.setString(4, form_details.getPse_district());
                        }
                        pst.setString(5, form_details.getSingle_dob());
                        pst.setString(6, form_details.getSingle_dor());
                        pst.setString(7, form_details.getSingle_email1());
                        pst.setString(8, form_details.getSingle_email2());
                        pst.setString(9, form_details.getDomestic_traf());
                        pst.setString(10, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(11, form_details.getMin().trim());   // ministry
                            pst.setString(12, form_details.getDept().trim());  // dept
                            pst.setString(13, form_details.getOther_dept().trim());   // other 
                            pst.setString(14, "");                      // state
                            pst.setString(15, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(11, "");   // ministry
                            pst.setString(12, "");  // dept
                            pst.setString(13, form_details.getOther_dept().trim());   // other 
                            pst.setString(14, "");                      // state
                            pst.setString(15, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(11, "");   // ministry
                            pst.setString(12, form_details.getState_dept().trim());  // dept
                            pst.setString(13, form_details.getOther_dept().trim());   // other 
                            pst.setString(14, form_details.getStateCode().trim());                      // state
                            pst.setString(15, "");   //org
                        }
                        pst.setString(16, form_details.getPrimary_user().trim());
                        pst.setString(17, form_details.getPrimary_user_id().trim());
                        pst.setString(18, form_details.getRole_assign());
                        pst.setString(19, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                } else if (whichform.equals("bulkuser")) {
                    try {
                        // con = getConnection();
                        String sql = "update bulk_registration set id_type=?,type=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,emp_type=?,under_sec_email=?,under_sec_name=?,under_sec_mobile=?,under_sec_desig=?,under_sec_telephone=?  where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getSingle_id_type());
                        pst.setString(2, form_details.getReq_for());
                        pst.setString(3, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(4, form_details.getMin().trim());   // ministry
                            pst.setString(5, form_details.getDept().trim());  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, "");                      // state
                            pst.setString(8, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(4, "");   // ministry
                            pst.setString(5, "");  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, "");                      // state
                            pst.setString(8, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(4, "");   // ministry
                            pst.setString(5, form_details.getState_dept().trim());  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, form_details.getStateCode().trim());                      // state
                            pst.setString(8, "");   //org
                        }
                        pst.setString(9, form_details.getSingle_emp_type());
                        pst.setString(10, form_details.getUnder_sec_email());
                        pst.setString(11, form_details.getUnder_sec_name());
                        pst.setString(12, form_details.getUnder_sec_mobile());
                        pst.setString(13, form_details.getunder_sec_desig());
                        pst.setString(14, form_details.getUnder_sec_tel());
                        pst.setString(15, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("dlist")) {
                    try {
                        //con = getConnection();
                        String sql = "update distribution_registration set list_name=?,list_description=?,list_moderated=?,allowed_member_mail=?,"
                                + "other_member_mail=?,list_temp=?,valid_date=?,moderator_name=?,moderator_email=?,moderator_mobile=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,member_count=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getList_name());
                        pst.setString(2, form_details.getDescription_list());
                        pst.setString(3, form_details.getList_mod());
                        pst.setString(4, form_details.getAllowed_member());
                        pst.setString(5, form_details.getNon_nicnet());
                        pst.setString(6, form_details.getList_temp());
                        if (form_details.getList_temp().equalsIgnoreCase("yes")) {
                            pst.setString(7, form_details.getValidity_date());
                        } else {
                            pst.setString(7, "");
                        }
                        pst.setString(8, form_details.getT_off_name());
                        pst.setString(9, form_details.getTauth_email());
                        pst.setString(10, form_details.getTmobile());
                        pst.setString(11, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(12, form_details.getMin().trim());   // ministry
                            pst.setString(13, form_details.getDept().trim());  // dept
                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                            pst.setString(15, "");                      // state
                            pst.setString(16, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(12, "");   // ministry
                            pst.setString(13, "");  // dept
                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                            pst.setString(15, "");                      // state
                            pst.setString(16, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(12, "");   // ministry
                            pst.setString(13, form_details.getState_dept().trim());  // dept
                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                            pst.setString(15, form_details.getStateCode().trim());                      // state
                            pst.setString(16, "");   //org
                        }
                        pst.setString(17, form_details.getMemberCount());
                        pst.setString(18, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("bulkdlist")) {
                    try {
                        //con = getConnection();
                        String sql = "update bulk_distribution_registration set employment=?,ministry=?,department=?,other_dept=?,state=?,organization=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(2, form_details.getMin().trim());   // ministry
                            pst.setString(3, form_details.getDept().trim());  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, "");                      // state
                            pst.setString(6, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(2, "");   // ministry
                            pst.setString(3, "");  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, "");                      // state
                            pst.setString(6, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(2, "");   // ministry
                            pst.setString(3, form_details.getState_dept().trim());  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, form_details.getStateCode().trim());                      // state
                            pst.setString(6, "");   //org
                        }

                        pst.setString(7, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } //                else if (whichform.equals("bulkdlist")) {
                //                    try {
                //                        //con = getConnection();
                //                        String sql = "update bulk_distribution_registration set list_name=?,list_description=?,list_moderated=?,allowed_member_mail=?,"
                //                                + "other_member_mail=?,list_temp=?,valid_date=?,moderator_name=?,moderator_email=?,moderator_mobile=?"
                //                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,member_count=? where registration_no=?";
                //                        pst = con.prepareStatement(sql);
                //                        pst.setString(1, form_details.getList_name());
                //                        pst.setString(2, form_details.getDescription_list());
                //                        pst.setString(3, form_details.getList_mod());
                //                        pst.setString(4, form_details.getAllowed_member());
                //                        pst.setString(5, form_details.getNon_nicnet());
                //                        pst.setString(6, form_details.getList_temp());
                //                        if (form_details.getList_temp().equalsIgnoreCase("yes")) {
                //                            pst.setString(7, form_details.getValidity_date());
                //                        } else {
                //                            pst.setString(7, "");
                //                        }
                //                        pst.setString(8, form_details.getT_off_name());
                //                        pst.setString(9, form_details.getTauth_email());
                //                        pst.setString(10, form_details.getTmobile());
                //                        pst.setString(11, form_details.getUser_employment().trim());
                //                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                //                            pst.setString(12, form_details.getMin().trim());   // ministry
                //                            pst.setString(13, form_details.getDept().trim());  // dept
                //                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                //                            pst.setString(15, "");                      // state
                //                            pst.setString(16, "");   //org
                //                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                //                            pst.setString(12, "");   // ministry
                //                            pst.setString(13, "");  // dept
                //                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                //                            pst.setString(15, "");                      // state
                //                            pst.setString(16, form_details.getOrg().trim());   //org
                //                        } else {
                //                            pst.setString(12, "");   // ministry
                //                            pst.setString(13, form_details.getState_dept().trim());  // dept
                //                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                //                            pst.setString(15, form_details.getStateCode().trim());                      // state
                //                            pst.setString(16, "");   //org
                //                        }
                //                        pst.setString(17, form_details.getMemberCount());
                //                        pst.setString(18, regno);
                //                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                //                        int i = pst.executeUpdate();
                //                        if (i > 0) {
                //                            flag = true;
                //                        }
                //                    } catch (Exception ex) {
                //                        // ex.printStackTrace();
                //                    }
                //                }
                else if (whichform.equals("relay")) {
                    try {
                        //con = getConnection();
                        String sql = "update relay_registration set division_name=?,app_name=?,os=?,app_ip=?,server_loc=?,server_loc_other=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,"
                                + "relay_app_url=?,relay_sender_id=?,domain_mx=?,"
                                + "spf=?,dkim=?,dmarc=?,relay_auth_id=?,point_mobile_number=?,point_email=?,point_name=?,landline_number=?,security_audit=?,security_exp_date=?,other_mail_type=?,point_contact=?,relay_mailsent=?,is_hosted_nic=?,mail_type=?,port=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getDivision());
                        pst.setString(2, form_details.getRelay_app_name());
                        pst.setString(3, form_details.getOs());
                        pst.setString(4, form_details.getRelay_ip());
                        pst.setString(5, form_details.getServer_loc());
                        pst.setString(6, form_details.getServer_loc_txt());
                        pst.setString(7, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(8, form_details.getMin().trim());   // ministry
                            pst.setString(9, form_details.getDept().trim());  // dept
                            pst.setString(10, form_details.getOther_dept().trim());   // other 
                            pst.setString(11, "");                      // state
                            pst.setString(12, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(8, "");   // ministry
                            pst.setString(9, "");  // dept
                            pst.setString(10, form_details.getOther_dept().trim());   // other 
                            pst.setString(11, "");                      // state
                            pst.setString(12, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(8, "");   // ministry
                            pst.setString(9, form_details.getState_dept().trim());  // dept
                            pst.setString(10, form_details.getOther_dept().trim());   // other 
                            pst.setString(11, form_details.getStateCode().trim());                      // state
                            pst.setString(12, "");   //org
                        }

                        // pst.setString(13, form_details.getUploaded_filename());
                        //pst.setString(14, form_details.getRenamed_filepath());
                        pst.setString(13, form_details.getRelay_app_url());
                        pst.setString(14, form_details.getRelay_sender_id());
                        pst.setString(15, form_details.getDomain_mx());
                        pst.setString(16, form_details.getSpf());
                        pst.setString(17, form_details.getDkim());
                        pst.setString(18, form_details.getDmarc());
                        pst.setString(19, form_details.getRelay_auth_id());
                        pst.setString(20, form_details.getMobile_number());
                        pst.setString(21, form_details.getPoint_email());
                        pst.setString(22, form_details.getPoint_name());
                        pst.setString(23, form_details.getLandline_number());
                        pst.setString(24, form_details.getSecurity_audit());
                        pst.setString(25, form_details.getSecurity_exp_date());
                        pst.setString(26, form_details.getOther_mail_type());
                        pst.setString(27, form_details.getPoint_contact());
                        pst.setString(28, form_details.getMailsent());
                        pst.setString(29, form_details.getIs_hosted());

                        if (form_details.getOtp_mail_service() != null) {
                        } else {
                            form_details.setOtp_mail_service("otp_mail_service_no");
                        }
                        if (form_details.getMail_type_trans_mail() != null) {
                        } else {
                            form_details.setMail_type_trans_mail("mail_type_trans_mail_no");
                        }
                        if (form_details.getMail_type_reg_mail() != null) {
                        } else {
                            form_details.setMail_type_reg_mail("mail_type_reg_mail_no");
                        }
                        if (form_details.getMail_type_forgotpass() != null) {
                        } else {
                            form_details.setMail_type_forgotpass("mail_type_forgotpass_no");
                        }
                        if (form_details.getMail_type_alert() != null) {
                        } else {
                            form_details.setMail_type_alert("mail_type_alert_no");
                        }
                        if (form_details.getMail_type_other() != null) {
                        } else {
                            form_details.setMail_type_other("mail_type_other_no");
                        }
                        if (form_details.getOther_mail_type() != null) {
                        } else {
                            form_details.setOther_mail_type("other_mail_type_no");
                        }

                        pst.setString(30, form_details.getOtp_mail_service() + "," + form_details.getMail_type_trans_mail() + "," + form_details.getMail_type_reg_mail() + "," + form_details.getMail_type_forgotpass() + "," + form_details.getMail_type_alert() + "," + form_details.getMail_type_other() + "," + form_details.getOther_mail_type());
                        pst.setString(31, form_details.getSmtp_port());
                        pst.setString(32, regno);

//                          prvwdetails.put("relay_app_url", rs.getString("relay_app_url"));
//                            prvwdetails.put("relay_sender_id", rs.getString("relay_sender_id"));
//                            prvwdetails.put("domain_mx", rs.getString("domain_mx"));
//                            prvwdetails.put("spf", rs.getString("spf"));
//                            prvwdetails.put("dkim", rs.getString("dkim"));
//                            prvwdetails.put("dmarc", rs.getString("dmarc"));
//                            prvwdetails.put("smtp_port", rs.getString("port"));
//                            prvwdetails.put("relay_auth_id", rs.getString("relay_auth_id"));
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("ip")) {
                    //  String ip_type = session.get("ip_type").toString();
                    try {
                        //con = getConnection();
                        String sql = "update ip_registration set ip_action_request=?,account_name=?,ip1=?,ip2=?,ip3=?,ip4=?,app_name=?,app_ip=?,server_loc=?,server_loc_other=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,ldap_url=?,ldap_auth_allocate=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getReq_for());
                        if (form_details.getReq_for().equals("sms")) {
                            pst.setString(2, form_details.getAccount_name());
                        } else if (form_details.getReq_for().equals("ldap")) {
                            pst.setString(2, form_details.getLdap_account_name());
                        } else {
                            pst.setString(2, "");
                        }
                        if (form_details.getIp_type().equals("addip")) {
                            pst.setString(3, form_details.getAdd_ip1());
                            pst.setString(4, form_details.getAdd_ip2());
                            pst.setString(5, form_details.getAdd_ip3());
                            pst.setString(6, form_details.getAdd_ip4());
                        } else {
                            if (!form_details.getOld_ip1().equals("") || form_details.getOld_ip1() != null) {
                                pst.setString(3, form_details.getOld_ip1() + ";" + form_details.getNew_ip1());
                            } else {
                                pst.setString(3, "");
                            }
                            if (!form_details.getOld_ip2().equals("") || form_details.getOld_ip2() != null) {
                                pst.setString(4, form_details.getOld_ip2() + ";" + form_details.getNew_ip2());
                            } else {
                                pst.setString(4, "");
                            }
                            if (!form_details.getOld_ip3().equals("") || form_details.getOld_ip3() != null) {
                                pst.setString(5, form_details.getOld_ip3() + ";" + form_details.getNew_ip3());
                            } else {
                                pst.setString(5, "");
                            }
                            if (!form_details.getOld_ip4().equals("") || form_details.getOld_ip4() != null) {
                                pst.setString(6, form_details.getOld_ip4() + ";" + form_details.getNew_ip4());
                            } else {
                                pst.setString(6, "");
                            }
                        }
                        if (form_details.getReq_for().equals("relay")) {
                            pst.setString(7, form_details.getRelay_app());
                            pst.setString(8, form_details.getRelay_old_ip());
                            pst.setString(9, form_details.getServer_loc());
                            pst.setString(10, form_details.getServer_loc_txt());
                        } else {
                            pst.setString(7, "");
                            pst.setString(8, "");
                            pst.setString(9, "");
                            pst.setString(10, "");
                        }
                        pst.setString(11, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(12, form_details.getMin().trim());   // ministry
                            pst.setString(13, form_details.getDept().trim());  // dept
                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                            pst.setString(15, "");                      // state
                            pst.setString(16, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(12, "");   // ministry
                            pst.setString(13, "");  // dept
                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                            pst.setString(15, "");                      // state
                            pst.setString(16, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(12, "");   // ministry
                            pst.setString(13, form_details.getState_dept().trim());  // dept
                            pst.setString(14, form_details.getOther_dept().trim());   // other 
                            pst.setString(15, form_details.getStateCode().trim());                      // state
                            pst.setString(16, "");   //org
                        }

                        if (form_details.getReq_for().equals("ldap")) {

                            pst.setString(17, form_details.getLdap_url());
                            pst.setString(18, form_details.getLdap_auth_allocate());

                        } else {
                            pst.setString(17, "");
                            pst.setString(18, "");
                        }
                        pst.setString(19, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                } else if (whichform.equals("vpn")) {
                    try {
                        //con = getConnection();
                        String sql = "update vpn_registration set ip_type=?,ip1=?,ip2=?,server_location=?,server_loc_other=?,app_url=?,dest_port=?,pname=?,pdesignation=?,"
                                + "pemail=?,pmobile=?,paddress=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getIp_type());
                        if (form_details.getIp_type().equals("single")) {
                            pst.setString(2, form_details.getNew_ip1());
                            pst.setString(3, "");
                        } else {
                            pst.setString(2, form_details.getNew_ip2());
                            pst.setString(3, form_details.getNew_ip3());
                        }
                        pst.setString(4, form_details.getServer_loc());
                        pst.setString(5, form_details.getServer_loc_txt());
                        pst.setString(6, form_details.getApp_url());
                        pst.setString(7, form_details.getDest_port());
                        pst.setString(8, form_details.getT_off_name());
                        pst.setString(9, form_details.getTdesignation());
                        pst.setString(10, form_details.getTauth_email());
                        pst.setString(11, form_details.getTmobile());
                        pst.setString(12, form_details.getTaddrs());
                        pst.setString(13, regno);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("wifiport")) {

                    try {

                        String sql = "update wifiport_registration set employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,purpose=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(2, form_details.getMin().trim());   // ministry
                            pst.setString(3, form_details.getDept().trim());  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, "");                      // state
                            pst.setString(6, "");   //org
                            pst.setString(7, form_details.getRemarks());
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(2, "");   // ministry
                            pst.setString(3, "");  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, "");                      // state
                            pst.setString(6, form_details.getOrg().trim());   //org
                            pst.setString(7, form_details.getRemarks());
                        } else {
                            pst.setString(2, "");   // ministry
                            pst.setString(3, form_details.getState_dept().trim());  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, form_details.getStateCode().trim());                      // state
                            pst.setString(6, "");   //org
                            pst.setString(7, form_details.getRemarks());
                        }
                        pst.setString(8, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        pst.close();
                        if (i > 0) {

                            pst = con.prepareStatement("delete from wifiport_entries where registration_no=?");
                            pst.setString(1, regno);
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of delete recordrs from dns_registration_oldip:::" + pst);
                            pst.executeUpdate();
                            pst.close();

                            ArrayList SourceIP = new ArrayList(Arrays.asList(form_details.getSourceip().split(";")));

                            ArrayList DestinationIP = new ArrayList(Arrays.asList(form_details.getDestinationip().split(";")));
                            ArrayList Service = new ArrayList(Arrays.asList(form_details.getService().split(";")));
                            ArrayList Port = new ArrayList(Arrays.asList(form_details.getPorts().split(";")));
                            ArrayList Action = new ArrayList(Arrays.asList(form_details.getAction().split(";")));
                            ArrayList Timeperiod = new ArrayList(Arrays.asList(form_details.getTimeperiod().split(";")));
                            for (int j = 0; j < SourceIP.size(); j++) {
                                pst = con.prepareStatement("insert into wifiport_entries (registration_no,sourceIP,destinationIP,service,ports,action,timePeriod) values(?,?,?,?,?,?,?)");
                                pst.setString(1, regno);
                                pst.setString(2, SourceIP.get(j).toString());
                                pst.setString(3, DestinationIP.get(j).toString());
                                pst.setString(4, Service.get(j).toString());
                                pst.setString(5, Port.get(j).toString());
                                pst.setString(6, Action.get(j).toString());
                                pst.setString(7, Timeperiod.get(j).toString());
                                System.out.println(printlog + " == " + "WiFiPort dao tab 2: " + pst);
                                pst.executeUpdate();

                            }

                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("centralutm")) {

                    try {

                        String sql = "update centralutm_registration set employment=?,ministry=?,department=?,other_dept=?,state=?,organization=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(2, form_details.getMin().trim());   // ministry
                            pst.setString(3, form_details.getDept().trim());  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, "");                      // state
                            pst.setString(6, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(2, "");   // ministry
                            pst.setString(3, "");  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, "");                      // state
                            pst.setString(6, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(2, "");   // ministry
                            pst.setString(3, form_details.getState_dept().trim());  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, form_details.getStateCode().trim());                      // state
                            pst.setString(6, "");   //org
                        }
                        pst.setString(7, regno);
                        System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        pst.close();
                        if (i > 0) {

                            pst = con.prepareStatement("delete from firewall_entries where registration_no=?");
                            pst.setString(1, regno);
                            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query of delete recordrs from dns_registration_oldip:::" + pst);
                            pst.executeUpdate();
                            pst.close();

                            ArrayList SourceIP = new ArrayList(Arrays.asList(form_details.getSourceip().split(";")));

                            ArrayList DestinationIP = new ArrayList(Arrays.asList(form_details.getDestinationip().split(";")));
                            ArrayList Service = new ArrayList(Arrays.asList(form_details.getService().split(";")));
                            ArrayList Port = new ArrayList(Arrays.asList(form_details.getPorts().split(";")));
                            ArrayList Action = new ArrayList(Arrays.asList(form_details.getAction().split(";")));
                            ArrayList Timeperiod = new ArrayList(Arrays.asList(form_details.getTimeperiod().split(";")));
                            for (int j = 0; j < SourceIP.size(); j++) {
                                pst = con.prepareStatement("insert into firewall_entries (registration_no,sourceIP,destinationIP,service,ports,action,timePeriod) values(?,?,?,?,?,?,?)");
                                pst.setString(1, regno);
                                pst.setString(2, SourceIP.get(j).toString());
                                pst.setString(3, DestinationIP.get(j).toString());
                                pst.setString(4, Service.get(j).toString());
                                pst.setString(5, Port.get(j).toString());
                                pst.setString(6, Action.get(j).toString());
                                pst.setString(7, Timeperiod.get(j).toString());
                                System.out.println(printlog + " == " + "Firewall dao tab 2: " + pst);
                                pst.executeUpdate();

                            }

                            flag = true;
                        }

                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }

                } else if (whichform.equals("emailactivate")) {
                    try {
                        //con = getConnection();
                        String sql = "update email_act_registration set preferred_email1=?,dor=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,under_sec_email=?,under_sec_name=?,under_sec_mobile=?,under_sec_desig=?,under_sec_telephone=?,emp_type=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getAct_email1());
                        pst.setString(2, form_details.getSingle_dor());
                        pst.setString(3, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(4, form_details.getMin().trim());   // ministry
                            pst.setString(5, form_details.getDept().trim());  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, "");                      // state
                            pst.setString(8, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(4, "");   // ministry
                            pst.setString(5, "");  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, "");                      // state
                            pst.setString(8, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(4, "");   // ministry
                            pst.setString(5, form_details.getState_dept().trim());  // dept
                            pst.setString(6, form_details.getOther_dept().trim());   // other 
                            pst.setString(7, form_details.getStateCode().trim());                      // state
                            pst.setString(8, "");   //org
                        }
                        pst.setString(9, form_details.getUnder_sec_email());
                        pst.setString(10, form_details.getUnder_sec_name());
                        pst.setString(11, form_details.getUnder_sec_mobile());
                        pst.setString(12, form_details.getunder_sec_desig());
                        pst.setString(13, form_details.getUnder_sec_tel());

                        pst.setString(14, form_details.getSingle_emp_type());
                        pst.setString(15, regno);
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {

                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }
                } else if (whichform.equals("emaildeactivate")) {
                    try {
                        //con = getConnection();
                        String sql = "update email_deact_registration set preferred_email1=?"
                                + ",employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,under_sec_email=?,under_sec_name=?,under_sec_mobile=?,under_sec_desig=?,under_sec_telephone=? where registration_no=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, form_details.getDeact_email1());
                        pst.setString(2, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(3, form_details.getMin().trim());   // ministry
                            pst.setString(4, form_details.getDept().trim());  // dept
                            pst.setString(5, form_details.getOther_dept().trim());   // other 
                            pst.setString(6, "");                      // state
                            pst.setString(7, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(3, "");   // ministry
                            pst.setString(4, "");  // dept
                            pst.setString(5, form_details.getOther_dept().trim());   // other 
                            pst.setString(6, "");                      // state
                            pst.setString(7, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(3, "");   // ministry
                            pst.setString(4, form_details.getState_dept().trim());  // dept
                            pst.setString(5, form_details.getOther_dept().trim());   // other 
                            pst.setString(6, form_details.getStateCode().trim());                      // state
                            pst.setString(7, "");   //org
                        }
                        pst.setString(8, form_details.getUnder_sec_email());
                        pst.setString(9, form_details.getUnder_sec_name());
                        pst.setString(10, form_details.getUnder_sec_mobile());
                        pst.setString(11, form_details.getunder_sec_desig());
                        pst.setString(12, form_details.getUnder_sec_tel());
                        pst.setString(13, regno);
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        // ex.printStackTrace();
                    }

                } else if (whichform.equals("dorext")) {
                    try {

                        String sql = "update dor_ext_registration set employment=?,ministry=?,department=?,other_dept=?,state=?,organization=?,dor_email =?, pre_dor=? ,dor =?,uploaded_filename = ? ,renamed_filepath = ? where registration_no=?";
                        pst = con.prepareStatement(sql);

                        pst.setString(1, form_details.getUser_employment().trim());
                        if (form_details.getUser_employment().trim().equals("Central") || form_details.getUser_employment().trim().equals("UT")) {
                            pst.setString(2, form_details.getMin().trim());   // ministry
                            pst.setString(3, form_details.getDept().trim());  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, "");                      // state
                            pst.setString(6, "");   //org
                        } else if (form_details.getUser_employment().trim().equals("Others") || form_details.getUser_employment().trim().equals("Psu") || form_details.getUser_employment().trim().equals("Const") || form_details.getUser_employment().trim().equals("Nkn") || form_details.getUser_employment().trim().equals("Project")) {
                            pst.setString(2, "");   // ministry
                            pst.setString(3, "");  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, "");                      // state
                            pst.setString(6, form_details.getOrg().trim());   //org
                        } else {
                            pst.setString(2, "");   // ministry
                            pst.setString(3, form_details.getState_dept().trim());  // dept
                            pst.setString(4, form_details.getOther_dept().trim());   // other 
                            pst.setString(5, form_details.getStateCode().trim());                      // state
                            pst.setString(6, "");   //org
                        }

                        pst.setString(7, form_details.getDor_email());
                        pst.setString(8, form_details.getP_single_dor());
                        pst.setString(9, form_details.getSingle_dor());
                        pst.setString(10, form_details.getUploaded_filename());
                        pst.setString(11, form_details.getRenamed_filepath());
                        pst.setString(12, regno);
                        System.out.println(ServletActionContext.getRequest().getSession().getId() + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);
                        int i = pst.executeUpdate();
                        if (i > 0) {
                            flag = true;
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }

                }

            }

            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "query previewupdate in Usertrack:::" + pst);

            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "ADMIN ROLE:: : " + admin_role);
            if (!admin_role.equals("NA")) {
                utility.Inform inform = new utility.Inform();
                if (whichform.equals("singleuser")) {
                    whichform = "single";
                } else if (whichform.equals("bulkuser")) {
                    whichform = "bulk";
                } else if (whichform.equals("vpn")) {
                    if (regno.startsWith("VPN-BULK")) {
                        whichform = "vpn_bulk";
                    } else {
                        whichform = "vpn_single";
                    }
                } else if (whichform.equals("nkn")) {
                    if (regno.startsWith("NKN-BULK")) {
                        whichform = "nkn_bulk";
                    } else {
                        whichform = "nkn_single";
                    }
                }
                HttpSession sessionMap = ServletActionContext.getRequest().getSession();
                //inform.sendUpdateIntimation(admin_role, regno, whichform);
//                if (sessionMap.getAttribute("user_role") != null) {
//                    if (!sessionMap.getAttribute("user_role").equals("user")) // if around added by pr on 9thfeb18
//                    {
//                        inform.sendUpdateIntimation(admin_role, regno, whichform);
//                    }
//                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "Exception in PreviewUpdateRequest1 func: " + e.getMessage());

        } finally {
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception ex) {
                    Logger.getLogger(UserTrack.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        //}
        return flag;
    }

    public List readCSVFile(String filename, String Req_) {
        List<FormBean> userList = new ArrayList<FormBean>();
        CSVReader reader = null;
        try {
            String[] line1;
            reader = new CSVReader(new FileReader(filename), ',', '\"', 1);
            while ((line1 = reader.readNext()) != null) {
                FormBean formbean = new FormBean();
                //System.out.println("line1[0]"+line1[0]+"line1[1]"+line1[1]+"line1[2]"+line1[2]+"line1[3]"+line1[3]);
                formbean.setDns_url("");
                formbean.setDns_oldip("");
                formbean.setDns_cname("");
                formbean.setDns_newip("");
                formbean.setDns_url(line1[0]);
                formbean.setDns_cname(line1[1]);
                formbean.setDns_newip(line1[2]);
                if (Req_.equals("req_modify")) {
                    formbean.setDns_oldip(line1[3]);
                }
                userList.add(formbean);
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return userList;
    }

    private void insertDnsUser(FormBean bu, String form_type, String Req_) {
        if (Req_.equals("req_modify")) {
            if (!bu.getDns_oldip().trim().equals("")) {
                String sql = "insert into dns_registration_oldip(registration_no,oldip)"
                        + "values (?, ?)";
                //Connection con = null;
                PreparedStatement ps = null;
                try {
                    con = DbConnection.getConnection();
                    ps = con.prepareStatement(sql);
                    ps.setString(1, bu.getRegistration_no());
                    ps.setString(2, bu.getDns_oldip());
                    System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " ==sql " + "e: " + ps);
                    ps.executeUpdate();
                } catch (Exception e) {
                    System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());

                } finally {
                    if (con != null) {
                        try {
                            // con.close();
                        } catch (Exception ex) {
                            Logger.getLogger(UserTrack.class
                                    .getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (ps != null) {
                        try {
                            ps.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        if (!bu.getDns_cname().trim().equals("")) {
            String sql1 = "insert into dns_registration_cname(registration_no,cname)"
                    + "values (?, ?)";
            //Connection con = null;
            PreparedStatement ps = null;
            try {
                con = DbConnection.getConnection();
                ps = con.prepareStatement(sql1);
                ps.setString(1, bu.getRegistration_no());
                ps.setString(2, bu.getDns_cname());
                System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " ==sql1 " + "e: " + ps);
                ps.executeUpdate();
            } catch (Exception e) {
                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());

            } finally {
                if (con != null) {
                    try {
                        // con.close();
                    } catch (Exception ex) {
                        Logger.getLogger(UserTrack.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (ps != null) {
                    try {
                        ps.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (!bu.getDns_url().trim().equals("")) {
            String sql2 = "insert into dns_registration_url(registration_no,dns_url)"
                    + "values (?, ?)";
            //Connection con = null;
            PreparedStatement ps = null;
            try {
                con = DbConnection.getConnection();
                ps = con.prepareStatement(sql2);
                ps.setString(1, bu.getRegistration_no());
                ps.setString(2, bu.getDns_url());
                System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " ==sql2 " + "e: " + ps);
                ps.executeUpdate();
            } catch (Exception e) {
                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());

            } finally {
                if (con != null) {
                    try {
                        // con.close();
                    } catch (Exception ex) {
                        Logger.getLogger(UserTrack.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (ps != null) {
                    try {
                        ps.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (!bu.getDns_newip().trim().equals("")) {
            String sql3 = "insert into dns_registration_newip(registration_no,newip)"
                    + "values (?, ?)";
            //Connection con = null;
            PreparedStatement ps = null;
            try {
                con = DbConnection.getConnection();
                ps = con.prepareStatement(sql3);
                ps.setString(1, bu.getRegistration_no());
                ps.setString(2, bu.getDns_newip());
                System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + userAgent + " ==sql3 " + "e: " + sql3);
                ps.executeUpdate();
            } catch (Exception e) {
                System.out.println(printlog + " == IP: " + ip + " timestamp: == " + new java.sql.Timestamp(Calendar.getInstance().getTime().getTime()) + " == " + "e: " + e.getMessage());

            } finally {
                if (con != null) {
                    try {
                        // con.close();
                    } catch (Exception ex) {
                        Logger.getLogger(UserTrack.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (ps != null) {
                    try {
                        ps.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }
//
    // ******************************* Added By Ravinder ************************************************ //

    public String fetchApproveorforward(String current_stat_type, String stat_previous) {
        System.out.println(printlog + "current_stat_type : " + current_stat_type + "  ||||| stat_previous :" + stat_previous);
        String flagapproveforward = "";
        if (((stat_previous.equalsIgnoreCase("completed")) && ((current_stat_type.equalsIgnoreCase("mail-admin_pending")) || ((current_stat_type.equalsIgnoreCase("da_pending"))) || (current_stat_type.equalsIgnoreCase("coordinator_pending")) || (current_stat_type.equalsIgnoreCase("ca_pending")) || (current_stat_type.equalsIgnoreCase("us_pending")))) || ((stat_previous.equalsIgnoreCase("mail-admin_pending")) && ((current_stat_type.equalsIgnoreCase("ca_pending")) || (current_stat_type.equalsIgnoreCase("coordinator_pending")) || (current_stat_type.equalsIgnoreCase("us_pending")))) || ((stat_previous.equalsIgnoreCase("da_pending")) && ((current_stat_type.equalsIgnoreCase("ca_pending")) || (current_stat_type.equalsIgnoreCase("coordinator_pending")) || (current_stat_type.equalsIgnoreCase("us_pending")))) || ((stat_previous.equalsIgnoreCase("coordinator_pending")) && ((current_stat_type.equalsIgnoreCase("ca_pending")) || (current_stat_type.equalsIgnoreCase("us_pending")))) || ((stat_previous.equalsIgnoreCase("support_pending")) && ((current_stat_type.equalsIgnoreCase("ca_pending")) || (current_stat_type.equalsIgnoreCase("us_pending")))) || ((stat_previous.equalsIgnoreCase("ca_pending")) && (current_stat_type.equalsIgnoreCase("manual_upload"))) || ((stat_previous.equalsIgnoreCase("us_pending")) && (current_stat_type.equalsIgnoreCase("ca_pending")))) {
            flagapproveforward = "Approved";
        } else if (((stat_previous.equalsIgnoreCase("mail-admin_rejected")) && (current_stat_type.equalsIgnoreCase("mail-admin_pending"))) || ((stat_previous.equalsIgnoreCase("da_rejected")) && (current_stat_type.equalsIgnoreCase("da_pending"))) || ((stat_previous.equalsIgnoreCase("coordinator_rejected")) && (current_stat_type.equalsIgnoreCase("coordinator_pending"))) || ((stat_previous.equalsIgnoreCase("support_rejected")) && (current_stat_type.equalsIgnoreCase("support_pending"))) || ((stat_previous.equalsIgnoreCase("ca_rejected")) && (current_stat_type.equalsIgnoreCase("ca_pending"))) || ((stat_previous.equalsIgnoreCase("us_rejected")) && (current_stat_type.equalsIgnoreCase("us_pending"))) || ((stat_previous.equalsIgnoreCase("coordinator_rejected")) && (stat_previous.equalsIgnoreCase(current_stat_type))) || ((stat_previous.equalsIgnoreCase("us_rejected")) && (stat_previous.equalsIgnoreCase(current_stat_type))) || ((stat_previous.equalsIgnoreCase("cancel")) && (current_stat_type.equalsIgnoreCase("manual_upload")))) {
            flagapproveforward = "Rejected";
        } else if ((((stat_previous.equalsIgnoreCase("da_pending"))) && (current_stat_type.equalsIgnoreCase("mail_admin_pending"))) || (((stat_previous.equalsIgnoreCase("mail_admin_pending"))) && (current_stat_type.equalsIgnoreCase("da_pending"))) || (((stat_previous.equalsIgnoreCase("da_pending")) || (stat_previous.equalsIgnoreCase("coordinator_pending"))) && (current_stat_type.equalsIgnoreCase("support_pending"))) || ((stat_previous.equalsIgnoreCase("support_pending")) && (current_stat_type.equalsIgnoreCase("coordinator_pending"))) || ((stat_previous.equalsIgnoreCase("coordinator_pending")) && (current_stat_type.equalsIgnoreCase("support_pending"))) || ((stat_previous.equalsIgnoreCase("mail-admin_pending")) && (current_stat_type.equalsIgnoreCase("support_pending"))) || (((stat_previous.equalsIgnoreCase("mail_admin_pending"))) && (current_stat_type.equalsIgnoreCase("ca_pending")))) {
            flagapproveforward = "Forward";
        } else if ((stat_previous.equalsIgnoreCase("completed")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "completed";
        } else if ((stat_previous.equalsIgnoreCase("mail-admin_pending")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "mail-admin_pending";
        } else if ((stat_previous.equalsIgnoreCase("mail-admin_rejected")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "mail-admin_rejected";
        } else if ((stat_previous.equalsIgnoreCase("da_pending")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "da_pending";
        } else if ((stat_previous.equalsIgnoreCase("coordinator_pending")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "coordinator_pending";
        } else if ((stat_previous.equalsIgnoreCase("support_pending")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "support_pending";
        } else if ((stat_previous.equalsIgnoreCase("support_rejected")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "support_rejected";
        } else if (((stat_previous.equalsIgnoreCase("ca_pending")) && (stat_previous.equalsIgnoreCase(current_stat_type))) || ((stat_previous.equalsIgnoreCase("cancel")) && (current_stat_type.equalsIgnoreCase("ca_pending")))) {
            flagapproveforward = "ca_pending";
        } else if ((stat_previous.equalsIgnoreCase("ca_rejected")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "ca_rejected";
        } else if ((stat_previous.equalsIgnoreCase("cancel")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "cancel";
        } else if ((stat_previous.equalsIgnoreCase("manual_upload")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "manual_upload";
        } else if ((stat_previous.equalsIgnoreCase("us_pending")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "us_pending";
        } else if ((stat_previous.equalsIgnoreCase("us_rejected")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "us_rejected";
        } else if ((stat_previous.equalsIgnoreCase("us_expired")) && (stat_previous.equalsIgnoreCase(current_stat_type))) {
            flagapproveforward = "us_expired";
        }
        System.out.println(printlog + "flagapproveforward:" + flagapproveforward);
        return flagapproveforward;
    }

    // ******************************* Added By Ravinder ************************************************ //
    public void approve_ca() {
        String mailadmin = getServletContext().getInitParameter("DNS_MAILADMIN");
        System.out.println(printlog + "mailadmin" + mailadmin + "stat_type" + stat_type);
        String json = null;
        Map<String, Object> approve_details = new HashMap<String, Object>();
        //Connection con = null;
        PreparedStatement ps = null;
        PreparedStatement pst = null, pst1 = null;
        ResultSet rs = null, res = null, res1 = null;
        Boolean flag = false;
        try {
            System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + " == inside approve_ca for dns");
            con = DbConnection.getConnection();
            conSlave = DbConnection.getSlaveConnection();
            String refno = data;
            try {
                String qry = "SELECT auth_email,mobile,hod_name,hod_email,hod_mobile,hod_telephone,ca_desig,employment,ministry,department,state,organization,auth_off_name,emp_code,designation,address,city,add_state,pin,other_dept FROM dns_registration WHERE registration_no = ?";
                ps = conSlave.prepareStatement(qry);
                ps.setString(1, refno.trim());

                System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + " == inside approve_ca  for dns  query1" + ps);

                res = ps.executeQuery();
                String desig = "", hod_email = "", address = "", city = "", add_state = "", pin = "", ophone = "", rphone = "", hod_mobile = "", hod_name = "", auth_email = "", mobile = "", auth_off_name = "", emp_code = "", forward_to_email = "", forward_stat_to = "", employment = "", ministry = "", department = "", state = "", state_code = "", organization = "", hod_desig = "", hod_tel = "", other_department = "";
                String forwarded_by = "";
                String forward_type = "";
                while (res.next()) {
                    auth_email = res.getString("auth_email");
                    mobile = res.getString("mobile");
                    auth_off_name = res.getString("auth_off_name");
                    desig = res.getString("designation");
                    address = res.getString("address");
                    city = res.getString("city");
                    add_state = res.getString("add_state");
                    pin = res.getString("pin");
                    emp_code = res.getString("emp_code");
                    hod_email = res.getString("hod_email");
                    hod_mobile = res.getString("hod_mobile");
                    hod_name = res.getString("hod_name");
                    hod_desig = res.getString("ca_desig");
                    hod_tel = res.getString("hod_telephone");
                    employment = res.getString("employment");
                    ministry = res.getString("ministry");
                    department = res.getString("department");
                    other_department = res.getString("other_dept");
                    state = res.getString("state");
                    organization = res.getString("organization");

                }

                if ((auth_off_name == null || auth_off_name.isEmpty()) || (address == null || address.isEmpty()) || (desig == null || desig.isEmpty()) || (city == null || city.isEmpty()) || (add_state == null || add_state.isEmpty()) || (pin == null || pin.isEmpty()) || (hod_email == null || hod_email.isEmpty()) || (hod_mobile == null || hod_mobile.isEmpty()) || (hod_name == null || hod_name.isEmpty()) || (hod_desig == null || hod_desig.isEmpty()) || (hod_tel == null || hod_tel.isEmpty())) {
                    approve_details.put("response", "profile_err");
                    System.out.println(" inside approve_ca for dns 11111111111111111");
                    flag = true;
                } else if (employment == null || employment.isEmpty()) {
                    System.out.println(" inside approve_ca for dns 22222222222222222222");
                    approve_details.put("response", "profile_err");
                    flag = true;
                } else if (employment.equalsIgnoreCase("central") || employment.equalsIgnoreCase("ut")) {
                    if (ministry == null || ministry.isEmpty()) {
                        System.out.println("inside approve_ca for dns 333333333333333333333");
                        approve_details.put("response", "profile_err");
                        flag = true;
                    }
                    if ((department == null || department.isEmpty()) && (other_department == null || other_department.isEmpty())) {
                        System.out.println(" inside approve_ca for dns 444444444444444444");
                        approve_details.put("response", "profile_err");
                        flag = true;
                    }
                } else if (employment.toLowerCase().equals("state")) {
                    if ((department == null || department.isEmpty()) && (other_department == null || other_department.isEmpty())) {
                        System.out.println("inside approve_ca for dns 555555555555555");
                        approve_details.put("response", "profile_err");
                        flag = true;
                    }
                    if (state == null || state.isEmpty()) {
                        System.out.println("inside approve_ca for dns 666666666666666666");
                        approve_details.put("response", "profile_err");
                        flag = true;
                    }
                } else {
                    if (organization == null || organization.equals("")) {
                        System.out.println("inside approve_ca for dns 77777777777777777");
                        approve_details.put("response", "profile_err");
                        flag = true;
                    }
                }

                if (emp_code == null || emp_code.equals("")) {
                    approve_details.put("response_emp", "emp_code_err");
                    flag = true;
                }

                if (!flag) {
                    if (stat_type.equals("domainapi")) {
                        forward_to_email = mailadmin;
                        forward_stat_to = "m";
                        forward_type = "mail-admin_pending";
                        forwarded_by = "a";
                    } else {
                        forward_to_email = hod_email;
                        forward_stat_to = "ca";
                        forward_type = "ca_pending";
                        forwarded_by = "a";
                    }

                    String sqlupdate = "INSERT INTO status (stat_form_type, stat_reg_no, stat_type,stat_forwarded_to,stat_forwarded_to_user, stat_forwarded_by, stat_forwarded_by_user) VALUES (?,?,?,?,?,?,?)";
                    pst = con.prepareStatement(sqlupdate);
                    pst.setString(1, whichform);
                    pst.setString(2, refno);
                    pst.setString(3, forward_type);
                    pst.setString(4, forward_stat_to);
                    pst.setString(5, forward_to_email);
                    pst.setString(6, forwarded_by);
                    pst.setString(7, auth_email);

                    System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + " == inside approve_ca  for dns  query2" + pst);

                    pst.executeUpdate();
                    System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + " == " + "Reference number :" + refno + "query:::" + pst);
                    String sqlupdate1 = "INSERT INTO application_type (app_form_type, app_reg_no, app_user_type) VALUES (?,?,?)";
                    pst1 = con.prepareStatement(sqlupdate1);
                    pst1.setString(1, whichform);
                    pst1.setString(2, refno);
                    pst1.setString(3, stat_type);
                    System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + " == inside approve_ca  for dns  query2" + pst1);

                    pst1.executeUpdate();
                    System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + " == " + "Reference number :" + refno + "query:::" + pst1);

                    if (employment.equalsIgnoreCase("central") || employment.equalsIgnoreCase("ut")) {

                    } else if (employment.toLowerCase().equals("state")) {
                        ministry = state;
                    } else {
                        ministry = organization;
                        department = "";
                    }

                    String sql_final_track = "Update final_audit_track set applicant_email=?,applicant_mobile=?,applicant_name=?,applicant_ip=?,applicant_datetime=?,status=?,form_name=?,to_email=?,to_mobile=?,to_name=?, category=?, min_state_org=?, department=? where registration_no=?";
                    pst1 = con.prepareStatement(sql_final_track);
                    pst1.setString(1, auth_email);
                    pst1.setString(2, mobile);
                    pst1.setString(3, auth_off_name);
                    pst1.setString(4, ip);
                    pst1.setString(5, pdate);
                    pst1.setString(6, forward_type);
                    pst1.setString(7, "dns");
                    pst1.setString(8, forward_to_email);
                    pst1.setString(9, "");
                    pst1.setString(10, "");
                    pst1.setString(11, employment);
                    pst1.setString(12, ministry);
                    pst1.setString(13, department);
                    pst1.setString(14, refno);
                    System.out.println(printlog + " == IP: " + ip + " == USERTRACK == USERAGENT " + " == inside approve_ca  for dns  query3" + pst1);

                    int k = pst1.executeUpdate();
                    //System.out.println(ServletActionContext.getRequest().getSession().getId() + " == " + "query of final submiision is:::" + pst);

                    approve_details.put("response", "success");
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            if (con != null) {
                try {
                    // con.close();
                } catch (Exception ex) {
                    Logger.getLogger(UserTrack.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res != null) {
                try {
                    res.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (res1 != null) {
                try {
                    res1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            if (pst1 != null) {
                try {
                    pst1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        json = new Gson().toJson(approve_details);
        ServletActionContext.getResponse().setContentType("application/json");
        try {
            ServletActionContext.getResponse().getWriter().write(json);
        } catch (IOException ex) {
            Logger.getLogger(UserTrack.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

//     public String singleModeratorDataFetchPreview() {
//        Set<ModerateBean> set = (Set<ModerateBean>) session.get("moderatorListData");
//        
//        prvwdetails.get
//        for (ModerateBean moderatorBean : set) {
//            if (moderatorBean.getId() == bulkDataId) {
//                dlistData = moderatorBean;
//                break;
//            }
//        }
//        return SUCCESS;
//    }
//    public Set<String> fetchModerator(String refno) {
//       // Set<ModerateBean> moderatorDetails = new HashSet<>();
//   //     List<Object>  list = new ArrayList<>();
//        Set<String> mv = new HashSet<>();
//        PreparedStatement ps = null;
//        ResultSet rs = null;
//       // List<Object> tmp_cord_list = null;
//        try {
//            String sql = "select * from dlist_moderator where registration_no = '" + refno + "' and form_type = 'moderator' ";
//            conSlave = DbConnection.getSlaveConnection();
//            
//            System.out.println("Sql" + sql);
//            ps = conSlave.prepareStatement(sql);
//            rs = ps.executeQuery();
//             System.out.println("RS" + rs);
//           
//            while (rs.next()) {
//            
//               mv.add(rs.getString("name"));
//               mv.add(rs.getString("email"));
//               mv.add(rs.getString("mobile"));
//           
//            }
//         //   list.add(mv);
//            System.out.println("moderator :::" + mv);
//
//        } catch (Exception ex) {
//
//            ex.printStackTrace();
//        }
//        System.out.println("Moderator List:: " + mv);
//        return mv;
//    }
//    public static String encodeURI(String value) throws UnsupportedEncodingException {
//        
//        BASE64Encoder encoder = new BASE64Encoder();
//
//        byte[] salt = new byte[8];
//
//        rand.nextBytes(salt);
//
//        return encoder.encode(salt)
//                + encoder.encode(value.getBytes());
//
//    }
//
//    public String encodeURI() {
//
//        System.out.println("encode uri");
//
//        BASE64Encoder encoder = new BASE64Encoder();
//
//        byte[] salt = new byte[8];
//
//        rand.nextBytes(salt);
//
//        data =  encoder.encode(salt)
//                + encoder.encode(getData().getBytes());
//        
//        return SUCCESS;
//
//    }
//
//    public static String decrypt(String encstr) {
//
//        if (encstr.length() > 12) {
//
//            String cipher = encstr.substring(12);
//
//            BASE64Decoder decoder = new BASE64Decoder();
//
//            try {
//
//                return new String(decoder.decodeBuffer(cipher));
//
//            } catch (IOException e) {
//
//                //  throw new InvalidImplementationException(
//                //Fail
//            }
//
//        }
//
//        return null;
//    }
    public void createEmailTable(String refno, Document document, Paragraph header, Paragraph emptypara, Font normalFont, Font boldFont) {
        try {
            ArrayList tableArr = fetchStatusAdmins(refno);
            document.newPage();
            Paragraph statusHead = new Paragraph();
            statusHead.add(new Paragraph("Bulk Entry Details", boldFont));
            statusHead.setAlignment(header.ALIGN_CENTER);
            document.add(statusHead);
            document.add(emptypara);
            PdfPTable table = null;
            PdfPCell cell = null;
            List<EmailBean> listOfEmailBean = null;
            table = new PdfPTable(7);
            table.setTotalWidth(new float[]{100, 100, 100, 100}); // widths of columns
            table.setWidthPercentage(100f);
            table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            table.getDefaultCell().setPadding(9f);
            cell = new PdfPCell(new Phrase("fname", boldFont)); // second row first column
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("lname", boldFont)); // second row first column
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("mail", boldFont)); // second row first column
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("user_state", boldFont)); // line modified by pr on 29thnov18
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("department", boldFont)); // line modified by pr on 29thnov18
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("user_design", boldFont)); // line modified by pr on 29thnov18
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);
            cell = new PdfPCell(new Phrase("user_mobile", boldFont)); // line modified by pr on 29thnov18
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(9f);
            cell.setBorder(Rectangle.BOX);
            table.addCell(cell);

            listOfEmailBean = emailservice.fetchSuccessBulkData(refno);
            for (EmailBean emailData : listOfEmailBean) {
                cell = new PdfPCell(new Phrase(emailData.getFname(), normalFont)); // second row first column
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(emailData.getLname(), normalFont)); // second row first column
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(emailData.getMail(), normalFont)); // second row first column
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(emailData.getState(), normalFont)); // second row first column
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(emailData.getDepartment(), normalFont)); // second row first column
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(emailData.getDesignation(), normalFont)); // second row first column
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
                cell = new PdfPCell(new Phrase(emailData.getMobile(), normalFont)); // second row first column
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(9f);
                cell.setBorder(Rectangle.BOX);
                table.addCell(cell);
            }
            table.setHorizontalAlignment(Element.ALIGN_LEFT);
            document.add(table);
            document.add(emptypara);

        } catch (Exception e) {
            System.out.println(printlog + " inside create table exception " + e.getMessage());
            e.printStackTrace();
        }

    }
}
